{{- $cookieName := $.Values.hostname | replace " " "_" | replace "-" "_" | replace "." "_" | lower -}}
{{- $this := dict "root" . "gp" $.Values }}

include lib.resolver.conf;

{{- $wsProxy := .Values.components.wsProxy -}}
{{- if (and $wsProxy (not $wsProxy.disabled)) }}
location / {
    include lib.proxy.conf;
    include lib.ws-sse.conf;

    # Increase connect timeout
    proxy_connect_timeout 10s;

    # Set max body size to make big uploads work
    client_max_body_size 2048m;

    # disable the error log to not spam our logs when the kube DNS doesn't know about the service yet
    error_log off;

    proxy_set_header x-wsproxy-host $host;
    proxy_pass https://wsproxy$request_uri;
}
{{- else }}

location / {
    include lib.proxy.conf;
    include lib.ws-sse.conf;

    # Increase connect timeout
    proxy_connect_timeout 10s;

    # Set max body size to make big uploads work
    client_max_body_size 2048m;

    # Rewrite redirects to correct protocol
    proxy_redirect "http://" "{{ template "gitpod.scheme" $this }}://";

    # Add Gitpod specific pseudo headers
    add_header X-Gitpod-WorkspaceId "$wsid" always;
    add_header X-Gitpod-Port        "$port" always;

    # Fix iFrame headers
    proxy_hide_header X-Frame-Options;

    # Authentication
    auth_request /auth/workspace-port;

    # Do NOT forward Gitpod cookies (main cookie/port auth cookies) to services running inside a workspace!
    # As this is too complex to put into map + regex we do this with lua
    access_by_lua_block {
        local ck = require("cookie")
        local filtered_cookies = {}
        local filtered_port_auth_cookies = {}
        local cookie_obj = ck:new()

        local cookies, err = cookie_obj:get_all()
        if err then
            -- Cookie header is not present
            return
        end

        local function ends_with(str, ending)
            return ending == "" or str:sub(-#ending) == ending
        end

        for k, v in pairs(cookies) do
            if (not ends_with(k, "_{{ $cookieName }}_")) and (not ends_with(k, "_port_auth_")) then
                filtered_cookies[#filtered_cookies+1] = k .. "=" .. v
            end
        end

        if filtered_cookies == {} then
            ngx.req.set_header("Cookie", nil)
        else
            ngx.req.set_header("Cookie", table.concat(filtered_cookies, "; "))
        end
    }

    # Handle workspace port not open/app not running
    error_page 502 504 =200 @workspace_port_not_found;

    proxy_pass http://ws-${wsid}-ports.${KUBE_NAMESPACE}.svc.cluster.local:$port$request_uri;
}
{{- end }}

location @workspace_port_not_found {
    include lib.proxy.conf;
    include lib.cors-headers.conf;

    # FIXME: We accidentally break '304 Not Modified' responses by forcing the HTTP response code to
    # '200 OK' (but keeping the response body empty) thus causing a pure white page in the browser.

    # To work around this, we kill any cache here.
    # Source: https://stackoverflow.com/a/45285696/1035471
    add_header Last-Modified $date_gmt;
    add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
    if_modified_since off;
    expires off;
    etag off;

    set $port_not_found '/port-not-found/';
    proxy_pass http://dashboard$port_not_found;
}

location /auth/workspace-port {
    include lib.proxy.conf;
    internal;

    proxy_pass_request_body off;
    proxy_set_header Content-Length "";
    client_max_body_size 0;

    proxy_set_header X-Original-URI $request_uri;
    proxy_set_header X-Original-IP  $remote_addr;

    # We translate the [...]_port_auth_ cookies into a single header of the form "(<cookie>; )*"
    set_by_lua_block $gitpod_port_auth {
        local ck = require("cookie")
        local filtered_port_auth_cookies = {}
        local cookie_obj = ck:new()

        local cookies, err = cookie_obj:get_all()
        if err then
            -- Cookie header is not present
            return
        end

        local function ends_with(str, ending)
            return ending == "" or str:sub(-#ending) == ending
        end

        for k, v in pairs(cookies) do
            if ends_with(k, "_port_auth_") then
                filtered_port_auth_cookies[#filtered_port_auth_cookies+1] = k .. "=" .. v
            end
        end

        if filtered_port_auth_cookies == {} then
            return nil
        else
            return table.concat(filtered_port_auth_cookies, "; ")
        end
    }
    proxy_set_header X-Gitpod-Port-Auth $gitpod_port_auth;

    proxy_pass http://apiserver/auth/workspace-port/$port;
}