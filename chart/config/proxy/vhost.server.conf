{{- $this := dict "root" . "gp" $.Values -}}
{{- $domain := $.Values.hostname -}}
{{- $useHttps := eq (include "gitpod.scheme" $this) "https" -}}
{{- $builtinRegistry := (index .Values "docker-registry" "enabled") -}}
{{- $builtinRegistryBypassProxy := (index .Values.components.imageBuilder.registry.bypassProxy ) -}}
{{- $builtinMinio := (index .Values "minio" "enabled") -}}
{{- $listen := index ( dict "true" "443 ssl" "false" "80" ) ( $useHttps | toString ) -}}

{{ if $useHttps }}
    {{- if eq .Values.ingressMode "hosts" }}
server {
    listen 80 default_server;
    server_name ~^(?<sdprefix>.+\.)?${PROXY_DOMAIN_REGEX}$;

    include lib.region-headers.conf;
    include lib.log-headers.conf;

    return 301 https://${sdprefix}{{ $domain }}$request_uri;
}
    {{- end }}

server {
    listen 80;
    server_name health.{{ $domain }};

    include lib.region-headers.conf;
    include lib.log-headers.conf;

    location = /nginx/status {
        access_log off;
        default_type text/plain;
        return 200 "alive";
    }
}
{{ end }}

server {
    listen {{ $listen }} default_server;

    {{- if eq .Values.ingressMode "hosts" }}
    server_name {{ $domain }} www.{{ $domain }} _;
    {{- else }}
    {{- if $useHttps }}
    listen 80;
    {{- end }}
    include lib.workspace-locations-path.conf;
    {{- end }}

{{- if $useHttps }}
    include lib.ssl.conf;
    include lib.https_redirect.conf;
{{- end }}

    include lib.cors-server.conf;
    include lib.locations.conf;
    include lib.locations-cerc.conf;
    include lib.region-headers.conf;
    include lib.log-headers.conf;
}

# Deprecated: Leave here for backwards compatibility during rollout
# TODO API_REMAP_CLEANUP Delete
server {
    listen {{ $listen }};
    server_name api.{{ $domain }};

{{- if $useHttps }}
    include lib.ssl.conf;
    include lib.https_redirect.conf;
{{- end }}

    include lib.cors-server.conf;
    include lib.region-headers.conf;
    include lib.log-headers.conf;

    location / {
        return 301 $scheme://{{ $domain }}/api$request_uri;
    }
}

{{- if and $builtinRegistry (not $builtinRegistryBypassProxy) }}
server {
    listen {{ $listen }};
    server_name registry.{{ $domain }};

{{- if $useHttps }}
    include lib.ssl.conf;
    include lib.https_redirect.conf;
{{- end }}

    include lib.resolver.conf;
    include lib.cors-server.conf;
    include lib.region-headers.conf;
    include lib.log-headers.conf;
    include lib.proxy.conf;

    client_max_body_size 0;
    
    location / {
        auth_basic           "Docker Registry";
        auth_basic_user_file /etc/nginx/registry-auth.htpasswd;
        proxy_pass https://{{ index .Values "docker-registry" "fullnameOverride" }}.{{ .Release.Namespace }}.svc.cluster.local$request_uri;
    }
}
{{ end -}}

{{- if $builtinMinio }}
server {
    listen {{ $listen }};
    server_name minio.{{ $domain }};

{{- if $useHttps }}
    include lib.ssl.conf;
    include lib.https_redirect.conf;
{{- end }}

    include lib.resolver.conf;
    include lib.cors-server.conf;
    include lib.region-headers.conf;
    include lib.log-headers.conf;
    include lib.proxy.conf;

    client_max_body_size 0;
    
    location / {
        proxy_pass http://{{ index .Values "minio" "fullnameOverride" }}.{{ .Release.Namespace }}.svc.cluster.local:9000$request_uri;
    }
}
{{ end -}}

# Workspaces/Blobserve - proxy passing to WS proxy
server {
    listen {{ $listen }};
    # Matches:
    #  - (webview-|browser-|extensions-)?+          foreign content prefix including UUID (optional). This must be possesive (?+) to not confuse "webview-8000-a1231-..." with a valid UUID
    #  - (?<wsid>[a-z][0-9a-z\-]+)      workspace Id or blobserve
    #  - \.ws(-[a-z0-9]+)?              workspace base domain
    server_name ~^(webview-|browser-|extensions-)?+(?<wsid>[a-z0-9][0-9a-z\-]+)\.ws(-[a-z0-9]+)?\.${PROXY_DOMAIN_REGEX}$;

{{- if $useHttps }}
    {{- if eq .Values.ingressMode "pathAndHost" }}
    listen 80;
    {{- end }}
    include lib.ssl.conf;
    include lib.https_redirect.conf;
{{- end }}

    include lib.workspace-locations.conf;
    include lib.region-headers.conf;
    include lib.log-headers.conf;
}

server {
    listen {{ $listen }};
    # Matches:
    #  - (webview-|browser-|extensions-)?+          for now, we only support Theia webviews here! (TODO is there a - meaningful - way to generalize this?)
    #  - (?<port>[0-9]{2,5})-           port to forward to
    #  - (?<wsid>[a-z][0-9a-z\-]+)      workspace Id
    #  - \.ws(-[a-z0-9]+)?              workspace base domain
    # "" needed because of {} (nginx syntax wart)
    server_name "~^(webview-|browser-|extensions-)?+(?<port>[0-9]{2,5})-(?<wsid>[a-z0-9][0-9a-z\-]+)\.ws(-[a-z0-9]+)?\.${PROXY_DOMAIN_REGEX}$";

{{- if $useHttps }}
    {{- if eq .Values.ingressMode "pathAndHost" }}
    listen 80;
    {{- end }}
    
    include lib.ssl.conf;
    include lib.https_redirect.conf;
{{- end }}

    include lib.workspace-port-locations.conf;
    include lib.region-headers.conf;
}
