{{- $this := dict "root" . "gp" $.Values }}
include lib.resolver.conf;
include lib.error-generic.conf;


#######################################################
# Reverse-proxy for server service
#######################################################
#####   Factory Links
location /github.com {
    include lib.proxy.conf;
    include lib.cors-headers.conf;

    # nginx needs a variable to be part of the proxy_pass target to rewrite the URI...
    set $index_html '/index.html';
    proxy_pass http://dashboard$index_html;
}


#####   Dashboard
location / {
    include lib.proxy.conf;
    include lib.cors-headers.conf;

    # ### Caching
    # Dashboard only servces static resources, which should be cached agressively.
    # But on deployment those should be invalidated within a short time frame.
    # nginx by default sets 'etag' and 'last-modified' header (based on content hash and ctime/mtime).
    #
    # # Cache-Control
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#Cache_validation
    #
    # We want the browsers to revalidate each resource each time it uses it to ensure it always has the newest state.
    add_header Cache-Control "no-cache, no-transform";
    #
    # # Last-Modified
    # The last modified header is set to the ctime/mtime of the respective file (which is the time our images are build).
    # This leads to clients that think their cached files are newer than ours because often we have several days/hours between build and actual deployment.
    # We could set "Last-Modified" to the deployment data, but would needlessly invalidate _all_ resources with each deployment.
    #
    # We want browsers to rely on etag only, as that is our ground truth. Delete "Last-Modified".
    add_header "Last-Modified" "";

    proxy_pass http://dashboard$request_uri;
}


##### Authentication
# GitHub authentication callback endpoint does not like CORS headers
location = /auth/github/callback {
    include lib.proxy.conf;

    proxy_pass http://apiserver$request_uri;
}

# Other (GitLab) seem to do not mind
location /auth {
    include lib.proxy.conf;
    include lib.cors-headers.conf;

    proxy_pass http://apiserver$request_uri;
}

##### Apps (e.g. prebuild app)
location /apps {
    include lib.proxy.conf;
    include lib.cors-headers.conf;

    proxy_pass http://apiserver$request_uri;
}

##### Blobserve (ingressMode=noDomain,pathAndHost)
{{- $wsProxy := .Values.components.wsProxy -}}
{{- if (and $wsProxy (not $wsProxy.disabled)) }}
location /blobserve {
    include lib.proxy.conf;
    include lib.cors-headers.conf;

    proxy_pass http://wsproxy$request_uri;
}
{{- end }}


##### Gitpod plugins
location /plugins {
    proxy_intercept_errors off;
    proxy_cache off;

    # Set max body size to make big uploads work
    client_max_body_size 2048m;

    # 1. makes a subrequest to `http://apiserver/plugins/preflight` (via the internal /plugins-preflight location)
    #       to obtain the target URL for upload/download
    # 2. passes to a provided target URL
    include lib.gitpod-plugins.conf;
}
location /plugins-preflight {
    # this is an internal location used only for the subrequest (cf. /plugins) as
    # it's not possible to pass from within the fetch in lua code.
    internal;
    proxy_read_timeout 3600s;
    proxy_pass http://apiserver/plugins/preflight?$query_string;
}

##### Workspace download
location /workspace-download {
    set $qs "${request_uri}";
    set $targetUrl "no-url";
    access_by_lua_block {
        url = "/internal-wsdl/" .. ngx.var.qs;
        response = ngx.location.capture(url);
        if response.status == ngx.HTTP_OK then
            ngx.var.targetUrl = response.body;
        else
            ngx.log(ngx.ERR, "Bad Request: /workspace-download/get returned with code " .. response.status)
            return ngx.exit(400)
        end
    }

    log_by_lua_block {
        ngx.log(ngx.ERR, " proxy_pass to " .. ngx.var.targetUrl)
    }

    proxy_pass $targetUrl;

    # Google wants to see */* as content type due to the way we sign the URLs.
    proxy_set_header content-type "*/*";
    # The browser needs to see the correct archive content type to trigger the download.
    add_header content-type "application/tar+gzip";
    # Make sure we don't bleed error storage error pages
    proxy_intercept_errors on;
    # Don't cache the download
    proxy_cache off;

    # hide original headers
    proxy_hide_header x-guploader-uploadid;
    proxy_hide_header etag;
    proxy_hide_header x-goog-generation;
    proxy_hide_header x-goog-metageneration;
    proxy_hide_header x-goog-hash;
    proxy_hide_header x-goog-stored-content-length;
    proxy_hide_header x-gitpod-region;
    proxy_hide_header x-goog-stored-content-encoding;
    proxy_hide_header x-goog-storage-class;
    proxy_hide_header x-goog-generation;
    proxy_hide_header x-goog-metageneration;
    proxy_hide_header cache-control;
    proxy_hide_header expires;
}
location /internal-wsdl {
    internal;

    proxy_read_timeout 3600s;
    proxy_pass http://apiserver$request_uri;
}


#####   API / auth -> server
### mapping $request_uri -> $request_uri_api_dropped: vhost.map-api-request-uri.conf

# Websocket connections
location = /api/gitpod {
    include lib.proxy.conf;
    include lib.cors-headers.conf;
    include lib.ws-sse.conf;

    proxy_pass http://ws-apiserver$request_uri_api_dropped;
}
location = /api/v1 {
    include lib.proxy.conf;
    include lib.cors-headers.conf;
    include lib.ws-sse.conf;

    proxy_pass http://ws-apiserver$request_uri_api_dropped;
}

# Default api base route
location /api {
    include lib.proxy.conf;
    include lib.cors-headers.conf;

    proxy_pass http://apiserver$request_uri_api_dropped;
}

location /graphql {
    include lib.proxy.conf;
    include lib.cors-headers.conf;

    proxy_pass http://apiserver$request_uri;
}

location @error_404 {
    include lib.proxy.conf;
    include lib.cors-headers.conf;

    # nginx needs a variable to be part of the proxy_pass target to rewrite the URI...
    set $not_found '/404/';
    proxy_pass http://dashboard$not_found;
}


location @error_generic {
    # Something really bad happened: One of the requested resources is not there, at all. Redirect to the generic error page
    return 302 {{ template "gitpod.scheme" $this }}://{{.Values.hostname}}/sorry/#Error%20$upstream_status;
}