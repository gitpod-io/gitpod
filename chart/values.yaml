# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

version: # version of Gitpod will be set by the CI job on publishing to https://charts.gitpod.io/

hostname: localhost
certificatesSecret:
  secretName: https-certificates

imagePrefix: gcr.io/gitpod-io/self-hosted/
installation:
  stage: production
  tenant: gitpod
  region: local
  cluster: "00"
  shortname: ""
license: ""
installPodSecurityPolicies: true
imagePullPolicy: IfNotPresent
resources:
  default:
    cpu: 100m
    memory: 200Mi
workspaceSizing:
  requests:
    cpu: "1m"
    memory: "2.25Gi"
    storage: "5Gi"
  limits:
    cpu: "5"
    memory: "12Gi"
  dynamic:
    # Gitpod supports dynamic CPU limiting. We express those limits in "buckets of CPU time" (jiffies where 1 jiffie is 1% of a vCPU).
    # Each bucket has a limit (i.e. max CPU rate in jiffies/sec, 100 jiffies/sec = 1 vCPU).
    #
    # For example:
    #   # three minutes of 5 CPUs: 5 [numCPU] * 100 [jiffies/sec] * (3 * 60) [seconds] = 90000
    #   - budget: 90000
    #     limit: 500
    #   # five minutes  of 4 CPUs: 4 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 120000
    #   - budget: 120000
    #     limit: 400
    #   # remainder of 2 CPUs where a user has to stay below sustained use of 1.8 CPUs for 5 minutes:
    #   #                       1.8 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 54000
    #   - budget: 54000
    #     limit: 200
    #
    # if there are no buckets configured, the dynamic CPU limiting is disabled.
    cpu:
      buckets: []
      samplingPeriod: "10s"
      controlPeriod: "15m"
db:
  host: db
  port: 3306
  password: test
messagebus:
  username: "override-me"
  password: "override-me"
  secretName: messagebus-certificates-secret-core
defaults:
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
dbEncryptionKeys:
  secretName: null
  file: secrets/encryption-key.json
serviceWaiter:
  imageName: "service-waiter"
tracing: {}
authProviders: []
# Example authProvider configurations below:
# - id: "Public-GitHub"
#   host: "github.com"
#   type: "GitHub"
#   oauth:
#     clientId: "CLIENT_ID"
#     clientSecret: "SECRET"
#     callBackUrl: "https://gitpod.io/auth/github/callback"
#     settingsUrl: "https://github.com/settings/connections/applications/CLIENT_ID"
#   description: ""
#   icon: ""
# - id: "Public-GitLab"
#   host: "gitlab.com"
#   type: "GitLab"
#   oauth:
#     clientId: "CLIENT_ID"
#     clientSecret: "SECRET"
#     callBackUrl: "https://gitpod.io/auth/gitlab/callback"
#     settingsUrl: "https://gitlab.com/profile/applications"
#   description: ""
#   icon: ""
branding:
  logo: /images/gitpod-ddd.svg
  homepage: https://www.gitpod.io/
  links:
    header:
      - name: Workspaces
        url: /workspaces/
      - name: Docs
        url: https://www.gitpod.io/docs/
      - name: Blog
        url: https://www.gitpod.io/blog/
      - name: Community
        url: https://community.gitpod.io/
    footer:
      - name: Docs
        url: https://www.gitpod.io/docs/
      - name: Blog
        url: https://www.gitpod.io/blog/
      - name: Status
        url: https://status.gitpod.io/
    social:
      - type: GitHub
        url: https://github.com/gitpod-io/gitpod
      - type: Discourse
        url: https://community.gitpod.io/
      - type: Twitter
        url: https://twitter.com/gitpod
    legal:
      - name: Imprint
        url: https://www.gitpod.io/imprint/
      - name: Privacy Policy
        url: https://www.gitpod.io/privacy/
      - name: Terms of Service
        url: https://www.gitpod.io/terms/
workspaceScheduler: workspace-scheduler
serverProxyApiKey: "fF7+aCPvF9Pa0AEjmoZ+yWVh6PqBjM5VEA0wyQs3FH4="
previewFeatureFlags: ["user_namespace"]

components:

  blobserve:
    name: "blobserve"
    disabled: false
    resources:
      cpu: 100m
      memory: 32Mi
    ports:
      service:
        expose: true
        containerPort: 32224
        servicePort: 4000

  contentService:
    name: "content-service"
    disabled: false
    resources:
      cpu: 100m
      memory: 32Mi
    ports:
      rpc:
        expose: true
        containerPort: 8080
      metrics:
        expose: false
        containerPort: 9500
    remoteStorage:
      kind: minio
      blobQuota: 0

  dbMigrations:
    enabled: true
    name: db-migrations

  db:
    name: "db"
    autoMigrate: true
    gcloudSqlProxy:
      enabled: false
      instance: not-set
      credentials: not-set
    serviceType: ClusterIP

  dashboard:
    name: "dashboard"
    dependsOn:
    - "dashboard-configmap.yaml"
    resources:
      cpu: 100m
      memory: 32Mi
    ports:
      http:
        expose: true
        containerPort: 80
        servicePort: 3001
    config:
    serviceType: ClusterIP

  imageBuilder:
    name: "image-builder"
    dependsOn:
    - "image-builder-configmap.yaml"
    hostDindData: /var/gitpod/docker
    registry:
      name: builtin
      secretName: builtin-registry-auth
      path: ""
      baseImageName: ""
      workspaceImageName: ""
      # By default, the builtin registry is accessed through the proxy.
      # If bypassProxy is true, the builtin registry is accessed via <registry-name>.<namespace>.svc.cluster.local directly.
      bypassProxy: false
    registryCerts:
    - name: builtin
      secret: builtin-registry-certs
    dindImage: docker:19.03-dind
    dindMtu: ""
    dindResources:
      requests:
        cpu: 100m
        memory: 128Mi
    alpineImage: alpine:3.9
    selfBuildBaseImage: ""
    ports:
      rpc:
        expose: true
        containerPort: 8080
      metrics:
        expose: false
        containerPort: 9500

  registryFacade:
    name: "registry-facade"
    disabled: false
    dependsOn:
    - "registry-facade-configmap.yaml"
    certificatesSecret: {}
    resources:
      cpu: 100m
      memory: 32Mi
    ports:
      registry:
        expose: true
        containerPort: 32223
        servicePort: 3000
    svcLabels:
      feature: registry
    handover:
      enabled: false
      socket: /var/lib/gitpod/registry-facade
    serviceType: "ClusterIP"

  server:
    name: "server"
    replicas: 1
    dependsOn:
    - "server-proxy-apikey-secret.yaml"
    - "auth-providers-configmap.yaml"
    sessionSecret: Important!Really-Change-This-Key!
    resources:
      cpu: "200m"
    github:
      app: {}
    blockNewUsers: false
    runDbDeleter: true
    storage: {}
    wsman: []
    defaultBaseImageRegistryWhitelist: []
    defaultFeatureFlags: []
    ports:
      http:
        expose: true
        containerPort: 3000
        servicePort: 3000
      metrics:
        expose: true
        containerPort: 9500
      debug:
        expose: false
        containerPort: 9229
    serviceSessionAffinity: None
    serverContainer:
      volumeMounts: null
      env: null
    volumes: null
    garbageCollection:
      disabled: "false"
    definitelyGpDisabled: "false"

  workspace:
    ports:
      http:
        containerPort: 23000
        supervisorPort: 22999
    defaultImage:
      imagePrefix: "gitpod/"
      imageName: "workspace-full"
      version: "latest"
    theiaImage:
      imageName: "ide/theia"
    codeImage:
      imageName: "ide/code"
    supervisor:
      imageName: "supervisor"
    dockerUp:
      imageName: "docker-up"
    pullSecret:
      secretName: builtin-registry-auth
    template:
      default:
        spec:
            dnsConfig:
            nameservers:
            - 1.1.1.1
            - 8.8.8.8
            dnsPolicy: None

  messagebus:
    name: "messagebus"
    resources:
      cpu: 100m
      memory: 128Mi
    ports:
      amqp:
        expose: true
        containerPort: 5672
      epmd:
        expose: true
        containerPort: 4369
      ui:
        expose: true
        containerPort: 15672
      dist:
        expose: true
        containerPort: 25672
      metrics:
        expose: true
        containerPort: 15692

  proxy:
    name: "proxy"
    svcName: "proxy"
    replicas: 1
    dependsOn:
    - "proxy-configmap-nginx.yaml"
    - "server-proxy-apikey-secret.yaml"
    - "server-proxy-ssl-dhparam.yaml"
    ports:
      http:
        expose: true
        containerPort: 80
        # nodePort: 31080
      https:
        expose: true
        containerPort: 443
        # nodePort: 31443
    loadBalancerIP: null
    serviceType: "LoadBalancer"
    serviceSessionAffinity: "None"
    serviceExternalTrafficPolicy: null
    deployIngressService: true
    certbot:
      enabled: false
      email: "certificate@your-domain.com"
    # A base64ed Diffie-Hellman parameter
    # This can be generated with: openssl dhparam 4096 2> /dev/null | base64 -w 0
    # http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_dhparam
    sslDHParam:
    # enabled cronjob to restart the proxy deployment
    restarter:
      enabled: false
      schedule: '0 0 * * 0'
      image: bitnami/kubectl:latest

  wsManager:
    name: "ws-manager"
    resources:
      cpu: 100m
      memory: 32Mi
    ports:
      rpc:
        expose: true
        containerPort: 8080
      metrics:
        expose: false
        containerPort: 9500

  wsManagerBridge:
    name: "ws-manager-bridge"
    defaultConfig: true
    resources:
      cpu: 100m
      memory: 64Mi
    ports:
      metrics:
        expose: false
        containerPort: 9500

  wsDaemon:
    name: "ws-daemon"
    hostWorkspaceArea: /var/gitpod/workspaces
    servicePort: 8080
    workspaceSizeLimit: ""
    containerRuntime:
      enabled: true
      runtime: containerd
      containerd:
        socket: /run/containerd/containerd.sock
      nodeRoots:
      - /var/lib
      - /run/containerd/io.containerd.runtime.v1.linux/k8s.io
      # On some hosts systems containerd uses different paths to store it's containers in, for example:
      # Find out by ssh onto a node and "mount | grep rootfs" and have a look at the paths
      # - /run/containerd/io.containerd.runtime.v1.linux/moby
      # - /run/containerd/io.containerd.runtime.v2.task/k8s.io
    userNamespaces:
      shiftfsModuleLoader:
        enabled: false
        imageName: "shiftfs-module-loader"
      seccompProfileInstaller:
        enabled: true
        imageName: "seccomp-profile-installer"
    registryProxyPort: 8081

  wsScheduler:
    name: "ws-scheduler"
    disabled: false
    resources:
      cpu: 100m
      memory: 32Mi
    schedulerName: "workspace-scheduler"
    ratelimit:
      # Limits the # of scheduling attempts (per second) to limit traffic to the k8s master.
      maxRPS: 10
    scaler:
      enabled: false
      maxGhostWorkspaces: 10
      renewal:
        interval: "5m"
        percentage: 20
      controller:
        kind: "constant"
        constant:
          setpoint: 5
    ports:
      metrics:
        expose: true
        containerPort: 9500

  cerc:
    name: cerc
    disabled: true
    resources:
      cpu: 100m
      memory: 32Mi
    dependsOn:
      - "cerc-configmap.yaml"
    ports:
      http:
        expose: true
        containerPort: 8080
        servicePort: 80
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
    config:
      selftest:
        period: 10s
      serverHealth:
        period: 1m
      workspaceHealth:
        period: 1m
      workspaceProbe:
        period: 5m

  wsProxy:
    name: "ws-proxy"
    disabled: false
    resources:
      cpu: 100m
      memory: 64Mi
    replicas: 1
    useHTTPS: false
    ingress:
      portRange:
        start: 10000
        end: 11000
    ports:
      httpProxy:
        expose: true
        containerPort: 8080
      metrics:
        expose: false
        containerPort: 9500

docker-registry:
  enabled: true
  fullnameOverride: registry
  service:
    port: 443
  tlsSecretName: builtin-registry-certs

minio:
  enabled: true
  fullnameOverride: minio
  accessKey: # create random accesskey and secretkey
  secretKey: # create random accesskey and secretkey
  serviceAccount:
    create: true
    name: minio
  resources:
    requests:
      # defaults to 4GB, set to 2GB to be able to start on smaller instances
      memory: 2G

mysql:
  enabled: true
  fullnameOverride: mysql
  testFramework:
    enabled: false
  existingSecret: db-password
  serviceAccount:
    name: db
  extraVolumes: |
    - name: init-scripts
      configMap:
        name: db-init-scripts
  extraVolumeMounts: |
    - mountPath: /docker-entrypoint-initdb.d
      name: init-scripts
