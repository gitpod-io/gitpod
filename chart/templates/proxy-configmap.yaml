# Copyright (c) 2021 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.components.proxy.name }}-config
  labels:
    app: {{ template "gitpod.fullname" $ }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  vhost.empty: |
    # Placeholder to avoid errors loading files using a glob pattern
{{- if index .Values "minio" "enabled" }}
  vhost.minio: |
    https://minio.{$GITPOD_DOMAIN} {
      import enable_log
      import remove_server_header
      import ssl_configuration

      reverse_proxy {{ index .Values "minio" "fullnameOverride" }}.{{ .Release.Namespace }}.{$KUBE_DOMAIN}:9000 {
        flush_interval -1
      }
    }
{{- end }}
{{- if index .Values "docker-registry" "enabled" }}
{{- if index .Values "docker-registry" "authentication" -}}
{{ $t := set . "username" (index .Values "docker-registry" "authentication" "username") }}
{{ $t := set . "password" (index .Values "docker-registry" "authentication" "password") }}
{{- else }}
{{ $t := set . "username" (randAlphaNum 20) }}
{{ $t := set . "password" (randAlphaNum 20) }}
{{- end }}
  vhost.docker-registry: |
    https://registry.{$GITPOD_DOMAIN} {
      import enable_log
      import remove_server_header
      import ssl_configuration

      basicauth bcrypt "Docker Registry" {
        {{ .username }} {{ bcrypt .password | b64enc }}
      }

      reverse_proxy https://{{ include "gitpod.builtinRegistry.internal_name" . }} {
        flush_interval -1
        transport http {
          tls_trusted_ca_certs /etc/caddy/registry-certs/ca.crt
        }
      }
    }
{{- end }}
{{- if .Values.vsxRegistry.proxy }}
  vhost.open-vsx: |
    # We cache the requests to the VSX registry and in case of an upstream server error we serve the the cached results.
    https://open-vsx.{$GITPOD_DOMAIN} {
      import enable_log_debug
      import remove_server_header
      import ssl_configuration

      # The http_cache plugin does not allow to cache the HTTP OPTIONS method.
      # That's why we simply serve a static respond instead of asking the upstream server.
      @options method OPTIONS
      header @options {
        Access-Control-Allow-Credentials "true"
        Access-Control-Allow-Headers "content-type,x-market-client-id,x-market-user-id,x-client-commit,x-client-name,x-client-version,x-machine-id"
        Access-Control-Allow-Methods "OPTIONS,GET,POST,PATCH,PUT,DELETE"
        Access-Control-Allow-Origin "*"
      }
      respond @options 204 {
        close
      }

      reverse_proxy {
        to https://{{ .Values.vsxRegistry.host | default "open-vsx.org" }}

        # health_uri /api/-/search

        header_up Host "{{ .Values.vsxRegistry.host | default "open-vsx.org" }}"
        header_up -Connection

        # Override/remove existing cache control headers from the upstream server.
        header_down Cache-Control "max-age=30, public"  # cache for 30 seconds
        header_down -Vary
        header_down -Pragma
        header_down -Expires
      }

      gitpod.body_intercept {
        search "{{ .Values.vsxRegistry.host | default "open-vsx.org" }}"
        replace "open-vsx.{$GITPOD_DOMAIN}"
      }

      http_cache {
        cache_type file
        path /tmp/openvsx-cache
        match_path /
        match_methods GET HEAD POST
        stale_max_age 72h  # 3 days
        cache_key "{http.request.method} {http.request.host}{http.request.uri.path}?{http.request.uri.query} {http.request.contentlength} {http.request.bodyhash}"
      }
    }
{{- end }}

{{- if not .Values.components.paymentEndpoint.disabled }}
  vhost.payment-endpoint: |
    https://payment.{$GITPOD_DOMAIN} {
      import enable_log
      import remove_server_header
      import ssl_configuration
      import debug_headers

      reverse_proxy payment-endpoint.{$KUBE_NAMESPACE}.{$KUBE_DOMAIN}:3002 {
        import upstream_headers
        import upstream_connection
      }

      handle_errors {
        respond "Internal Server Error" 500
      }
    }
{{- end }}

{{- if not .Values.components.kedge.disabled }}
  vhost.kedge: |
    https://*.{$GITPOD_DOMAIN} {
      import enable_log
      import remove_server_header
      import ssl_configuration
      import debug_headers

      @kedge header_regexp host Host ^kedge-([a-z0-9]+).{$GITPOD_DOMAIN}
      handle @kedge {
        reverse_proxy kedge.{$KUBE_NAMESPACE}.{$KUBE_DOMAIN}:{{.Values.components.kedge.ports.http.servicePort}} {
          import upstream_headers
          import upstream_connection
        }
      }

      respond "Not found" 404
    }
{{- end }}

