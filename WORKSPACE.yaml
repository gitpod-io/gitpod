# this file makes this a leeway workspace
defaultTarget: components:all
defaultArgs:
  imageRepoBase: "eu.gcr.io/gitpod-dev-artifact/build"
  coreYarnLockBase: ../..
  npmPublishTrigger: "false"
  publishToNPM: true
  publishToJBMarketplace: true
  localAppVersion: unknown
  codeCommit: ade9f0c5cec78abbfa97396c6961a436f91ab00e
  codeVersion: 1.100.2
  codeQuality: stable
  codeWebExtensionCommit: e843a78dfd6705144b5631c5c149b82f0045f161
  xtermCommit: d547d4ff4590b66c3ea24342fc62e3afcf6b77bc
  noVerifyJBPlugin: false
  intellijDownloadUrl: "https://download.jetbrains.com/idea/ideaIU-2025.1.1.1.tar.gz"
  golandDownloadUrl: "https://download.jetbrains.com/go/goland-2025.1.1.tar.gz"
  pycharmDownloadUrl: "https://download.jetbrains.com/python/pycharm-2025.1.1.1.tar.gz"
  phpstormDownloadUrl: "https://download.jetbrains.com/webide/PhpStorm-2025.1.1.tar.gz"
  rubymineDownloadUrl: "https://download.jetbrains.com/ruby/RubyMine-2025.1.1.tar.gz"
  webstormDownloadUrl: "https://download.jetbrains.com/webstorm/WebStorm-2025.1.1.tar.gz"
  riderDownloadUrl: "https://download.jetbrains.com/rider/JetBrains.Rider-2024.1.4.tar.gz"
  clionDownloadUrl: "https://download.jetbrains.com/cpp/CLion-2025.1.1.tar.gz"
  rustroverDownloadUrl: "https://download.jetbrains.com/rustrover/RustRover-2025.1.2.tar.gz"
  jbBackendVersion: "latest"
  dockerVersion: "27.5.1"
  dockerComposeVersion: "2.34.0-gitpod.1"
  ipfsKuboVersion: "v0.18.0"
  ipfsClusterVersion: "v1.0.8"
  schedulerExtenderVersion: "c1925d8"
provenance:
  enabled: true
  slsa: true
sbom:
  enabled: true
  ignoreVulnerabilities:
    - vulnerability: GHSA-fx4w-v43j-vc45
      reason: |
        This vulnerability in TypeORM's findOne / findOneOrFail functions can improperly interpret a crafted JSON object
        and concatenate it into raw SQL, potentially allowing SQL injection attacks.

        In Gitpodâ€™s usage, TypeORM is not exposed to arbitrary user input. For example, DB migrations run preset queries;
        the server/bridge code does not hand raw JSON from external sources to findOne. Therefore, there is no path for
        injecting malicious JSON into a query, rendering the vulnerability non-exploitable.
    - vulnerability: GHSA-2jcg-qqmg-46q6
      reason: |
        This is a false positive. See https://github.com/browserify/resolve/issues/303
environmentManifest:
  - name: "go"
    command: ["sh", "-c", "go version | sed s/arm/amd/"]
  - name: "arch"
    command: ["sh", "-c", "echo amd64"]
defaultVariant:
  env:
    - GOARCH=amd64
    - DOCKER_DEFAULT_PLATFORM=linux/amd64
    - NODE_OPTIONS=--max_old_space_size=8192
    - LEEWAY_BUILD=true
  srcs:
    exclude:
      # Make sure we don't include node_modules/**/*.ts by accident
      - "**/node_modules/**"
  config:
    go:
      lintCommand: ["sh", "-c", "golangci-lint run --disable govet,errcheck,staticcheck --allow-parallel-runners --timeout 15m"]
