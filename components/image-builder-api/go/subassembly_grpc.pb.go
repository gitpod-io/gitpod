// Copyright (c) 2024 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: subassembly.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubassemblyServiceClient is the client API for SubassemblyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubassemblyServiceClient interface {
	// CreateSubassembly creates a subassembly from an OCI image
	CreateSubassembly(ctx context.Context, in *CreateSubassemblyRequest, opts ...grpc.CallOption) (*CreateSubassemblyResponse, error)
	// GetSubassembly returns the status and URL for a subassembly
	GetSubassembly(ctx context.Context, in *GetSubassemblyRequest, opts ...grpc.CallOption) (*GetSubassemblyResponse, error)
}

type subassemblyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubassemblyServiceClient(cc grpc.ClientConnInterface) SubassemblyServiceClient {
	return &subassemblyServiceClient{cc}
}

func (c *subassemblyServiceClient) CreateSubassembly(ctx context.Context, in *CreateSubassemblyRequest, opts ...grpc.CallOption) (*CreateSubassemblyResponse, error) {
	out := new(CreateSubassemblyResponse)
	err := c.cc.Invoke(ctx, "/builder.SubassemblyService/CreateSubassembly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subassemblyServiceClient) GetSubassembly(ctx context.Context, in *GetSubassemblyRequest, opts ...grpc.CallOption) (*GetSubassemblyResponse, error) {
	out := new(GetSubassemblyResponse)
	err := c.cc.Invoke(ctx, "/builder.SubassemblyService/GetSubassembly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubassemblyServiceServer is the server API for SubassemblyService service.
// All implementations must embed UnimplementedSubassemblyServiceServer
// for forward compatibility
type SubassemblyServiceServer interface {
	// CreateSubassembly creates a subassembly from an OCI image
	CreateSubassembly(context.Context, *CreateSubassemblyRequest) (*CreateSubassemblyResponse, error)
	// GetSubassembly returns the status and URL for a subassembly
	GetSubassembly(context.Context, *GetSubassemblyRequest) (*GetSubassemblyResponse, error)
	mustEmbedUnimplementedSubassemblyServiceServer()
}

// UnimplementedSubassemblyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubassemblyServiceServer struct {
}

func (UnimplementedSubassemblyServiceServer) CreateSubassembly(context.Context, *CreateSubassemblyRequest) (*CreateSubassemblyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubassembly not implemented")
}
func (UnimplementedSubassemblyServiceServer) GetSubassembly(context.Context, *GetSubassemblyRequest) (*GetSubassemblyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubassembly not implemented")
}
func (UnimplementedSubassemblyServiceServer) mustEmbedUnimplementedSubassemblyServiceServer() {}

// UnsafeSubassemblyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubassemblyServiceServer will
// result in compilation errors.
type UnsafeSubassemblyServiceServer interface {
	mustEmbedUnimplementedSubassemblyServiceServer()
}

func RegisterSubassemblyServiceServer(s grpc.ServiceRegistrar, srv SubassemblyServiceServer) {
	s.RegisterService(&SubassemblyService_ServiceDesc, srv)
}

func _SubassemblyService_CreateSubassembly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubassemblyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubassemblyServiceServer).CreateSubassembly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/builder.SubassemblyService/CreateSubassembly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubassemblyServiceServer).CreateSubassembly(ctx, req.(*CreateSubassemblyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubassemblyService_GetSubassembly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubassemblyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubassemblyServiceServer).GetSubassembly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/builder.SubassemblyService/GetSubassembly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubassemblyServiceServer).GetSubassembly(ctx, req.(*GetSubassemblyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubassemblyService_ServiceDesc is the grpc.ServiceDesc for SubassemblyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubassemblyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "builder.SubassemblyService",
	HandlerType: (*SubassemblyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubassembly",
			Handler:    _SubassemblyService_CreateSubassembly_Handler,
		},
		{
			MethodName: "GetSubassembly",
			Handler:    _SubassemblyService_GetSubassembly_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subassembly.proto",
}
