// Copyright (c) 2024 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: gitpod/v1/organization.proto
//
package io.gitpod.publicapi.v1

import com.connectrpc.Headers
import com.connectrpc.ResponseMessage

public interface OrganizationServiceClientInterface {
  /**
   *  CreateOrganization creates a new Organization.
   */
  public suspend fun createOrganization(request: OrganizationOuterClass.CreateOrganizationRequest,
      headers: Headers = emptyMap()):
      ResponseMessage<OrganizationOuterClass.CreateOrganizationResponse>

  /**
   *  GetOrganization retrieves a single Organization.
   */
  public suspend fun getOrganization(request: OrganizationOuterClass.GetOrganizationRequest,
      headers: Headers = emptyMap()):
      ResponseMessage<OrganizationOuterClass.GetOrganizationResponse>

  /**
   *  UpdateOrganization updates the properties of an Organization.
   */
  public suspend fun updateOrganization(request: OrganizationOuterClass.UpdateOrganizationRequest,
      headers: Headers = emptyMap()):
      ResponseMessage<OrganizationOuterClass.UpdateOrganizationResponse>

  /**
   *  ListOrganizations lists all organization the caller has access to.
   */
  public suspend fun listOrganizations(request: OrganizationOuterClass.ListOrganizationsRequest,
      headers: Headers = emptyMap()):
      ResponseMessage<OrganizationOuterClass.ListOrganizationsResponse>

  /**
   *  DeleteOrganization deletes the specified organization.
   */
  public suspend fun deleteOrganization(request: OrganizationOuterClass.DeleteOrganizationRequest,
      headers: Headers = emptyMap()):
      ResponseMessage<OrganizationOuterClass.DeleteOrganizationResponse>

  /**
   *  GetOrganizationInvitation retrieves the invitation for a Organization.
   */
  public suspend
      fun getOrganizationInvitation(request: OrganizationOuterClass.GetOrganizationInvitationRequest,
      headers: Headers = emptyMap()):
      ResponseMessage<OrganizationOuterClass.GetOrganizationInvitationResponse>

  /**
   *  JoinOrganization makes the caller a OrganizationMember of the Organization.
   */
  public suspend fun joinOrganization(request: OrganizationOuterClass.JoinOrganizationRequest,
      headers: Headers = emptyMap()):
      ResponseMessage<OrganizationOuterClass.JoinOrganizationResponse>

  /**
   *  ResetOrganizationInvitation resets the invitation_id for a Organization.
   */
  public suspend
      fun resetOrganizationInvitation(request: OrganizationOuterClass.ResetOrganizationInvitationRequest,
      headers: Headers = emptyMap()):
      ResponseMessage<OrganizationOuterClass.ResetOrganizationInvitationResponse>

  /**
   *  ListOrganizationMembers lists the members of a Organization.
   */
  public suspend
      fun listOrganizationMembers(request: OrganizationOuterClass.ListOrganizationMembersRequest,
      headers: Headers = emptyMap()):
      ResponseMessage<OrganizationOuterClass.ListOrganizationMembersResponse>

  /**
   *  UpdateOrganizationMember updates organization membership properties.
   */
  public suspend
      fun updateOrganizationMember(request: OrganizationOuterClass.UpdateOrganizationMemberRequest,
      headers: Headers = emptyMap()):
      ResponseMessage<OrganizationOuterClass.UpdateOrganizationMemberResponse>

  /**
   *  DeleteOrganizationMember removes a OrganizationMember from the
   *  Organization.
   */
  public suspend
      fun deleteOrganizationMember(request: OrganizationOuterClass.DeleteOrganizationMemberRequest,
      headers: Headers = emptyMap()):
      ResponseMessage<OrganizationOuterClass.DeleteOrganizationMemberResponse>

  /**
   *  GetOrganizationSettings retrieves the settings of a Organization.
   */
  public suspend
      fun getOrganizationSettings(request: OrganizationOuterClass.GetOrganizationSettingsRequest,
      headers: Headers = emptyMap()):
      ResponseMessage<OrganizationOuterClass.GetOrganizationSettingsResponse>

  /**
   *  UpdateOrganizationSettings updates the settings of a Organization.
   */
  public suspend
      fun updateOrganizationSettings(request: OrganizationOuterClass.UpdateOrganizationSettingsRequest,
      headers: Headers = emptyMap()):
      ResponseMessage<OrganizationOuterClass.UpdateOrganizationSettingsResponse>

  /**
   *  ListOrganizationWorkspaceClasses lists workspace classes of a
   *  Organization.
   */
  public suspend
      fun listOrganizationWorkspaceClasses(request: OrganizationOuterClass.ListOrganizationWorkspaceClassesRequest,
      headers: Headers = emptyMap()):
      ResponseMessage<OrganizationOuterClass.ListOrganizationWorkspaceClassesResponse>
}
