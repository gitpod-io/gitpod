// Copyright (c) 2024 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: gitpod/v1/authprovider.proto
//
package io.gitpod.publicapi.v1

import com.connectrpc.Headers
import com.connectrpc.ResponseMessage

public interface AuthProviderServiceClientInterface {
  /**
   *  CreateAuthProvider creates a new auth provider.
   */
  public suspend fun createAuthProvider(request: Authprovider.CreateAuthProviderRequest,
      headers: Headers = emptyMap()): ResponseMessage<Authprovider.CreateAuthProviderResponse>

  /**
   *  GetAuthProvider returns a single auth provider.
   */
  public suspend fun getAuthProvider(request: Authprovider.GetAuthProviderRequest, headers: Headers
      = emptyMap()): ResponseMessage<Authprovider.GetAuthProviderResponse>

  /**
   *  ListAuthProviders lists auth providers.
   */
  public suspend fun listAuthProviders(request: Authprovider.ListAuthProvidersRequest,
      headers: Headers = emptyMap()): ResponseMessage<Authprovider.ListAuthProvidersResponse>

  /**
   *  ListAuthProviderDescriptions lists publicly available descriptions of
   *  authproviders.
   */
  public suspend
      fun listAuthProviderDescriptions(request: Authprovider.ListAuthProviderDescriptionsRequest,
      headers: Headers = emptyMap()):
      ResponseMessage<Authprovider.ListAuthProviderDescriptionsResponse>

  /**
   *  UpdateAuthProvider updates an auth provider.
   */
  public suspend fun updateAuthProvider(request: Authprovider.UpdateAuthProviderRequest,
      headers: Headers = emptyMap()): ResponseMessage<Authprovider.UpdateAuthProviderResponse>

  /**
   *  DeleteAuthProvider deletes the specified auth provider.
   */
  public suspend fun deleteAuthProvider(request: Authprovider.DeleteAuthProviderRequest,
      headers: Headers = emptyMap()): ResponseMessage<Authprovider.DeleteAuthProviderResponse>
}
