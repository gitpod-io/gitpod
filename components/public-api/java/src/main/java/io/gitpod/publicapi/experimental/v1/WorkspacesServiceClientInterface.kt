// Copyright (c) 2024 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: gitpod/experimental/v1/workspaces.proto
//
package io.gitpod.publicapi.experimental.v1

import com.connectrpc.Headers
import com.connectrpc.ResponseMessage
import com.connectrpc.ServerOnlyStreamInterface

public interface WorkspacesServiceClientInterface {
  /**
   *  ListWorkspaces enumerates all workspaces belonging to the authenticated user.
   */
  public suspend fun listWorkspaces(request: Workspaces.ListWorkspacesRequest, headers: Headers =
      emptyMap()): ResponseMessage<Workspaces.ListWorkspacesResponse>

  /**
   *  GetWorkspace returns a single workspace.
   */
  public suspend fun getWorkspace(request: Workspaces.GetWorkspaceRequest, headers: Headers =
      emptyMap()): ResponseMessage<Workspaces.GetWorkspaceResponse>

  /**
   *  StreamWorkspaceStatus returns workspace status once it changed.
   */
  public suspend fun streamWorkspaceStatus(headers: Headers = emptyMap()):
      ServerOnlyStreamInterface<Workspaces.StreamWorkspaceStatusRequest, Workspaces.StreamWorkspaceStatusResponse>

  /**
   *  GetOwnerToken returns an owner token.
   */
  public suspend fun getOwnerToken(request: Workspaces.GetOwnerTokenRequest, headers: Headers =
      emptyMap()): ResponseMessage<Workspaces.GetOwnerTokenResponse>

  /**
   *  CreateAndStartWorkspace creates a new workspace and starts it.
   */
  public suspend fun createAndStartWorkspace(request: Workspaces.CreateAndStartWorkspaceRequest,
      headers: Headers = emptyMap()): ResponseMessage<Workspaces.CreateAndStartWorkspaceResponse>

  /**
   *  StartWorkspace starts an existing workspace.
   */
  public suspend fun startWorkspace(request: Workspaces.StartWorkspaceRequest, headers: Headers =
      emptyMap()): ResponseMessage<Workspaces.StartWorkspaceResponse>

  /**
   *  StopWorkspace stops a running workspace (instance).
   *  Errors:
   *    NOT_FOUND:           the workspace_id is unkown
   *    FAILED_PRECONDITION: if there's no running instance
   */
  public suspend fun stopWorkspace(request: Workspaces.StopWorkspaceRequest, headers: Headers =
      emptyMap()): ResponseMessage<Workspaces.StopWorkspaceResponse>

  /**
   *  DeleteWorkspace deletes a workspace.
   *  When the workspace is running, it will be stopped as well.
   *  Deleted workspaces cannot be started again.
   */
  public suspend fun deleteWorkspace(request: Workspaces.DeleteWorkspaceRequest, headers: Headers =
      emptyMap()): ResponseMessage<Workspaces.DeleteWorkspaceResponse>

  public suspend fun updatePort(request: Workspaces.UpdatePortRequest, headers: Headers =
      emptyMap()): ResponseMessage<Workspaces.UpdatePortResponse>

  /**
   *  ListWorkspaceClasses enumerates all available workspace classes.
   */
  public suspend fun listWorkspaceClasses(request: Workspaces.ListWorkspaceClassesRequest,
      headers: Headers = emptyMap()): ResponseMessage<Workspaces.ListWorkspaceClassesResponse>

  /**
   *  GetDefaultWorkspaceImage returns the default workspace image from different sources.
   */
  public suspend fun getDefaultWorkspaceImage(request: Workspaces.GetDefaultWorkspaceImageRequest,
      headers: Headers = emptyMap()): ResponseMessage<Workspaces.GetDefaultWorkspaceImageResponse>
}
