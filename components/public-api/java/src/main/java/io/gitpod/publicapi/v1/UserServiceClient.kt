// Copyright (c) 2024 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: gitpod/v1/user.proto
//
package io.gitpod.publicapi.v1

import com.connectrpc.Headers
import com.connectrpc.MethodSpec
import com.connectrpc.ProtocolClientInterface
import com.connectrpc.ResponseMessage
import com.connectrpc.StreamType

public class UserServiceClient(
  private val client: ProtocolClientInterface,
) : UserServiceClientInterface {
  /**
   *  GetAuthenticatedUser allows to retrieve the current user.
   */
  override suspend fun getAuthenticatedUser(request: UserOuterClass.GetAuthenticatedUserRequest,
      headers: Headers): ResponseMessage<UserOuterClass.GetAuthenticatedUserResponse> =
      client.unary(
    request,
    headers,
    MethodSpec(
    "gitpod.v1.UserService/GetAuthenticatedUser",
      io.gitpod.publicapi.v1.UserOuterClass.GetAuthenticatedUserRequest::class,
      io.gitpod.publicapi.v1.UserOuterClass.GetAuthenticatedUserResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  UpdateUser updates the properties of a user.
   */
  override suspend fun updateUser(request: UserOuterClass.UpdateUserRequest, headers: Headers):
      ResponseMessage<UserOuterClass.UpdateUserResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "gitpod.v1.UserService/UpdateUser",
      io.gitpod.publicapi.v1.UserOuterClass.UpdateUserRequest::class,
      io.gitpod.publicapi.v1.UserOuterClass.UpdateUserResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  SetWorkspaceAutoStartOptions updates the auto start options for the Gitpod Dashboard.
   *  +internal - only used by the Gitpod Dashboard.
   */
  override suspend
      fun setWorkspaceAutoStartOptions(request: UserOuterClass.SetWorkspaceAutoStartOptionsRequest,
      headers: Headers): ResponseMessage<UserOuterClass.SetWorkspaceAutoStartOptionsResponse> =
      client.unary(
    request,
    headers,
    MethodSpec(
    "gitpod.v1.UserService/SetWorkspaceAutoStartOptions",
      io.gitpod.publicapi.v1.UserOuterClass.SetWorkspaceAutoStartOptionsRequest::class,
      io.gitpod.publicapi.v1.UserOuterClass.SetWorkspaceAutoStartOptionsResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  DeleteUser deletes the specified user.
   */
  override suspend fun deleteUser(request: UserOuterClass.DeleteUserRequest, headers: Headers):
      ResponseMessage<UserOuterClass.DeleteUserResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "gitpod.v1.UserService/DeleteUser",
      io.gitpod.publicapi.v1.UserOuterClass.DeleteUserRequest::class,
      io.gitpod.publicapi.v1.UserOuterClass.DeleteUserResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  VerifyUser markes the specified user as verified.
   *  +admin – only to be used by installation admins
   */
  override suspend fun verifyUser(request: UserOuterClass.VerifyUserRequest, headers: Headers):
      ResponseMessage<UserOuterClass.VerifyUserResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "gitpod.v1.UserService/VerifyUser",
      io.gitpod.publicapi.v1.UserOuterClass.VerifyUserRequest::class,
      io.gitpod.publicapi.v1.UserOuterClass.VerifyUserResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  BlockUser markes the specified user as blocked.
   *  +admin – only to be used by installation admins
   */
  override suspend fun blockUser(request: UserOuterClass.BlockUserRequest, headers: Headers):
      ResponseMessage<UserOuterClass.BlockUserResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "gitpod.v1.UserService/BlockUser",
      io.gitpod.publicapi.v1.UserOuterClass.BlockUserRequest::class,
      io.gitpod.publicapi.v1.UserOuterClass.BlockUserResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  ListUsers markes the specified user as blocked.
   *  +admin – only to be used by installation admins
   */
  override suspend fun listUsers(request: UserOuterClass.ListUsersRequest, headers: Headers):
      ResponseMessage<UserOuterClass.ListUsersResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "gitpod.v1.UserService/ListUsers",
      io.gitpod.publicapi.v1.UserOuterClass.ListUsersRequest::class,
      io.gitpod.publicapi.v1.UserOuterClass.ListUsersResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  GetUser allows to retrieve the specified user.
   *  +admin – only to be used by installation admins
   */
  override suspend fun getUser(request: UserOuterClass.GetUserRequest, headers: Headers):
      ResponseMessage<UserOuterClass.GetUserResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "gitpod.v1.UserService/GetUser",
      io.gitpod.publicapi.v1.UserOuterClass.GetUserRequest::class,
      io.gitpod.publicapi.v1.UserOuterClass.GetUserResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  SetRolesOrPermissions allows to set roles or permissions for the specified user.
   *  +admin – only to be used by installation admins
   */
  override suspend fun setRolesOrPermissions(request: UserOuterClass.SetRolesOrPermissionsRequest,
      headers: Headers): ResponseMessage<UserOuterClass.SetRolesOrPermissionsResponse> =
      client.unary(
    request,
    headers,
    MethodSpec(
    "gitpod.v1.UserService/SetRolesOrPermissions",
      io.gitpod.publicapi.v1.UserOuterClass.SetRolesOrPermissionsRequest::class,
      io.gitpod.publicapi.v1.UserOuterClass.SetRolesOrPermissionsResponse::class,
      StreamType.UNARY,
    ),
  )

}
