/**
 * Copyright (c) 2023 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file gitpod/experimental/v2/organization.proto (package gitpod.experimental.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { PaginationRequest, PaginationResponse } from "./pagination_pb.js";

/**
 * @generated from enum gitpod.experimental.v2.OrganizationRole
 */
export enum OrganizationRole {
  /**
   * @generated from enum value: ORGANIZATION_ROLE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ORGANIZATION_ROLE_OWNER = 1;
   */
  OWNER = 1,

  /**
   * @generated from enum value: ORGANIZATION_ROLE_MEMBER = 2;
   */
  MEMBER = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(OrganizationRole)
proto3.util.setEnumType(OrganizationRole, "gitpod.experimental.v2.OrganizationRole", [
  { no: 0, name: "ORGANIZATION_ROLE_UNSPECIFIED" },
  { no: 1, name: "ORGANIZATION_ROLE_OWNER" },
  { no: 2, name: "ORGANIZATION_ROLE_MEMBER" },
]);

/**
 * @generated from message gitpod.experimental.v2.Organization
 */
export class Organization extends Message<Organization> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.Timestamp creation_time = 3;
   */
  creationTime?: Timestamp;

  constructor(data?: PartialMessage<Organization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.Organization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "creation_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Organization {
    return new Organization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJsonString(jsonString, options);
  }

  static equals(a: Organization | PlainMessage<Organization> | undefined, b: Organization | PlainMessage<Organization> | undefined): boolean {
    return proto3.util.equals(Organization, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.OrganizationMember
 */
export class OrganizationMember extends Message<OrganizationMember> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: gitpod.experimental.v2.OrganizationRole role = 2;
   */
  role = OrganizationRole.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp member_since = 3;
   */
  memberSince?: Timestamp;

  /**
   * @generated from field: optional string avatar_url = 4;
   */
  avatarUrl?: string;

  /**
   * @generated from field: optional string full_name = 5;
   */
  fullName?: string;

  /**
   * @generated from field: optional string email = 6;
   */
  email?: string;

  /**
   * @generated from field: bool owned_by_organization = 7;
   */
  ownedByOrganization = false;

  constructor(data?: PartialMessage<OrganizationMember>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.OrganizationMember";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "enum", T: proto3.getEnumType(OrganizationRole) },
    { no: 3, name: "member_since", kind: "message", T: Timestamp },
    { no: 4, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "full_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "owned_by_organization", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationMember {
    return new OrganizationMember().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationMember {
    return new OrganizationMember().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationMember {
    return new OrganizationMember().fromJsonString(jsonString, options);
  }

  static equals(a: OrganizationMember | PlainMessage<OrganizationMember> | undefined, b: OrganizationMember | PlainMessage<OrganizationMember> | undefined): boolean {
    return proto3.util.equals(OrganizationMember, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.OrganizationSettings
 */
export class OrganizationSettings extends Message<OrganizationSettings> {
  /**
   * @generated from field: bool workspace_sharing_disabled = 1;
   */
  workspaceSharingDisabled = false;

  /**
   * @generated from field: optional string default_workspace_image = 2;
   */
  defaultWorkspaceImage?: string;

  constructor(data?: PartialMessage<OrganizationSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.OrganizationSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_sharing_disabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "default_workspace_image", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationSettings {
    return new OrganizationSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationSettings {
    return new OrganizationSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationSettings {
    return new OrganizationSettings().fromJsonString(jsonString, options);
  }

  static equals(a: OrganizationSettings | PlainMessage<OrganizationSettings> | undefined, b: OrganizationSettings | PlainMessage<OrganizationSettings> | undefined): boolean {
    return proto3.util.equals(OrganizationSettings, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.UpdateOrganizationRequest
 */
export class UpdateOrganizationRequest extends Message<UpdateOrganizationRequest> {
  /**
   * organization_id is the ID of the organization to update the settings for.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  /**
   * name is the new name of the organization
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<UpdateOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.UpdateOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationRequest {
    return new UpdateOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationRequest {
    return new UpdateOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationRequest {
    return new UpdateOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationRequest | PlainMessage<UpdateOrganizationRequest> | undefined, b: UpdateOrganizationRequest | PlainMessage<UpdateOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.UpdateOrganizationResponse
 */
export class UpdateOrganizationResponse extends Message<UpdateOrganizationResponse> {
  constructor(data?: PartialMessage<UpdateOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.UpdateOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationResponse {
    return new UpdateOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationResponse {
    return new UpdateOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationResponse {
    return new UpdateOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationResponse | PlainMessage<UpdateOrganizationResponse> | undefined, b: UpdateOrganizationResponse | PlainMessage<UpdateOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.UpdateOrganizationSettingsRequest
 */
export class UpdateOrganizationSettingsRequest extends Message<UpdateOrganizationSettingsRequest> {
  /**
   * organization_id is the ID of the organization to update the settings for.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  /**
   * settings are the settings to update
   *
   * @generated from field: gitpod.experimental.v2.OrganizationSettings settings = 2;
   */
  settings?: OrganizationSettings;

  constructor(data?: PartialMessage<UpdateOrganizationSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.UpdateOrganizationSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "settings", kind: "message", T: OrganizationSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationSettingsRequest {
    return new UpdateOrganizationSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationSettingsRequest {
    return new UpdateOrganizationSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationSettingsRequest {
    return new UpdateOrganizationSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationSettingsRequest | PlainMessage<UpdateOrganizationSettingsRequest> | undefined, b: UpdateOrganizationSettingsRequest | PlainMessage<UpdateOrganizationSettingsRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationSettingsRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.UpdateOrganizationSettingsResponse
 */
export class UpdateOrganizationSettingsResponse extends Message<UpdateOrganizationSettingsResponse> {
  constructor(data?: PartialMessage<UpdateOrganizationSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.UpdateOrganizationSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationSettingsResponse {
    return new UpdateOrganizationSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationSettingsResponse {
    return new UpdateOrganizationSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationSettingsResponse {
    return new UpdateOrganizationSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationSettingsResponse | PlainMessage<UpdateOrganizationSettingsResponse> | undefined, b: UpdateOrganizationSettingsResponse | PlainMessage<UpdateOrganizationSettingsResponse> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationSettingsResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.GetOrganizationSettingsRequest
 */
export class GetOrganizationSettingsRequest extends Message<GetOrganizationSettingsRequest> {
  /**
   * organization_id is the ID of the organization to retrieve the settings for.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  constructor(data?: PartialMessage<GetOrganizationSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.GetOrganizationSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationSettingsRequest {
    return new GetOrganizationSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationSettingsRequest {
    return new GetOrganizationSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationSettingsRequest {
    return new GetOrganizationSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationSettingsRequest | PlainMessage<GetOrganizationSettingsRequest> | undefined, b: GetOrganizationSettingsRequest | PlainMessage<GetOrganizationSettingsRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationSettingsRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.GetOrganizationSettingsResponse
 */
export class GetOrganizationSettingsResponse extends Message<GetOrganizationSettingsResponse> {
  /**
   * settings are the settings of the organization
   *
   * @generated from field: gitpod.experimental.v2.OrganizationSettings settings = 1;
   */
  settings?: OrganizationSettings;

  constructor(data?: PartialMessage<GetOrganizationSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.GetOrganizationSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: OrganizationSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationSettingsResponse {
    return new GetOrganizationSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationSettingsResponse {
    return new GetOrganizationSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationSettingsResponse {
    return new GetOrganizationSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationSettingsResponse | PlainMessage<GetOrganizationSettingsResponse> | undefined, b: GetOrganizationSettingsResponse | PlainMessage<GetOrganizationSettingsResponse> | undefined): boolean {
    return proto3.util.equals(GetOrganizationSettingsResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.CreateOrganizationRequest
 */
export class CreateOrganizationRequest extends Message<CreateOrganizationRequest> {
  /**
   * name is the organization name
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * the id of the owning user
   *
   * @generated from field: optional string owner_id = 2;
   */
  ownerId?: string;

  constructor(data?: PartialMessage<CreateOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.CreateOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationRequest | PlainMessage<CreateOrganizationRequest> | undefined, b: CreateOrganizationRequest | PlainMessage<CreateOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.CreateOrganizationResponse
 */
export class CreateOrganizationResponse extends Message<CreateOrganizationResponse> {
  /**
   * @generated from field: gitpod.experimental.v2.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<CreateOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.CreateOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationResponse | PlainMessage<CreateOrganizationResponse> | undefined, b: CreateOrganizationResponse | PlainMessage<CreateOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.GetOrganizationRequest
 */
export class GetOrganizationRequest extends Message<GetOrganizationRequest> {
  /**
   * organization_id is the unique identifier of the Organization to retreive.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  constructor(data?: PartialMessage<GetOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.GetOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationRequest {
    return new GetOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationRequest {
    return new GetOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationRequest {
    return new GetOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationRequest | PlainMessage<GetOrganizationRequest> | undefined, b: GetOrganizationRequest | PlainMessage<GetOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.GetOrganizationResponse
 */
export class GetOrganizationResponse extends Message<GetOrganizationResponse> {
  /**
   * @generated from field: gitpod.experimental.v2.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<GetOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.GetOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationResponse {
    return new GetOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationResponse {
    return new GetOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationResponse {
    return new GetOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationResponse | PlainMessage<GetOrganizationResponse> | undefined, b: GetOrganizationResponse | PlainMessage<GetOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(GetOrganizationResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.ListOrganizationsRequest
 */
export class ListOrganizationsRequest extends Message<ListOrganizationsRequest> {
  /**
   * @generated from field: gitpod.experimental.v2.PaginationRequest pagination = 1;
   */
  pagination?: PaginationRequest;

  constructor(data?: PartialMessage<ListOrganizationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.ListOrganizationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationsRequest | PlainMessage<ListOrganizationsRequest> | undefined, b: ListOrganizationsRequest | PlainMessage<ListOrganizationsRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationsRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.ListOrganizationsResponse
 */
export class ListOrganizationsResponse extends Message<ListOrganizationsResponse> {
  /**
   * @generated from field: repeated gitpod.experimental.v2.Organization organizations = 1;
   */
  organizations: Organization[] = [];

  /**
   * @generated from field: gitpod.experimental.v2.PaginationResponse pagination = 2;
   */
  pagination?: PaginationResponse;

  constructor(data?: PartialMessage<ListOrganizationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.ListOrganizationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organizations", kind: "message", T: Organization, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationsResponse {
    return new ListOrganizationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationsResponse {
    return new ListOrganizationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationsResponse {
    return new ListOrganizationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationsResponse | PlainMessage<ListOrganizationsResponse> | undefined, b: ListOrganizationsResponse | PlainMessage<ListOrganizationsResponse> | undefined): boolean {
    return proto3.util.equals(ListOrganizationsResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.DeleteOrganizationRequest
 */
export class DeleteOrganizationRequest extends Message<DeleteOrganizationRequest> {
  /**
   * organization_id is the ID of the organization to delete
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  constructor(data?: PartialMessage<DeleteOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.DeleteOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationRequest | PlainMessage<DeleteOrganizationRequest> | undefined, b: DeleteOrganizationRequest | PlainMessage<DeleteOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.DeleteOrganizationResponse
 */
export class DeleteOrganizationResponse extends Message<DeleteOrganizationResponse> {
  constructor(data?: PartialMessage<DeleteOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.DeleteOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationResponse {
    return new DeleteOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationResponse {
    return new DeleteOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationResponse {
    return new DeleteOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationResponse | PlainMessage<DeleteOrganizationResponse> | undefined, b: DeleteOrganizationResponse | PlainMessage<DeleteOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.GetOrganizationInvitationRequest
 */
export class GetOrganizationInvitationRequest extends Message<GetOrganizationInvitationRequest> {
  /**
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  constructor(data?: PartialMessage<GetOrganizationInvitationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.GetOrganizationInvitationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationInvitationRequest {
    return new GetOrganizationInvitationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationInvitationRequest {
    return new GetOrganizationInvitationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationInvitationRequest {
    return new GetOrganizationInvitationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationInvitationRequest | PlainMessage<GetOrganizationInvitationRequest> | undefined, b: GetOrganizationInvitationRequest | PlainMessage<GetOrganizationInvitationRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationInvitationRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.GetOrganizationInvitationResponse
 */
export class GetOrganizationInvitationResponse extends Message<GetOrganizationInvitationResponse> {
  /**
   * invitation_id is the invitation ID for an Organization
   *
   * @generated from field: string invitation_id = 1;
   */
  invitationId = "";

  constructor(data?: PartialMessage<GetOrganizationInvitationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.GetOrganizationInvitationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invitation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationInvitationResponse {
    return new GetOrganizationInvitationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationInvitationResponse {
    return new GetOrganizationInvitationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationInvitationResponse {
    return new GetOrganizationInvitationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationInvitationResponse | PlainMessage<GetOrganizationInvitationResponse> | undefined, b: GetOrganizationInvitationResponse | PlainMessage<GetOrganizationInvitationResponse> | undefined): boolean {
    return proto3.util.equals(GetOrganizationInvitationResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.JoinOrganizationRequest
 */
export class JoinOrganizationRequest extends Message<JoinOrganizationRequest> {
  /**
   * invitation_id is the invitation ID for an Organization
   *
   * @generated from field: string invitation_id = 1;
   */
  invitationId = "";

  constructor(data?: PartialMessage<JoinOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.JoinOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invitation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinOrganizationRequest {
    return new JoinOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinOrganizationRequest {
    return new JoinOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinOrganizationRequest {
    return new JoinOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JoinOrganizationRequest | PlainMessage<JoinOrganizationRequest> | undefined, b: JoinOrganizationRequest | PlainMessage<JoinOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(JoinOrganizationRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.JoinOrganizationResponse
 */
export class JoinOrganizationResponse extends Message<JoinOrganizationResponse> {
  /**
   * organization_id is the id of the organization the user has just joined
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  constructor(data?: PartialMessage<JoinOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.JoinOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinOrganizationResponse {
    return new JoinOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinOrganizationResponse {
    return new JoinOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinOrganizationResponse {
    return new JoinOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JoinOrganizationResponse | PlainMessage<JoinOrganizationResponse> | undefined, b: JoinOrganizationResponse | PlainMessage<JoinOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(JoinOrganizationResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.ResetOrganizationInvitationRequest
 */
export class ResetOrganizationInvitationRequest extends Message<ResetOrganizationInvitationRequest> {
  /**
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  constructor(data?: PartialMessage<ResetOrganizationInvitationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.ResetOrganizationInvitationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetOrganizationInvitationRequest {
    return new ResetOrganizationInvitationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetOrganizationInvitationRequest {
    return new ResetOrganizationInvitationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetOrganizationInvitationRequest {
    return new ResetOrganizationInvitationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResetOrganizationInvitationRequest | PlainMessage<ResetOrganizationInvitationRequest> | undefined, b: ResetOrganizationInvitationRequest | PlainMessage<ResetOrganizationInvitationRequest> | undefined): boolean {
    return proto3.util.equals(ResetOrganizationInvitationRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.ResetOrganizationInvitationResponse
 */
export class ResetOrganizationInvitationResponse extends Message<ResetOrganizationInvitationResponse> {
  /**
   * invitation_id is the new invitation id for the organization.
   *
   * @generated from field: string invitation_id = 1;
   */
  invitationId = "";

  constructor(data?: PartialMessage<ResetOrganizationInvitationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.ResetOrganizationInvitationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invitation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetOrganizationInvitationResponse {
    return new ResetOrganizationInvitationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetOrganizationInvitationResponse {
    return new ResetOrganizationInvitationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetOrganizationInvitationResponse {
    return new ResetOrganizationInvitationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResetOrganizationInvitationResponse | PlainMessage<ResetOrganizationInvitationResponse> | undefined, b: ResetOrganizationInvitationResponse | PlainMessage<ResetOrganizationInvitationResponse> | undefined): boolean {
    return proto3.util.equals(ResetOrganizationInvitationResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.ListOrganizationMembersRequest
 */
export class ListOrganizationMembersRequest extends Message<ListOrganizationMembersRequest> {
  /**
   * organization_id is the ID of the organization that contains the members to list
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  /**
   * @generated from field: gitpod.experimental.v2.PaginationRequest pagination = 2;
   */
  pagination?: PaginationRequest;

  constructor(data?: PartialMessage<ListOrganizationMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.ListOrganizationMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationMembersRequest {
    return new ListOrganizationMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationMembersRequest {
    return new ListOrganizationMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationMembersRequest {
    return new ListOrganizationMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationMembersRequest | PlainMessage<ListOrganizationMembersRequest> | undefined, b: ListOrganizationMembersRequest | PlainMessage<ListOrganizationMembersRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationMembersRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.ListOrganizationMembersResponse
 */
export class ListOrganizationMembersResponse extends Message<ListOrganizationMembersResponse> {
  /**
   * members are the organization members of this Organization
   *
   * @generated from field: repeated gitpod.experimental.v2.OrganizationMember members = 1;
   */
  members: OrganizationMember[] = [];

  /**
   * @generated from field: gitpod.experimental.v2.PaginationResponse pagination = 2;
   */
  pagination?: PaginationResponse;

  constructor(data?: PartialMessage<ListOrganizationMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.ListOrganizationMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: OrganizationMember, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationMembersResponse {
    return new ListOrganizationMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationMembersResponse {
    return new ListOrganizationMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationMembersResponse {
    return new ListOrganizationMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationMembersResponse | PlainMessage<ListOrganizationMembersResponse> | undefined, b: ListOrganizationMembersResponse | PlainMessage<ListOrganizationMembersResponse> | undefined): boolean {
    return proto3.util.equals(ListOrganizationMembersResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.UpdateOrganizationMemberRequest
 */
export class UpdateOrganizationMemberRequest extends Message<UpdateOrganizationMemberRequest> {
  /**
   * organization_id is the ID of the organization in which the role is to be updated
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  /**
   * user_id is the user for which the membership shall be updated.
   *
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * role is the new role for the user in the organization
   *
   * @generated from field: gitpod.experimental.v2.OrganizationRole role = 3;
   */
  role = OrganizationRole.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateOrganizationMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.UpdateOrganizationMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "enum", T: proto3.getEnumType(OrganizationRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationMemberRequest {
    return new UpdateOrganizationMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationMemberRequest {
    return new UpdateOrganizationMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationMemberRequest {
    return new UpdateOrganizationMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationMemberRequest | PlainMessage<UpdateOrganizationMemberRequest> | undefined, b: UpdateOrganizationMemberRequest | PlainMessage<UpdateOrganizationMemberRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationMemberRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.UpdateOrganizationMemberResponse
 */
export class UpdateOrganizationMemberResponse extends Message<UpdateOrganizationMemberResponse> {
  constructor(data?: PartialMessage<UpdateOrganizationMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.UpdateOrganizationMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationMemberResponse {
    return new UpdateOrganizationMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationMemberResponse {
    return new UpdateOrganizationMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationMemberResponse {
    return new UpdateOrganizationMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationMemberResponse | PlainMessage<UpdateOrganizationMemberResponse> | undefined, b: UpdateOrganizationMemberResponse | PlainMessage<UpdateOrganizationMemberResponse> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationMemberResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.DeleteOrganizationMemberRequest
 */
export class DeleteOrganizationMemberRequest extends Message<DeleteOrganizationMemberRequest> {
  /**
   * organization_id is the ID of the organization in which a member should be deleted.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  /**
   * user_id is the ID of the user that should be deleted from the organization.
   *
   * @generated from field: string user_id = 2;
   */
  userId = "";

  constructor(data?: PartialMessage<DeleteOrganizationMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.DeleteOrganizationMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationMemberRequest {
    return new DeleteOrganizationMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationMemberRequest {
    return new DeleteOrganizationMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationMemberRequest {
    return new DeleteOrganizationMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationMemberRequest | PlainMessage<DeleteOrganizationMemberRequest> | undefined, b: DeleteOrganizationMemberRequest | PlainMessage<DeleteOrganizationMemberRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationMemberRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v2.DeleteOrganizationMemberResponse
 */
export class DeleteOrganizationMemberResponse extends Message<DeleteOrganizationMemberResponse> {
  constructor(data?: PartialMessage<DeleteOrganizationMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.experimental.v2.DeleteOrganizationMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationMemberResponse {
    return new DeleteOrganizationMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationMemberResponse {
    return new DeleteOrganizationMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationMemberResponse {
    return new DeleteOrganizationMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationMemberResponse | PlainMessage<DeleteOrganizationMemberResponse> | undefined, b: DeleteOrganizationMemberResponse | PlainMessage<DeleteOrganizationMemberResponse> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationMemberResponse, a, b);
  }
}
