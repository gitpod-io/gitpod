/**
 * Copyright (c) 2023 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file gitpod/experimental/v1/stats.proto (package gitpod.experimental.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message gitpod.experimental.v1.GetUserStatsRequest
 */
export class GetUserStatsRequest extends Message<GetUserStatsRequest> {
  constructor(data?: PartialMessage<GetUserStatsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.GetUserStatsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserStatsRequest {
    return new GetUserStatsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserStatsRequest {
    return new GetUserStatsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserStatsRequest {
    return new GetUserStatsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserStatsRequest | PlainMessage<GetUserStatsRequest> | undefined, b: GetUserStatsRequest | PlainMessage<GetUserStatsRequest> | undefined): boolean {
    return proto3.util.equals(GetUserStatsRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.GetUserStatsResponse
 */
export class GetUserStatsResponse extends Message<GetUserStatsResponse> {
  /**
   * All users that have an active Gitpod (not deleted) account at the time of asking.
   *
   * @generated from field: uint32 registered_users = 1;
   */
  registeredUsers = 0;

  constructor(data?: PartialMessage<GetUserStatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.GetUserStatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "registered_users", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserStatsResponse {
    return new GetUserStatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserStatsResponse {
    return new GetUserStatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserStatsResponse {
    return new GetUserStatsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserStatsResponse | PlainMessage<GetUserStatsResponse> | undefined, b: GetUserStatsResponse | PlainMessage<GetUserStatsResponse> | undefined): boolean {
    return proto3.util.equals(GetUserStatsResponse, a, b);
  }
}

