/**
 * Copyright (c) 2022 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file gitpod/experimental/v1/workspace.proto (package gitpod.experimental.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {
    BinaryReadOptions,
    FieldList,
    JsonReadOptions,
    JsonValue,
    PartialMessage,
    PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { WorkspaceInstance } from "./workspaces_pb.js";

/**
 * @generated from enum gitpod.experimental.v1.PortVisibility
 */
export enum PortVisibility {
    /**
     * @generated from enum value: PORT_VISIBILITY_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,

    /**
     * @generated from enum value: PORT_VISIBILITY_PUBLIC = 1;
     */
    PUBLIC = 1,

    /**
     * @generated from enum value: PORT_VISIBILITY_PRIVATE = 2;
     */
    PRIVATE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PortVisibility)
proto3.util.setEnumType(PortVisibility, "gitpod.experimental.v1.PortVisibility", [
    { no: 0, name: "PORT_VISIBILITY_UNSPECIFIED" },
    { no: 1, name: "PORT_VISIBILITY_PUBLIC" },
    { no: 2, name: "PORT_VISIBILITY_PRIVATE" },
]);

/**
 * @generated from message gitpod.experimental.v1.OpenPortRequest
 */
export class OpenPortRequest extends Message<OpenPortRequest> {
    /**
     * @generated from field: string workspace_id = 1;
     */
    workspaceId = "";

    constructor(data?: PartialMessage<OpenPortRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "gitpod.experimental.v1.OpenPortRequest";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OpenPortRequest {
        return new OpenPortRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OpenPortRequest {
        return new OpenPortRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OpenPortRequest {
        return new OpenPortRequest().fromJsonString(jsonString, options);
    }

    static equals(
        a: OpenPortRequest | PlainMessage<OpenPortRequest> | undefined,
        b: OpenPortRequest | PlainMessage<OpenPortRequest> | undefined,
    ): boolean {
        return proto3.util.equals(OpenPortRequest, a, b);
    }
}

/**
 * @generated from message gitpod.experimental.v1.OpenPortResponse
 */
export class OpenPortResponse extends Message<OpenPortResponse> {
    /**
     * @generated from field: gitpod.experimental.v1.WorkspaceInstancePort port = 1;
     */
    port?: WorkspaceInstancePort;

    constructor(data?: PartialMessage<OpenPortResponse>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "gitpod.experimental.v1.OpenPortResponse";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: "port", kind: "message", T: WorkspaceInstancePort },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OpenPortResponse {
        return new OpenPortResponse().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OpenPortResponse {
        return new OpenPortResponse().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OpenPortResponse {
        return new OpenPortResponse().fromJsonString(jsonString, options);
    }

    static equals(
        a: OpenPortResponse | PlainMessage<OpenPortResponse> | undefined,
        b: OpenPortResponse | PlainMessage<OpenPortResponse> | undefined,
    ): boolean {
        return proto3.util.equals(OpenPortResponse, a, b);
    }
}

/**
 * @generated from message gitpod.experimental.v1.WorkspaceInstancePort
 */
export class WorkspaceInstancePort extends Message<WorkspaceInstancePort> {
    /**
     * @generated from field: int32 port = 1;
     */
    port = 0;

    /**
     * @generated from field: string url = 2;
     */
    url = "";

    /**
     * @generated from field: gitpod.experimental.v1.PortVisibility visibility = 3;
     */
    visibility = PortVisibility.UNSPECIFIED;

    constructor(data?: PartialMessage<WorkspaceInstancePort>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "gitpod.experimental.v1.WorkspaceInstancePort";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "visibility", kind: "enum", T: proto3.getEnumType(PortVisibility) },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceInstancePort {
        return new WorkspaceInstancePort().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceInstancePort {
        return new WorkspaceInstancePort().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceInstancePort {
        return new WorkspaceInstancePort().fromJsonString(jsonString, options);
    }

    static equals(
        a: WorkspaceInstancePort | PlainMessage<WorkspaceInstancePort> | undefined,
        b: WorkspaceInstancePort | PlainMessage<WorkspaceInstancePort> | undefined,
    ): boolean {
        return proto3.util.equals(WorkspaceInstancePort, a, b);
    }
}

/**
 * @generated from message gitpod.experimental.v1.GetOpenPortsRequest
 */
export class GetOpenPortsRequest extends Message<GetOpenPortsRequest> {
    /**
     * @generated from field: string workspace_id = 1;
     */
    workspaceId = "";

    constructor(data?: PartialMessage<GetOpenPortsRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "gitpod.experimental.v1.GetOpenPortsRequest";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOpenPortsRequest {
        return new GetOpenPortsRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOpenPortsRequest {
        return new GetOpenPortsRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOpenPortsRequest {
        return new GetOpenPortsRequest().fromJsonString(jsonString, options);
    }

    static equals(
        a: GetOpenPortsRequest | PlainMessage<GetOpenPortsRequest> | undefined,
        b: GetOpenPortsRequest | PlainMessage<GetOpenPortsRequest> | undefined,
    ): boolean {
        return proto3.util.equals(GetOpenPortsRequest, a, b);
    }
}

/**
 * @generated from message gitpod.experimental.v1.GetOpenPortsResponse
 */
export class GetOpenPortsResponse extends Message<GetOpenPortsResponse> {
    /**
     * @generated from field: repeated gitpod.experimental.v1.WorkspaceInstancePort ports = 1;
     */
    ports: WorkspaceInstancePort[] = [];

    constructor(data?: PartialMessage<GetOpenPortsResponse>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "gitpod.experimental.v1.GetOpenPortsResponse";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: "ports", kind: "message", T: WorkspaceInstancePort, repeated: true },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOpenPortsResponse {
        return new GetOpenPortsResponse().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOpenPortsResponse {
        return new GetOpenPortsResponse().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOpenPortsResponse {
        return new GetOpenPortsResponse().fromJsonString(jsonString, options);
    }

    static equals(
        a: GetOpenPortsResponse | PlainMessage<GetOpenPortsResponse> | undefined,
        b: GetOpenPortsResponse | PlainMessage<GetOpenPortsResponse> | undefined,
    ): boolean {
        return proto3.util.equals(GetOpenPortsResponse, a, b);
    }
}

/**
 * @generated from message gitpod.experimental.v1.InstanceUpdatesRequest
 */
export class InstanceUpdatesRequest extends Message<InstanceUpdatesRequest> {
    /**
     * @generated from field: string instance_id = 1;
     */
    instanceId = "";

    constructor(data?: PartialMessage<InstanceUpdatesRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "gitpod.experimental.v1.InstanceUpdatesRequest";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceUpdatesRequest {
        return new InstanceUpdatesRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceUpdatesRequest {
        return new InstanceUpdatesRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceUpdatesRequest {
        return new InstanceUpdatesRequest().fromJsonString(jsonString, options);
    }

    static equals(
        a: InstanceUpdatesRequest | PlainMessage<InstanceUpdatesRequest> | undefined,
        b: InstanceUpdatesRequest | PlainMessage<InstanceUpdatesRequest> | undefined,
    ): boolean {
        return proto3.util.equals(InstanceUpdatesRequest, a, b);
    }
}

/**
 * @generated from message gitpod.experimental.v1.InstanceUpdatesResponse
 */
export class InstanceUpdatesResponse extends Message<InstanceUpdatesResponse> {
    /**
     * @generated from field: gitpod.experimental.v1.WorkspaceInstance instance = 1;
     */
    instance?: WorkspaceInstance;

    constructor(data?: PartialMessage<InstanceUpdatesResponse>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "gitpod.experimental.v1.InstanceUpdatesResponse";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        { no: 1, name: "instance", kind: "message", T: WorkspaceInstance },
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceUpdatesResponse {
        return new InstanceUpdatesResponse().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceUpdatesResponse {
        return new InstanceUpdatesResponse().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceUpdatesResponse {
        return new InstanceUpdatesResponse().fromJsonString(jsonString, options);
    }

    static equals(
        a: InstanceUpdatesResponse | PlainMessage<InstanceUpdatesResponse> | undefined,
        b: InstanceUpdatesResponse | PlainMessage<InstanceUpdatesResponse> | undefined,
    ): boolean {
        return proto3.util.equals(InstanceUpdatesResponse, a, b);
    }
}
