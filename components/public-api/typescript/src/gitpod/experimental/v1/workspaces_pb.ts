/**
 * Copyright (c) 2023 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file gitpod/experimental/v1/workspaces.proto (package gitpod.experimental.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {FieldMask, Message, proto3, protoInt64, Timestamp} from "@bufbuild/protobuf";
import {Pagination} from "./pagination_pb.js";

/**
 * PortPolicy defines the accssbility policy of a workspace port is guarded by an authentication in the proxy
 *
 * @generated from enum gitpod.experimental.v1.PortPolicy
 */
export enum PortPolicy {
  /**
   * @generated from enum value: PORT_POLICY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Private means the port is accessible by the workspace owner only using the workspace port URL
   *
   * @generated from enum value: PORT_POLICY_PRIVATE = 1;
   */
  PRIVATE = 1,

  /**
   * Public means the port is accessible by everybody using the workspace port URL
   *
   * @generated from enum value: PORT_POLICY_PUBLIC = 2;
   */
  PUBLIC = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PortPolicy)
proto3.util.setEnumType(PortPolicy, "gitpod.experimental.v1.PortPolicy", [
  { no: 0, name: "PORT_POLICY_UNSPECIFIED" },
  { no: 1, name: "PORT_POLICY_PRIVATE" },
  { no: 2, name: "PORT_POLICY_PUBLIC" },
]);

/**
 * PortProtocol defines the backend protocol of port
 *
 * @generated from enum gitpod.experimental.v1.PortProtocol
 */
export enum PortProtocol {
  /**
   * @generated from enum value: PORT_PROTOCOL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Http means the port backend is http
   *
   * @generated from enum value: PORT_PROTOCOL_HTTP = 1;
   */
  HTTP = 1,

  /**
   * Https means the port backend is https
   *
   * @generated from enum value: PORT_PROTOCOL_HTTPS = 2;
   */
  HTTPS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PortProtocol)
proto3.util.setEnumType(PortProtocol, "gitpod.experimental.v1.PortProtocol", [
  { no: 0, name: "PORT_PROTOCOL_UNSPECIFIED" },
  { no: 1, name: "PORT_PROTOCOL_HTTP" },
  { no: 2, name: "PORT_PROTOCOL_HTTPS" },
]);

/**
 * Admission level describes who can access a workspace instance and its ports.
 *
 * @generated from enum gitpod.experimental.v1.AdmissionLevel
 */
export enum AdmissionLevel {
  /**
   * @generated from enum value: ADMISSION_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * ADMISSION_LEVEL_OWNER_ONLY means the workspace can only be accessed using the owner token
   *
   * @generated from enum value: ADMISSION_LEVEL_OWNER_ONLY = 1;
   */
  OWNER_ONLY = 1,

  /**
   * ADMISSION_LEVEL_EVERYONE means the workspace (including ports) can be accessed by everyone.
   *
   * @generated from enum value: ADMISSION_LEVEL_EVERYONE = 2;
   */
  EVERYONE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AdmissionLevel)
proto3.util.setEnumType(AdmissionLevel, "gitpod.experimental.v1.AdmissionLevel", [
  { no: 0, name: "ADMISSION_LEVEL_UNSPECIFIED" },
  { no: 1, name: "ADMISSION_LEVEL_OWNER_ONLY" },
  { no: 2, name: "ADMISSION_LEVEL_EVERYONE" },
]);

/**
 * @generated from message gitpod.experimental.v1.ListWorkspacesRequest
 */
export class ListWorkspacesRequest extends Message<ListWorkspacesRequest> {
  /**
   * @generated from field: gitpod.experimental.v1.Pagination pagination = 1;
   */
  pagination?: Pagination;

  /**
   * @generated from field: google.protobuf.FieldMask field_mask = 2;
   */
  fieldMask?: FieldMask;

  /**
   * @generated from field: string organization_id = 3;
   */
  organizationId = "";

  constructor(data?: PartialMessage<ListWorkspacesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.ListWorkspacesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: Pagination },
    { no: 2, name: "field_mask", kind: "message", T: FieldMask },
    { no: 3, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkspacesRequest {
    return new ListWorkspacesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkspacesRequest {
    return new ListWorkspacesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkspacesRequest {
    return new ListWorkspacesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkspacesRequest | PlainMessage<ListWorkspacesRequest> | undefined, b: ListWorkspacesRequest | PlainMessage<ListWorkspacesRequest> | undefined): boolean {
    return proto3.util.equals(ListWorkspacesRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.ListWorkspacesResponse
 */
export class ListWorkspacesResponse extends Message<ListWorkspacesResponse> {
  /**
   * @generated from field: string next_page_token = 1;
   */
  nextPageToken = "";

  /**
   * @generated from field: repeated gitpod.experimental.v1.Workspace result = 2;
   */
  result: Workspace[] = [];

  constructor(data?: PartialMessage<ListWorkspacesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.ListWorkspacesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "result", kind: "message", T: Workspace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkspacesResponse {
    return new ListWorkspacesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkspacesResponse {
    return new ListWorkspacesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkspacesResponse {
    return new ListWorkspacesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkspacesResponse | PlainMessage<ListWorkspacesResponse> | undefined, b: ListWorkspacesResponse | PlainMessage<ListWorkspacesResponse> | undefined): boolean {
    return proto3.util.equals(ListWorkspacesResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.GetWorkspaceRequest
 */
export class GetWorkspaceRequest extends Message<GetWorkspaceRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<GetWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.GetWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceRequest | PlainMessage<GetWorkspaceRequest> | undefined, b: GetWorkspaceRequest | PlainMessage<GetWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.GetWorkspaceResponse
 */
export class GetWorkspaceResponse extends Message<GetWorkspaceResponse> {
  /**
   * @generated from field: gitpod.experimental.v1.Workspace result = 1;
   */
  result?: Workspace;

  constructor(data?: PartialMessage<GetWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.GetWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Workspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceResponse | PlainMessage<GetWorkspaceResponse> | undefined, b: GetWorkspaceResponse | PlainMessage<GetWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.StreamWorkspaceStatusRequest
 */
export class StreamWorkspaceStatusRequest extends Message<StreamWorkspaceStatusRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<StreamWorkspaceStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.StreamWorkspaceStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamWorkspaceStatusRequest {
    return new StreamWorkspaceStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamWorkspaceStatusRequest {
    return new StreamWorkspaceStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamWorkspaceStatusRequest {
    return new StreamWorkspaceStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamWorkspaceStatusRequest | PlainMessage<StreamWorkspaceStatusRequest> | undefined, b: StreamWorkspaceStatusRequest | PlainMessage<StreamWorkspaceStatusRequest> | undefined): boolean {
    return proto3.util.equals(StreamWorkspaceStatusRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.StreamWorkspaceStatusResponse
 */
export class StreamWorkspaceStatusResponse extends Message<StreamWorkspaceStatusResponse> {
  /**
   * @generated from field: gitpod.experimental.v1.WorkspaceStatus result = 1;
   */
  result?: WorkspaceStatus;

  constructor(data?: PartialMessage<StreamWorkspaceStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.StreamWorkspaceStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: WorkspaceStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamWorkspaceStatusResponse {
    return new StreamWorkspaceStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamWorkspaceStatusResponse {
    return new StreamWorkspaceStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamWorkspaceStatusResponse {
    return new StreamWorkspaceStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamWorkspaceStatusResponse | PlainMessage<StreamWorkspaceStatusResponse> | undefined, b: StreamWorkspaceStatusResponse | PlainMessage<StreamWorkspaceStatusResponse> | undefined): boolean {
    return proto3.util.equals(StreamWorkspaceStatusResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.GetOwnerTokenRequest
 */
export class GetOwnerTokenRequest extends Message<GetOwnerTokenRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<GetOwnerTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.GetOwnerTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOwnerTokenRequest {
    return new GetOwnerTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOwnerTokenRequest {
    return new GetOwnerTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOwnerTokenRequest {
    return new GetOwnerTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOwnerTokenRequest | PlainMessage<GetOwnerTokenRequest> | undefined, b: GetOwnerTokenRequest | PlainMessage<GetOwnerTokenRequest> | undefined): boolean {
    return proto3.util.equals(GetOwnerTokenRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.GetOwnerTokenResponse
 */
export class GetOwnerTokenResponse extends Message<GetOwnerTokenResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<GetOwnerTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.GetOwnerTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOwnerTokenResponse {
    return new GetOwnerTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOwnerTokenResponse {
    return new GetOwnerTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOwnerTokenResponse {
    return new GetOwnerTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOwnerTokenResponse | PlainMessage<GetOwnerTokenResponse> | undefined, b: GetOwnerTokenResponse | PlainMessage<GetOwnerTokenResponse> | undefined): boolean {
    return proto3.util.equals(GetOwnerTokenResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.CreateAndStartWorkspaceRequest
 */
export class CreateAndStartWorkspaceRequest extends Message<CreateAndStartWorkspaceRequest> {
  /**
   * @generated from field: string idempotency_token = 1;
   */
  idempotencyToken = "";

  /**
   * @generated from oneof gitpod.experimental.v1.CreateAndStartWorkspaceRequest.source
   */
  source: {
    /**
     * @generated from field: string context_url = 2;
     */
    value: string;
    case: "contextUrl";
  } | {
    /**
     * @generated from field: string prebuild_id = 3;
     */
    value: string;
    case: "prebuildId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: gitpod.experimental.v1.StartWorkspaceSpec start_spec = 5;
   */
  startSpec?: StartWorkspaceSpec;

  constructor(data?: PartialMessage<CreateAndStartWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.CreateAndStartWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "idempotency_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "context_url", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "source" },
    { no: 3, name: "prebuild_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "source" },
    { no: 5, name: "start_spec", kind: "message", T: StartWorkspaceSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAndStartWorkspaceRequest {
    return new CreateAndStartWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceRequest {
    return new CreateAndStartWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceRequest {
    return new CreateAndStartWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAndStartWorkspaceRequest | PlainMessage<CreateAndStartWorkspaceRequest> | undefined, b: CreateAndStartWorkspaceRequest | PlainMessage<CreateAndStartWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(CreateAndStartWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.CreateAndStartWorkspaceResponse
 */
export class CreateAndStartWorkspaceResponse extends Message<CreateAndStartWorkspaceResponse> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<CreateAndStartWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.CreateAndStartWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAndStartWorkspaceResponse {
    return new CreateAndStartWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceResponse {
    return new CreateAndStartWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceResponse {
    return new CreateAndStartWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAndStartWorkspaceResponse | PlainMessage<CreateAndStartWorkspaceResponse> | undefined, b: CreateAndStartWorkspaceResponse | PlainMessage<CreateAndStartWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(CreateAndStartWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.StartWorkspaceRequest
 */
export class StartWorkspaceRequest extends Message<StartWorkspaceRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<StartWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.StartWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWorkspaceRequest {
    return new StartWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWorkspaceRequest {
    return new StartWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWorkspaceRequest {
    return new StartWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartWorkspaceRequest | PlainMessage<StartWorkspaceRequest> | undefined, b: StartWorkspaceRequest | PlainMessage<StartWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(StartWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.StartWorkspaceResponse
 */
export class StartWorkspaceResponse extends Message<StartWorkspaceResponse> {
  /**
   * @generated from field: gitpod.experimental.v1.Workspace result = 1;
   */
  result?: Workspace;

  constructor(data?: PartialMessage<StartWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.StartWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Workspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWorkspaceResponse {
    return new StartWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWorkspaceResponse {
    return new StartWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWorkspaceResponse {
    return new StartWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartWorkspaceResponse | PlainMessage<StartWorkspaceResponse> | undefined, b: StartWorkspaceResponse | PlainMessage<StartWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(StartWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.StopWorkspaceRequest
 */
export class StopWorkspaceRequest extends Message<StopWorkspaceRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<StopWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.StopWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopWorkspaceRequest {
    return new StopWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopWorkspaceRequest {
    return new StopWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopWorkspaceRequest {
    return new StopWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopWorkspaceRequest | PlainMessage<StopWorkspaceRequest> | undefined, b: StopWorkspaceRequest | PlainMessage<StopWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(StopWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.StopWorkspaceResponse
 */
export class StopWorkspaceResponse extends Message<StopWorkspaceResponse> {
  /**
   * @generated from field: gitpod.experimental.v1.Workspace result = 1;
   */
  result?: Workspace;

  constructor(data?: PartialMessage<StopWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.StopWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Workspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopWorkspaceResponse {
    return new StopWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopWorkspaceResponse {
    return new StopWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopWorkspaceResponse {
    return new StopWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopWorkspaceResponse | PlainMessage<StopWorkspaceResponse> | undefined, b: StopWorkspaceResponse | PlainMessage<StopWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(StopWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.DeleteWorkspaceRequest
 */
export class DeleteWorkspaceRequest extends Message<DeleteWorkspaceRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<DeleteWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.DeleteWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWorkspaceRequest {
    return new DeleteWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWorkspaceRequest {
    return new DeleteWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWorkspaceRequest {
    return new DeleteWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWorkspaceRequest | PlainMessage<DeleteWorkspaceRequest> | undefined, b: DeleteWorkspaceRequest | PlainMessage<DeleteWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.DeleteWorkspaceResponse
 */
export class DeleteWorkspaceResponse extends Message<DeleteWorkspaceResponse> {
  constructor(data?: PartialMessage<DeleteWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.DeleteWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWorkspaceResponse {
    return new DeleteWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWorkspaceResponse {
    return new DeleteWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWorkspaceResponse {
    return new DeleteWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWorkspaceResponse | PlainMessage<DeleteWorkspaceResponse> | undefined, b: DeleteWorkspaceResponse | PlainMessage<DeleteWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(DeleteWorkspaceResponse, a, b);
  }
}

/**
 * Workspace describes a single workspace
 *
 * @generated from message gitpod.experimental.v1.Workspace
 */
export class Workspace extends Message<Workspace> {
  /**
   * workspace_id is the ID of the workspace
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * owner_id is the ID of the user who created this workspace
   *
   * @generated from field: string owner_id = 2;
   */
  ownerId = "";

  /**
   * project_id is the ID of the project which this workspace belongs to
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * context reports the original context the workspace was created from
   *
   * @generated from field: gitpod.experimental.v1.WorkspaceContext context = 4;
   */
  context?: WorkspaceContext;

  /**
   * description is a human readable description of the workspace
   *
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * status is the current status of this Workspace.
   *
   * @generated from field: gitpod.experimental.v1.WorkspaceStatus status = 6;
   */
  status?: WorkspaceStatus;

  constructor(data?: PartialMessage<Workspace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.Workspace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "context", kind: "message", T: WorkspaceContext },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "status", kind: "message", T: WorkspaceStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workspace {
    return new Workspace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJsonString(jsonString, options);
  }

  static equals(a: Workspace | PlainMessage<Workspace> | undefined, b: Workspace | PlainMessage<Workspace> | undefined): boolean {
    return proto3.util.equals(Workspace, a, b);
  }
}

/**
 * WorkspaceStatus represents the currently observed status of a Workspace, including data about child resources that belong to this Workspace.
 *
 * @generated from message gitpod.experimental.v1.WorkspaceStatus
 */
export class WorkspaceStatus extends Message<WorkspaceStatus> {
  /**
   * instance is the currently assigned WorkspaceInstance to this workspace. Empty when there is no WorkspaceInstance assigned.
   *
   * @generated from field: gitpod.experimental.v1.WorkspaceInstance instance = 1;
   */
  instance?: WorkspaceInstance;

  constructor(data?: PartialMessage<WorkspaceStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.WorkspaceStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance", kind: "message", T: WorkspaceInstance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceStatus {
    return new WorkspaceStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceStatus {
    return new WorkspaceStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceStatus {
    return new WorkspaceStatus().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceStatus | PlainMessage<WorkspaceStatus> | undefined, b: WorkspaceStatus | PlainMessage<WorkspaceStatus> | undefined): boolean {
    return proto3.util.equals(WorkspaceStatus, a, b);
  }
}

/**
 * WorkspaceContext describes the context a workspace was created from
 *
 * @generated from message gitpod.experimental.v1.WorkspaceContext
 */
export class WorkspaceContext extends Message<WorkspaceContext> {
  /**
   * All workspace context originates from a URL - this is the context URL
   * which led to the creation of a workspace.
   *
   * @generated from field: string context_url = 1;
   */
  contextUrl = "";

  /**
   * @generated from oneof gitpod.experimental.v1.WorkspaceContext.details
   */
  details: {
    /**
     * @generated from field: gitpod.experimental.v1.WorkspaceContext.Git git = 2;
     */
    value: WorkspaceContext_Git;
    case: "git";
  } | {
    /**
     * @generated from field: gitpod.experimental.v1.WorkspaceContext.Prebuild prebuild = 3;
     */
    value: WorkspaceContext_Prebuild;
    case: "prebuild";
  } | {
    /**
     * @generated from field: gitpod.experimental.v1.WorkspaceContext.Snapshot snapshot = 4;
     */
    value: WorkspaceContext_Snapshot;
    case: "snapshot";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<WorkspaceContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.WorkspaceContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "git", kind: "message", T: WorkspaceContext_Git, oneof: "details" },
    { no: 3, name: "prebuild", kind: "message", T: WorkspaceContext_Prebuild, oneof: "details" },
    { no: 4, name: "snapshot", kind: "message", T: WorkspaceContext_Snapshot, oneof: "details" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceContext {
    return new WorkspaceContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceContext {
    return new WorkspaceContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceContext {
    return new WorkspaceContext().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceContext | PlainMessage<WorkspaceContext> | undefined, b: WorkspaceContext | PlainMessage<WorkspaceContext> | undefined): boolean {
    return proto3.util.equals(WorkspaceContext, a, b);
  }
}

/**
 * GitProvider describes the git provider
 *
 * @generated from message gitpod.experimental.v1.WorkspaceContext.GitProvider
 */
export class WorkspaceContext_GitProvider extends Message<WorkspaceContext_GitProvider> {
  /**
   * type is the git provider type, e.g. 'github', 'gitlab', 'bitbucket'
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * hostname is the git provider hostname
   *
   * @generated from field: string hostname = 2;
   */
  hostname = "";

  constructor(data?: PartialMessage<WorkspaceContext_GitProvider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.WorkspaceContext.GitProvider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceContext_GitProvider {
    return new WorkspaceContext_GitProvider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceContext_GitProvider {
    return new WorkspaceContext_GitProvider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceContext_GitProvider {
    return new WorkspaceContext_GitProvider().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceContext_GitProvider | PlainMessage<WorkspaceContext_GitProvider> | undefined, b: WorkspaceContext_GitProvider | PlainMessage<WorkspaceContext_GitProvider> | undefined): boolean {
    return proto3.util.equals(WorkspaceContext_GitProvider, a, b);
  }
}

/**
 * Repository describes the originating repository
 *
 * @generated from message gitpod.experimental.v1.WorkspaceContext.Repository
 */
export class WorkspaceContext_Repository extends Message<WorkspaceContext_Repository> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  constructor(data?: PartialMessage<WorkspaceContext_Repository>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.WorkspaceContext.Repository";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceContext_Repository {
    return new WorkspaceContext_Repository().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceContext_Repository {
    return new WorkspaceContext_Repository().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceContext_Repository {
    return new WorkspaceContext_Repository().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceContext_Repository | PlainMessage<WorkspaceContext_Repository> | undefined, b: WorkspaceContext_Repository | PlainMessage<WorkspaceContext_Repository> | undefined): boolean {
    return proto3.util.equals(WorkspaceContext_Repository, a, b);
  }
}

/**
 * Explicit Git context
 *
 * @generated from message gitpod.experimental.v1.WorkspaceContext.Git
 */
export class WorkspaceContext_Git extends Message<WorkspaceContext_Git> {
  /**
   * @generated from field: string normalized_context_url = 1;
   */
  normalizedContextUrl = "";

  /**
   * @generated from field: gitpod.experimental.v1.WorkspaceContext.Repository repository = 2;
   */
  repository?: WorkspaceContext_Repository;

  /**
   * provider is the git provider
   *
   * @generated from field: gitpod.experimental.v1.WorkspaceContext.GitProvider provider = 3;
   */
  provider?: WorkspaceContext_GitProvider;

  constructor(data?: PartialMessage<WorkspaceContext_Git>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.WorkspaceContext.Git";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "normalized_context_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repository", kind: "message", T: WorkspaceContext_Repository },
    { no: 3, name: "provider", kind: "message", T: WorkspaceContext_GitProvider },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceContext_Git {
    return new WorkspaceContext_Git().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceContext_Git {
    return new WorkspaceContext_Git().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceContext_Git {
    return new WorkspaceContext_Git().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceContext_Git | PlainMessage<WorkspaceContext_Git> | undefined, b: WorkspaceContext_Git | PlainMessage<WorkspaceContext_Git> | undefined): boolean {
    return proto3.util.equals(WorkspaceContext_Git, a, b);
  }
}

/**
 * Workspace was created from a prebuild
 *
 * @generated from message gitpod.experimental.v1.WorkspaceContext.Prebuild
 */
export class WorkspaceContext_Prebuild extends Message<WorkspaceContext_Prebuild> {
  /**
   * original_context is the Git context which lead to the selection
   * of a prebuild.
   *
   * @generated from field: gitpod.experimental.v1.WorkspaceContext.Git original_context = 1;
   */
  originalContext?: WorkspaceContext_Git;

  /**
   * prebuild_id is the ID of the prebuild which was used to create this workspace
   *
   * @generated from field: string prebuild_id = 2;
   */
  prebuildId = "";

  constructor(data?: PartialMessage<WorkspaceContext_Prebuild>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.WorkspaceContext.Prebuild";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "original_context", kind: "message", T: WorkspaceContext_Git },
    { no: 2, name: "prebuild_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceContext_Prebuild {
    return new WorkspaceContext_Prebuild().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceContext_Prebuild {
    return new WorkspaceContext_Prebuild().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceContext_Prebuild {
    return new WorkspaceContext_Prebuild().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceContext_Prebuild | PlainMessage<WorkspaceContext_Prebuild> | undefined, b: WorkspaceContext_Prebuild | PlainMessage<WorkspaceContext_Prebuild> | undefined): boolean {
    return proto3.util.equals(WorkspaceContext_Prebuild, a, b);
  }
}

/**
 * Snapshot context points to the snapshot which the workspace was created from
 *
 * @generated from message gitpod.experimental.v1.WorkspaceContext.Snapshot
 */
export class WorkspaceContext_Snapshot extends Message<WorkspaceContext_Snapshot> {
  /**
   * @generated from field: string snapshot_id = 1;
   */
  snapshotId = "";

  constructor(data?: PartialMessage<WorkspaceContext_Snapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.WorkspaceContext.Snapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshot_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceContext_Snapshot {
    return new WorkspaceContext_Snapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceContext_Snapshot {
    return new WorkspaceContext_Snapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceContext_Snapshot {
    return new WorkspaceContext_Snapshot().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceContext_Snapshot | PlainMessage<WorkspaceContext_Snapshot> | undefined, b: WorkspaceContext_Snapshot | PlainMessage<WorkspaceContext_Snapshot> | undefined): boolean {
    return proto3.util.equals(WorkspaceContext_Snapshot, a, b);
  }
}

/**
 * WorkspaceInstance describes a single workspace instance
 *
 * @generated from message gitpod.experimental.v1.WorkspaceInstance
 */
export class WorkspaceInstance extends Message<WorkspaceInstance> {
  /**
   * Instance ID is the unique identifier of the workspace instance
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Workspace ID is the unique identifier of the workspace this instance belongs to
   *
   * @generated from field: string workspace_id = 2;
   */
  workspaceId = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: gitpod.experimental.v1.WorkspaceInstanceStatus status = 4;
   */
  status?: WorkspaceInstanceStatus;

  constructor(data?: PartialMessage<WorkspaceInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.WorkspaceInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
    { no: 4, name: "status", kind: "message", T: WorkspaceInstanceStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceInstance {
    return new WorkspaceInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceInstance {
    return new WorkspaceInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceInstance {
    return new WorkspaceInstance().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceInstance | PlainMessage<WorkspaceInstance> | undefined, b: WorkspaceInstance | PlainMessage<WorkspaceInstance> | undefined): boolean {
    return proto3.util.equals(WorkspaceInstance, a, b);
  }
}

/**
 * WorkspaceStatus describes a workspace status
 *
 * @generated from message gitpod.experimental.v1.WorkspaceInstanceStatus
 */
export class WorkspaceInstanceStatus extends Message<WorkspaceInstanceStatus> {
  /**
   * version of the status update. Workspace instances themselves are unversioned,
   * but their statuus has different versions.
   * The value of this field has no semantic meaning (e.g. don't interpret it as
   * as a timestemp), but it can be used to impose a partial order.
   * If a.status_version < b.status_version then a was the status before b.
   *
   * @generated from field: uint64 status_version = 1;
   */
  statusVersion = protoInt64.zero;

  /**
   * the phase of a workspace is a simple, high-level summary of where the workspace instance is in its lifecycle
   *
   * @generated from field: gitpod.experimental.v1.WorkspaceInstanceStatus.Phase phase = 2;
   */
  phase = WorkspaceInstanceStatus_Phase.UNSPECIFIED;

  /**
   * conditions detail the current state of the workspace instance
   *
   * @generated from field: gitpod.experimental.v1.WorkspaceInstanceStatus.Conditions conditions = 3;
   */
  conditions?: WorkspaceInstanceStatus_Conditions;

  /**
   * message is an optional human-readable message detailing the current phase
   *
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * URL contains the endpoint at which the workspace instance is available
   *
   * @generated from field: string url = 5;
   */
  url = "";

  /**
   * Admission describes who can access a workspace instance and its ports.
   *
   * @generated from field: gitpod.experimental.v1.AdmissionLevel admission = 6;
   */
  admission = AdmissionLevel.UNSPECIFIED;

  /**
   * ports is the list of exposed ports in the workspace.
   *
   * @generated from field: repeated gitpod.experimental.v1.Port ports = 7;
   */
  ports: Port[] = [];

  /**
   * recent_folders is the opened folders inside the workspace. Used to determine the folder path to load the workspace in.
   *
   * @generated from field: repeated string recent_folders = 8;
   */
  recentFolders: string[] = [];

  /**
   * gitStatus details the Git working copy status of the workspace.
   * Note: this is a best-effort field and more often than not will not be present. Its absence does not
   * indicate the absence of a working copy.
   *
   * @generated from field: gitpod.experimental.v1.GitStatus git_status = 9;
   */
  gitStatus?: GitStatus;

  constructor(data?: PartialMessage<WorkspaceInstanceStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.WorkspaceInstanceStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "phase", kind: "enum", T: proto3.getEnumType(WorkspaceInstanceStatus_Phase) },
    { no: 3, name: "conditions", kind: "message", T: WorkspaceInstanceStatus_Conditions },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "admission", kind: "enum", T: proto3.getEnumType(AdmissionLevel) },
    { no: 7, name: "ports", kind: "message", T: Port, repeated: true },
    { no: 8, name: "recent_folders", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "git_status", kind: "message", T: GitStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceInstanceStatus {
    return new WorkspaceInstanceStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceInstanceStatus {
    return new WorkspaceInstanceStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceInstanceStatus {
    return new WorkspaceInstanceStatus().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceInstanceStatus | PlainMessage<WorkspaceInstanceStatus> | undefined, b: WorkspaceInstanceStatus | PlainMessage<WorkspaceInstanceStatus> | undefined): boolean {
    return proto3.util.equals(WorkspaceInstanceStatus, a, b);
  }
}

/**
 * Phase is a simple, high-level summary of where the workspace instance is in its lifecycle.
 * The phase is not intended to be a comprehensive rollup of observations of the workspace state,
 * nor is it intended to be a comprehensive state machine.
 * (based on  https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase)
 *
 * @generated from enum gitpod.experimental.v1.WorkspaceInstanceStatus.Phase
 */
export enum WorkspaceInstanceStatus_Phase {
  /**
   * Unknown indicates an issue within the workspace manager in that it cannot determine the actual phase of
   * a workspace. This phase is usually accompanied by an error.
   *
   * @generated from enum value: PHASE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Preparing means that we haven't actually started the workspace instance just yet, but rather
   * are still preparing for launch.
   *
   * @generated from enum value: PHASE_PREPARING = 1;
   */
  PREPARING = 1,

  /**
   * ImageBuild indicates that there's an image build running for this workspace.
   *
   * @generated from enum value: PHASE_IMAGEBUILD = 2;
   */
  IMAGEBUILD = 2,

  /**
   * Pending means the workspace does not yet consume resources in the cluster, but rather is looking for
   * some space within the cluster. If for example the cluster needs to scale up to accomodate the
   * workspace, the workspace will be in Pending state until that happened.
   *
   * @generated from enum value: PHASE_PENDING = 3;
   */
  PENDING = 3,

  /**
   * Creating means the workspace is currently being created. That includes downloading the images required
   * to run the workspace over the network. The time spent in this phase varies widely and depends on the current
   * network speed, image size and cache states.
   *
   * @generated from enum value: PHASE_CREATING = 4;
   */
  CREATING = 4,

  /**
   * Initializing is the phase in which the workspace is executing the appropriate workspace initializer (e.g. Git
   * clone or backup download). After this phase one can expect the workspace to either be Running or Failed.
   *
   * @generated from enum value: PHASE_INITIALIZING = 5;
   */
  INITIALIZING = 5,

  /**
   * Running means the workspace is able to actively perform work, either by serving a user through Theia,
   * or as a headless workspace.
   *
   * @generated from enum value: PHASE_RUNNING = 6;
   */
  RUNNING = 6,

  /**
   * Interrupted is an exceptional state where the container should be running but is temporarily unavailable.
   * When in this state, we expect it to become running or stopping anytime soon.
   *
   * @generated from enum value: PHASE_INTERRUPTED = 7;
   */
  INTERRUPTED = 7,

  /**
   * Stopping means that the workspace is currently shutting down. It could go to stopped every moment.
   *
   * @generated from enum value: PHASE_STOPPING = 8;
   */
  STOPPING = 8,

  /**
   * Stopped means the workspace ended regularly because it was shut down.
   *
   * @generated from enum value: PHASE_STOPPED = 9;
   */
  STOPPED = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkspaceInstanceStatus_Phase)
proto3.util.setEnumType(WorkspaceInstanceStatus_Phase, "gitpod.experimental.v1.WorkspaceInstanceStatus.Phase", [
  { no: 0, name: "PHASE_UNSPECIFIED" },
  { no: 1, name: "PHASE_PREPARING" },
  { no: 2, name: "PHASE_IMAGEBUILD" },
  { no: 3, name: "PHASE_PENDING" },
  { no: 4, name: "PHASE_CREATING" },
  { no: 5, name: "PHASE_INITIALIZING" },
  { no: 6, name: "PHASE_RUNNING" },
  { no: 7, name: "PHASE_INTERRUPTED" },
  { no: 8, name: "PHASE_STOPPING" },
  { no: 9, name: "PHASE_STOPPED" },
]);

/**
 * Conditions gives more detailed information as to the state of the workspace. Which condition actually
 * has a value depends on the phase the workspace is in.
 *
 * @generated from message gitpod.experimental.v1.WorkspaceInstanceStatus.Conditions
 */
export class WorkspaceInstanceStatus_Conditions extends Message<WorkspaceInstanceStatus_Conditions> {
  /**
   * failed contains the reason the workspace failed to operate. If this field is empty, the workspace has not failed.
   * This field is filled exclusively when caused by system errors.
   *
   * @generated from field: string failed = 1;
   */
  failed = "";

  /**
   * timeout contains the reason the workspace has timed out. If this field is empty, the workspace has not timed out.
   *
   * @generated from field: string timeout = 2;
   */
  timeout = "";

  /**
   * first_user_activity is the time when MarkActive was first called on the workspace
   *
   * @generated from field: google.protobuf.Timestamp first_user_activity = 9;
   */
  firstUserActivity?: Timestamp;

  /**
   * stopped_by_request is true if the workspace was stopped using a StopWorkspace call
   *
   * @generated from field: optional bool stopped_by_request = 11;
   */
  stoppedByRequest?: boolean;

  constructor(data?: PartialMessage<WorkspaceInstanceStatus_Conditions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.WorkspaceInstanceStatus.Conditions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "failed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timeout", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "first_user_activity", kind: "message", T: Timestamp },
    { no: 11, name: "stopped_by_request", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceInstanceStatus_Conditions {
    return new WorkspaceInstanceStatus_Conditions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceInstanceStatus_Conditions {
    return new WorkspaceInstanceStatus_Conditions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceInstanceStatus_Conditions {
    return new WorkspaceInstanceStatus_Conditions().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceInstanceStatus_Conditions | PlainMessage<WorkspaceInstanceStatus_Conditions> | undefined, b: WorkspaceInstanceStatus_Conditions | PlainMessage<WorkspaceInstanceStatus_Conditions> | undefined): boolean {
    return proto3.util.equals(WorkspaceInstanceStatus_Conditions, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.Port
 */
export class Port extends Message<Port> {
  /**
   * port number
   *
   * @generated from field: uint64 port = 1;
   */
  port = protoInt64.zero;

  /**
   * policy of this port
   *
   * @generated from field: gitpod.experimental.v1.PortPolicy policy = 2;
   */
  policy = PortPolicy.UNSPECIFIED;

  /**
   * url that can be used to access the port
   *
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * backend protocol of this port
   *
   * @generated from field: gitpod.experimental.v1.PortProtocol protocol = 4;
   */
  protocol = PortProtocol.UNSPECIFIED;

  constructor(data?: PartialMessage<Port>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.Port";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "policy", kind: "enum", T: proto3.getEnumType(PortPolicy) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "protocol", kind: "enum", T: proto3.getEnumType(PortProtocol) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Port {
    return new Port().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Port {
    return new Port().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Port {
    return new Port().fromJsonString(jsonString, options);
  }

  static equals(a: Port | PlainMessage<Port> | undefined, b: Port | PlainMessage<Port> | undefined): boolean {
    return proto3.util.equals(Port, a, b);
  }
}

/**
 * StartWorkspaceSpec influences the workspace start
 *
 * future per-workspace-start fields, e.g. region
 *
 * @generated from message gitpod.experimental.v1.StartWorkspaceSpec
 */
export class StartWorkspaceSpec extends Message<StartWorkspaceSpec> {
  constructor(data?: PartialMessage<StartWorkspaceSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.StartWorkspaceSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWorkspaceSpec {
    return new StartWorkspaceSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWorkspaceSpec {
    return new StartWorkspaceSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWorkspaceSpec {
    return new StartWorkspaceSpec().fromJsonString(jsonString, options);
  }

  static equals(a: StartWorkspaceSpec | PlainMessage<StartWorkspaceSpec> | undefined, b: StartWorkspaceSpec | PlainMessage<StartWorkspaceSpec> | undefined): boolean {
    return proto3.util.equals(StartWorkspaceSpec, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.PortSpec
 */
export class PortSpec extends Message<PortSpec> {
  /**
   * port number
   *
   * @generated from field: uint64 port = 1;
   */
  port = protoInt64.zero;

  /**
   * policy of this port
   *
   * @generated from field: gitpod.experimental.v1.PortPolicy policy = 2;
   */
  policy = PortPolicy.UNSPECIFIED;

  /**
   * backend protocol of this port
   *
   * @generated from field: gitpod.experimental.v1.PortProtocol protocol = 3;
   */
  protocol = PortProtocol.UNSPECIFIED;

  constructor(data?: PartialMessage<PortSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.PortSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "policy", kind: "enum", T: proto3.getEnumType(PortPolicy) },
    { no: 3, name: "protocol", kind: "enum", T: proto3.getEnumType(PortProtocol) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PortSpec {
    return new PortSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PortSpec {
    return new PortSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PortSpec {
    return new PortSpec().fromJsonString(jsonString, options);
  }

  static equals(a: PortSpec | PlainMessage<PortSpec> | undefined, b: PortSpec | PlainMessage<PortSpec> | undefined): boolean {
    return proto3.util.equals(PortSpec, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.UpdatePortRequest
 */
export class UpdatePortRequest extends Message<UpdatePortRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: gitpod.experimental.v1.PortSpec port = 2;
   */
  port?: PortSpec;

  constructor(data?: PartialMessage<UpdatePortRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.UpdatePortRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "message", T: PortSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePortRequest {
    return new UpdatePortRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePortRequest {
    return new UpdatePortRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePortRequest {
    return new UpdatePortRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePortRequest | PlainMessage<UpdatePortRequest> | undefined, b: UpdatePortRequest | PlainMessage<UpdatePortRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePortRequest, a, b);
  }
}

/**
 * @generated from message gitpod.experimental.v1.UpdatePortResponse
 */
export class UpdatePortResponse extends Message<UpdatePortResponse> {
  constructor(data?: PartialMessage<UpdatePortResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.UpdatePortResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePortResponse {
    return new UpdatePortResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePortResponse {
    return new UpdatePortResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePortResponse {
    return new UpdatePortResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePortResponse | PlainMessage<UpdatePortResponse> | undefined, b: UpdatePortResponse | PlainMessage<UpdatePortResponse> | undefined): boolean {
    return proto3.util.equals(UpdatePortResponse, a, b);
  }
}

/**
 * GitStatus describes the current working copy status, akin to a combination of "git status" and "git branch"
 *
 * @generated from message gitpod.experimental.v1.GitStatus
 */
export class GitStatus extends Message<GitStatus> {
  /**
   * branch is branch we're currently on
   *
   * @generated from field: string branch = 1;
   */
  branch = "";

  /**
   * latest_commit is the most recent commit on the current branch
   *
   * @generated from field: string latest_commit = 2;
   */
  latestCommit = "";

  /**
   * uncommited_files is an array of uncommitted files, possibly truncated
   *
   * @generated from field: repeated string uncommited_files = 3;
   */
  uncommitedFiles: string[] = [];

  /**
   * the total number of uncommited files
   *
   * @generated from field: int32 total_uncommited_files = 6;
   */
  totalUncommitedFiles = 0;

  /**
   * untracked_files is an array of untracked files in the workspace, possibly truncated
   *
   * @generated from field: repeated string untracked_files = 4;
   */
  untrackedFiles: string[] = [];

  /**
   * the total number of untracked files
   *
   * @generated from field: int32 total_untracked_files = 7;
   */
  totalUntrackedFiles = 0;

  /**
   * unpushed_commits is an array of unpushed changes in the workspace, possibly truncated
   *
   * @generated from field: repeated string unpushed_commits = 5;
   */
  unpushedCommits: string[] = [];

  /**
   * the total number of unpushed changes
   *
   * @generated from field: int32 total_unpushed_commits = 8;
   */
  totalUnpushedCommits = 0;

  constructor(data?: PartialMessage<GitStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.experimental.v1.GitStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "latest_commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "uncommited_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "total_uncommited_files", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "untracked_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "total_untracked_files", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "unpushed_commits", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "total_unpushed_commits", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitStatus {
    return new GitStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitStatus {
    return new GitStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitStatus {
    return new GitStatus().fromJsonString(jsonString, options);
  }

  static equals(a: GitStatus | PlainMessage<GitStatus> | undefined, b: GitStatus | PlainMessage<GitStatus> | undefined): boolean {
    return proto3.util.equals(GitStatus, a, b);
  }
}

