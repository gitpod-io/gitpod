/**
 * Copyright (c) 2024 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file gitpod/v1/workspace.proto (package gitpod.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { PaginationRequest, PaginationResponse } from "./pagination_pb.js";
import { EditorReference } from "./editor_pb.js";
import { EnvironmentVariable } from "./envvar_pb.js";

/**
 * Admission level describes who can access a workspace instance and its ports.
 *
 * @generated from enum gitpod.v1.AdmissionLevel
 */
export enum AdmissionLevel {
  /**
   * @generated from enum value: ADMISSION_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * ADMISSION_LEVEL_OWNER_ONLY means the workspace can only be accessed using
   * the owner token
   *
   * @generated from enum value: ADMISSION_LEVEL_OWNER_ONLY = 1;
   */
  OWNER_ONLY = 1,

  /**
   * ADMISSION_LEVEL_EVERYONE means the workspace (including ports) can be
   * accessed by everyone.
   *
   * @generated from enum value: ADMISSION_LEVEL_EVERYONE = 2;
   */
  EVERYONE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AdmissionLevel)
proto3.util.setEnumType(AdmissionLevel, "gitpod.v1.AdmissionLevel", [
  { no: 0, name: "ADMISSION_LEVEL_UNSPECIFIED" },
  { no: 1, name: "ADMISSION_LEVEL_OWNER_ONLY" },
  { no: 2, name: "ADMISSION_LEVEL_EVERYONE" },
]);

/**
 * @generated from message gitpod.v1.UpdateWorkspacePortRequest
 */
export class UpdateWorkspacePortRequest extends Message<UpdateWorkspacePortRequest> {
  /**
   * workspace_id specifies the workspace to update port
   *
   * +required
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * port number
   *
   * +required
   *
   * @generated from field: uint64 port = 2;
   */
  port = protoInt64.zero;

  /**
   * admission controls the policy of this port
   *
   * @generated from field: optional gitpod.v1.AdmissionLevel admission = 3;
   */
  admission?: AdmissionLevel;

  /**
   * backend protocol of this port
   *
   * @generated from field: optional gitpod.v1.WorkspacePort.Protocol protocol = 4;
   */
  protocol?: WorkspacePort_Protocol;

  constructor(data?: PartialMessage<UpdateWorkspacePortRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.UpdateWorkspacePortRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "admission", kind: "enum", T: proto3.getEnumType(AdmissionLevel), opt: true },
    { no: 4, name: "protocol", kind: "enum", T: proto3.getEnumType(WorkspacePort_Protocol), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkspacePortRequest {
    return new UpdateWorkspacePortRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkspacePortRequest {
    return new UpdateWorkspacePortRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkspacePortRequest {
    return new UpdateWorkspacePortRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWorkspacePortRequest | PlainMessage<UpdateWorkspacePortRequest> | undefined, b: UpdateWorkspacePortRequest | PlainMessage<UpdateWorkspacePortRequest> | undefined): boolean {
    return proto3.util.equals(UpdateWorkspacePortRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.UpdateWorkspacePortResponse
 */
export class UpdateWorkspacePortResponse extends Message<UpdateWorkspacePortResponse> {
  constructor(data?: PartialMessage<UpdateWorkspacePortResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.UpdateWorkspacePortResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkspacePortResponse {
    return new UpdateWorkspacePortResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkspacePortResponse {
    return new UpdateWorkspacePortResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkspacePortResponse {
    return new UpdateWorkspacePortResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWorkspacePortResponse | PlainMessage<UpdateWorkspacePortResponse> | undefined, b: UpdateWorkspacePortResponse | PlainMessage<UpdateWorkspacePortResponse> | undefined): boolean {
    return proto3.util.equals(UpdateWorkspacePortResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.GetWorkspaceRequest
 */
export class GetWorkspaceRequest extends Message<GetWorkspaceRequest> {
  /**
   * workspace_id specifies the workspace to get
   *
   * +required
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<GetWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceRequest | PlainMessage<GetWorkspaceRequest> | undefined, b: GetWorkspaceRequest | PlainMessage<GetWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.GetWorkspaceResponse
 */
export class GetWorkspaceResponse extends Message<GetWorkspaceResponse> {
  /**
   * @generated from field: gitpod.v1.Workspace workspace = 1;
   */
  workspace?: Workspace;

  constructor(data?: PartialMessage<GetWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace", kind: "message", T: Workspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceResponse | PlainMessage<GetWorkspaceResponse> | undefined, b: GetWorkspaceResponse | PlainMessage<GetWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WatchWorkspaceStatusRequest
 */
export class WatchWorkspaceStatusRequest extends Message<WatchWorkspaceStatusRequest> {
  /**
   * workspace_id specifies the workspace to watch
   *
   * +optional if empty then watch all workspaces
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<WatchWorkspaceStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WatchWorkspaceStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchWorkspaceStatusRequest {
    return new WatchWorkspaceStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchWorkspaceStatusRequest {
    return new WatchWorkspaceStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchWorkspaceStatusRequest {
    return new WatchWorkspaceStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchWorkspaceStatusRequest | PlainMessage<WatchWorkspaceStatusRequest> | undefined, b: WatchWorkspaceStatusRequest | PlainMessage<WatchWorkspaceStatusRequest> | undefined): boolean {
    return proto3.util.equals(WatchWorkspaceStatusRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WatchWorkspaceStatusResponse
 */
export class WatchWorkspaceStatusResponse extends Message<WatchWorkspaceStatusResponse> {
  /**
   * workspace_id is the ID of the workspace that has status updated
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * status is the updated status of workspace
   *
   * @generated from field: gitpod.v1.WorkspaceStatus status = 2;
   */
  status?: WorkspaceStatus;

  constructor(data?: PartialMessage<WatchWorkspaceStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WatchWorkspaceStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "message", T: WorkspaceStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchWorkspaceStatusResponse {
    return new WatchWorkspaceStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchWorkspaceStatusResponse {
    return new WatchWorkspaceStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchWorkspaceStatusResponse {
    return new WatchWorkspaceStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchWorkspaceStatusResponse | PlainMessage<WatchWorkspaceStatusResponse> | undefined, b: WatchWorkspaceStatusResponse | PlainMessage<WatchWorkspaceStatusResponse> | undefined): boolean {
    return proto3.util.equals(WatchWorkspaceStatusResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.ListWorkspacesRequest
 */
export class ListWorkspacesRequest extends Message<ListWorkspacesRequest> {
  /**
   * pagination contains the pagination options for listing workspaces
   *
   * @generated from field: gitpod.v1.PaginationRequest pagination = 1;
   */
  pagination?: PaginationRequest;

  /**
   * organization_id is the ID of the organization that contains the workspaces
   *
   * +required
   *
   * @generated from field: string organization_id = 2;
   */
  organizationId = "";

  /**
   * pinned indicates whether to list only pinned workspaces
   *
   * @generated from field: bool pinned = 3;
   */
  pinned = false;

  /**
   * search_term is a search term to filter workspaces by name
   *
   * @generated from field: string search_term = 4;
   */
  searchTerm = "";

  constructor(data?: PartialMessage<ListWorkspacesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.ListWorkspacesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PaginationRequest },
    { no: 2, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "search_term", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkspacesRequest {
    return new ListWorkspacesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkspacesRequest {
    return new ListWorkspacesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkspacesRequest {
    return new ListWorkspacesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkspacesRequest | PlainMessage<ListWorkspacesRequest> | undefined, b: ListWorkspacesRequest | PlainMessage<ListWorkspacesRequest> | undefined): boolean {
    return proto3.util.equals(ListWorkspacesRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.ListWorkspacesResponse
 */
export class ListWorkspacesResponse extends Message<ListWorkspacesResponse> {
  /**
   * pagination contains the pagination options for listing workspaces
   *
   * @generated from field: gitpod.v1.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponse;

  /**
   * workspaces are the workspaces that matched the query
   *
   * @generated from field: repeated gitpod.v1.Workspace workspaces = 2;
   */
  workspaces: Workspace[] = [];

  constructor(data?: PartialMessage<ListWorkspacesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.ListWorkspacesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PaginationResponse },
    { no: 2, name: "workspaces", kind: "message", T: Workspace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkspacesResponse {
    return new ListWorkspacesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkspacesResponse {
    return new ListWorkspacesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkspacesResponse {
    return new ListWorkspacesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkspacesResponse | PlainMessage<ListWorkspacesResponse> | undefined, b: ListWorkspacesResponse | PlainMessage<ListWorkspacesResponse> | undefined): boolean {
    return proto3.util.equals(ListWorkspacesResponse, a, b);
  }
}

/**
 * Required fields:
 * - metadata.organization_id
 * - metadata.configuration_id
 *
 * @generated from message gitpod.v1.CreateAndStartWorkspaceRequest
 */
export class CreateAndStartWorkspaceRequest extends Message<CreateAndStartWorkspaceRequest> {
  /**
   * metadata is data associated with this workspace that's required for other parts of Gitpod to function
   *
   * @generated from field: gitpod.v1.WorkspaceMetadata metadata = 1;
   */
  metadata?: WorkspaceMetadata;

  /**
   * @generated from oneof gitpod.v1.CreateAndStartWorkspaceRequest.source
   */
  source: {
    /**
     * context_url is the URL from which the workspace is created
     *
     * @generated from field: gitpod.v1.CreateAndStartWorkspaceRequest.ContextURL context_url = 2;
     */
    value: CreateAndStartWorkspaceRequest_ContextURL;
    case: "contextUrl";
  } | {
    /**
     * spec is the configuration of the workspace that's required for the to start the workspace
     *
     * @generated from field: gitpod.v1.WorkspaceSpec spec = 3;
     */
    value: WorkspaceSpec;
    case: "spec";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * force_default_config indicates that the workspace should be created with
   * the default configuration instead of the configuration provided in
   * `.gitpod.yml` file
   *
   * @generated from field: bool force_default_config = 4 [deprecated = true];
   * @deprecated
   */
  forceDefaultConfig = false;

  constructor(data?: PartialMessage<CreateAndStartWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.CreateAndStartWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: WorkspaceMetadata },
    { no: 2, name: "context_url", kind: "message", T: CreateAndStartWorkspaceRequest_ContextURL, oneof: "source" },
    { no: 3, name: "spec", kind: "message", T: WorkspaceSpec, oneof: "source" },
    { no: 4, name: "force_default_config", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAndStartWorkspaceRequest {
    return new CreateAndStartWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceRequest {
    return new CreateAndStartWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceRequest {
    return new CreateAndStartWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAndStartWorkspaceRequest | PlainMessage<CreateAndStartWorkspaceRequest> | undefined, b: CreateAndStartWorkspaceRequest | PlainMessage<CreateAndStartWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(CreateAndStartWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.CreateAndStartWorkspaceRequest.ContextURL
 */
export class CreateAndStartWorkspaceRequest_ContextURL extends Message<CreateAndStartWorkspaceRequest_ContextURL> {
  /**
   * url is the URL from which the workspace is created
   *
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * workspace_class is the class of the workspace we ought to start
   *
   * @generated from field: string workspace_class = 2;
   */
  workspaceClass = "";

  /**
   * editor specifies the editor that will be used with this workspace.
   *
   * @generated from field: gitpod.v1.EditorReference editor = 3;
   */
  editor?: EditorReference;

  constructor(data?: PartialMessage<CreateAndStartWorkspaceRequest_ContextURL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.CreateAndStartWorkspaceRequest.ContextURL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace_class", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "editor", kind: "message", T: EditorReference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAndStartWorkspaceRequest_ContextURL {
    return new CreateAndStartWorkspaceRequest_ContextURL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceRequest_ContextURL {
    return new CreateAndStartWorkspaceRequest_ContextURL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceRequest_ContextURL {
    return new CreateAndStartWorkspaceRequest_ContextURL().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAndStartWorkspaceRequest_ContextURL | PlainMessage<CreateAndStartWorkspaceRequest_ContextURL> | undefined, b: CreateAndStartWorkspaceRequest_ContextURL | PlainMessage<CreateAndStartWorkspaceRequest_ContextURL> | undefined): boolean {
    return proto3.util.equals(CreateAndStartWorkspaceRequest_ContextURL, a, b);
  }
}

/**
 * @generated from message gitpod.v1.CreateAndStartWorkspaceResponse
 */
export class CreateAndStartWorkspaceResponse extends Message<CreateAndStartWorkspaceResponse> {
  /**
   * @generated from field: gitpod.v1.Workspace workspace = 1;
   */
  workspace?: Workspace;

  constructor(data?: PartialMessage<CreateAndStartWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.CreateAndStartWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace", kind: "message", T: Workspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAndStartWorkspaceResponse {
    return new CreateAndStartWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceResponse {
    return new CreateAndStartWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceResponse {
    return new CreateAndStartWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAndStartWorkspaceResponse | PlainMessage<CreateAndStartWorkspaceResponse> | undefined, b: CreateAndStartWorkspaceResponse | PlainMessage<CreateAndStartWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(CreateAndStartWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.StartWorkspaceRequest
 */
export class StartWorkspaceRequest extends Message<StartWorkspaceRequest> {
  /**
   * workspace_id specifies the workspace that is going to start
   *
   * +required
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * @generated from field: bool force_default_config = 2 [deprecated = true];
   * @deprecated
   */
  forceDefaultConfig = false;

  constructor(data?: PartialMessage<StartWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.StartWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "force_default_config", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWorkspaceRequest {
    return new StartWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWorkspaceRequest {
    return new StartWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWorkspaceRequest {
    return new StartWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartWorkspaceRequest | PlainMessage<StartWorkspaceRequest> | undefined, b: StartWorkspaceRequest | PlainMessage<StartWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(StartWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.StartWorkspaceResponse
 */
export class StartWorkspaceResponse extends Message<StartWorkspaceResponse> {
  /**
   * @generated from field: gitpod.v1.Workspace workspace = 1;
   */
  workspace?: Workspace;

  constructor(data?: PartialMessage<StartWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.StartWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace", kind: "message", T: Workspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWorkspaceResponse {
    return new StartWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWorkspaceResponse {
    return new StartWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWorkspaceResponse {
    return new StartWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartWorkspaceResponse | PlainMessage<StartWorkspaceResponse> | undefined, b: StartWorkspaceResponse | PlainMessage<StartWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(StartWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.GetWorkspaceDefaultImageRequest
 */
export class GetWorkspaceDefaultImageRequest extends Message<GetWorkspaceDefaultImageRequest> {
  /**
   * workspace_id specifies the workspace to get default image
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<GetWorkspaceDefaultImageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetWorkspaceDefaultImageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceDefaultImageRequest {
    return new GetWorkspaceDefaultImageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceDefaultImageRequest {
    return new GetWorkspaceDefaultImageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceDefaultImageRequest {
    return new GetWorkspaceDefaultImageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceDefaultImageRequest | PlainMessage<GetWorkspaceDefaultImageRequest> | undefined, b: GetWorkspaceDefaultImageRequest | PlainMessage<GetWorkspaceDefaultImageRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceDefaultImageRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.GetWorkspaceDefaultImageResponse
 */
export class GetWorkspaceDefaultImageResponse extends Message<GetWorkspaceDefaultImageResponse> {
  /**
   * @generated from field: string default_workspace_image = 1;
   */
  defaultWorkspaceImage = "";

  /**
   * @generated from field: gitpod.v1.GetWorkspaceDefaultImageResponse.Source source = 2;
   */
  source = GetWorkspaceDefaultImageResponse_Source.UNSPECIFIED;

  constructor(data?: PartialMessage<GetWorkspaceDefaultImageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetWorkspaceDefaultImageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "default_workspace_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source", kind: "enum", T: proto3.getEnumType(GetWorkspaceDefaultImageResponse_Source) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceDefaultImageResponse {
    return new GetWorkspaceDefaultImageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceDefaultImageResponse {
    return new GetWorkspaceDefaultImageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceDefaultImageResponse {
    return new GetWorkspaceDefaultImageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceDefaultImageResponse | PlainMessage<GetWorkspaceDefaultImageResponse> | undefined, b: GetWorkspaceDefaultImageResponse | PlainMessage<GetWorkspaceDefaultImageResponse> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceDefaultImageResponse, a, b);
  }
}

/**
 * @generated from enum gitpod.v1.GetWorkspaceDefaultImageResponse.Source
 */
export enum GetWorkspaceDefaultImageResponse_Source {
  /**
   * @generated from enum value: SOURCE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SOURCE_INSTALLATION = 1;
   */
  INSTALLATION = 1,

  /**
   * @generated from enum value: SOURCE_ORGANIZATION = 2;
   */
  ORGANIZATION = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(GetWorkspaceDefaultImageResponse_Source)
proto3.util.setEnumType(GetWorkspaceDefaultImageResponse_Source, "gitpod.v1.GetWorkspaceDefaultImageResponse.Source", [
  { no: 0, name: "SOURCE_UNSPECIFIED" },
  { no: 1, name: "SOURCE_INSTALLATION" },
  { no: 2, name: "SOURCE_ORGANIZATION" },
]);

/**
 * @generated from message gitpod.v1.SendHeartBeatRequest
 */
export class SendHeartBeatRequest extends Message<SendHeartBeatRequest> {
  /**
   * workspace_id specifies the workspace to send heartbeat
   *
   * +required
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * disconnected indicates if the editor connection is disconnected.
   * If set to true, the workspace will be stopped after Timeout.disconnected.
   *
   * @generated from field: bool disconnected = 2;
   */
  disconnected = false;

  constructor(data?: PartialMessage<SendHeartBeatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.SendHeartBeatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "disconnected", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendHeartBeatRequest {
    return new SendHeartBeatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendHeartBeatRequest {
    return new SendHeartBeatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendHeartBeatRequest {
    return new SendHeartBeatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendHeartBeatRequest | PlainMessage<SendHeartBeatRequest> | undefined, b: SendHeartBeatRequest | PlainMessage<SendHeartBeatRequest> | undefined): boolean {
    return proto3.util.equals(SendHeartBeatRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.SendHeartBeatResponse
 */
export class SendHeartBeatResponse extends Message<SendHeartBeatResponse> {
  constructor(data?: PartialMessage<SendHeartBeatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.SendHeartBeatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendHeartBeatResponse {
    return new SendHeartBeatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendHeartBeatResponse {
    return new SendHeartBeatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendHeartBeatResponse {
    return new SendHeartBeatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendHeartBeatResponse | PlainMessage<SendHeartBeatResponse> | undefined, b: SendHeartBeatResponse | PlainMessage<SendHeartBeatResponse> | undefined): boolean {
    return proto3.util.equals(SendHeartBeatResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.GetWorkspaceOwnerTokenRequest
 */
export class GetWorkspaceOwnerTokenRequest extends Message<GetWorkspaceOwnerTokenRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<GetWorkspaceOwnerTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetWorkspaceOwnerTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceOwnerTokenRequest {
    return new GetWorkspaceOwnerTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceOwnerTokenRequest {
    return new GetWorkspaceOwnerTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceOwnerTokenRequest {
    return new GetWorkspaceOwnerTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceOwnerTokenRequest | PlainMessage<GetWorkspaceOwnerTokenRequest> | undefined, b: GetWorkspaceOwnerTokenRequest | PlainMessage<GetWorkspaceOwnerTokenRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceOwnerTokenRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.GetWorkspaceOwnerTokenResponse
 */
export class GetWorkspaceOwnerTokenResponse extends Message<GetWorkspaceOwnerTokenResponse> {
  /**
   * @generated from field: string owner_token = 1;
   */
  ownerToken = "";

  constructor(data?: PartialMessage<GetWorkspaceOwnerTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetWorkspaceOwnerTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceOwnerTokenResponse {
    return new GetWorkspaceOwnerTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceOwnerTokenResponse {
    return new GetWorkspaceOwnerTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceOwnerTokenResponse {
    return new GetWorkspaceOwnerTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceOwnerTokenResponse | PlainMessage<GetWorkspaceOwnerTokenResponse> | undefined, b: GetWorkspaceOwnerTokenResponse | PlainMessage<GetWorkspaceOwnerTokenResponse> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceOwnerTokenResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.GetWorkspaceEditorCredentialsRequest
 */
export class GetWorkspaceEditorCredentialsRequest extends Message<GetWorkspaceEditorCredentialsRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<GetWorkspaceEditorCredentialsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetWorkspaceEditorCredentialsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceEditorCredentialsRequest {
    return new GetWorkspaceEditorCredentialsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceEditorCredentialsRequest {
    return new GetWorkspaceEditorCredentialsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceEditorCredentialsRequest {
    return new GetWorkspaceEditorCredentialsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceEditorCredentialsRequest | PlainMessage<GetWorkspaceEditorCredentialsRequest> | undefined, b: GetWorkspaceEditorCredentialsRequest | PlainMessage<GetWorkspaceEditorCredentialsRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceEditorCredentialsRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.GetWorkspaceEditorCredentialsResponse
 */
export class GetWorkspaceEditorCredentialsResponse extends Message<GetWorkspaceEditorCredentialsResponse> {
  /**
   * @generated from field: string editor_credentials = 1;
   */
  editorCredentials = "";

  constructor(data?: PartialMessage<GetWorkspaceEditorCredentialsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetWorkspaceEditorCredentialsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "editor_credentials", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceEditorCredentialsResponse {
    return new GetWorkspaceEditorCredentialsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceEditorCredentialsResponse {
    return new GetWorkspaceEditorCredentialsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceEditorCredentialsResponse {
    return new GetWorkspaceEditorCredentialsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceEditorCredentialsResponse | PlainMessage<GetWorkspaceEditorCredentialsResponse> | undefined, b: GetWorkspaceEditorCredentialsResponse | PlainMessage<GetWorkspaceEditorCredentialsResponse> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceEditorCredentialsResponse, a, b);
  }
}

/**
 * +resource get workspace
 *
 * @generated from message gitpod.v1.Workspace
 */
export class Workspace extends Message<Workspace> {
  /**
   * ID is a unique identifier of this workspace. No other workspace with the same name must be managed by this workspace manager
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Metadata is data associated with this workspace that's required for other parts of Gitpod to function
   *
   * @generated from field: gitpod.v1.WorkspaceMetadata metadata = 2;
   */
  metadata?: WorkspaceMetadata;

  /**
   * Spec is the configuration of the workspace that's required for the ws-manager to start the workspace
   *
   * @generated from field: gitpod.v1.WorkspaceSpec spec = 3;
   */
  spec?: WorkspaceSpec;

  /**
   * Status is the current status of the workspace
   *
   * @generated from field: gitpod.v1.WorkspaceStatus status = 4;
   */
  status?: WorkspaceStatus;

  constructor(data?: PartialMessage<Workspace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.Workspace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: WorkspaceMetadata },
    { no: 3, name: "spec", kind: "message", T: WorkspaceSpec },
    { no: 4, name: "status", kind: "message", T: WorkspaceStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workspace {
    return new Workspace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJsonString(jsonString, options);
  }

  static equals(a: Workspace | PlainMessage<Workspace> | undefined, b: Workspace | PlainMessage<Workspace> | undefined): boolean {
    return proto3.util.equals(Workspace, a, b);
  }
}

/**
 * WorkspaceMetadata is data associated with a workspace that's required for other parts of the system to function
 *
 * @generated from message gitpod.v1.WorkspaceMetadata
 */
export class WorkspaceMetadata extends Message<WorkspaceMetadata> {
  /**
   * owner_id is the ID of the Gitpod user to whom we'll bill this workspace and who we consider responsible for its content
   *
   * @generated from field: string owner_id = 1;
   */
  ownerId = "";

  /**
   * organization_id is the ID of the organization that contains the workspace
   *
   * @generated from field: string organization_id = 2;
   */
  organizationId = "";

  /**
   * configuration_id is the ID of the configuration used by this workspace
   *
   * @generated from field: string configuration_id = 3;
   */
  configurationId = "";

  /**
   * annotations are key/value pairs that gets attached to the workspace.
   * +internal - not yet implemented
   *
   * @generated from field: map<string, string> annotations = 4;
   */
  annotations: { [key: string]: string } = {};

  /**
   * name is the name of the workspace as specified by the user
   *
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * pinned indicates whether the workspace is pinned
   *
   * @generated from field: bool pinned = 6;
   */
  pinned = false;

  /**
   * original_context_url is the normalized URL from which the workspace was created
   *
   * @generated from field: string original_context_url = 7;
   */
  originalContextUrl = "";

  constructor(data?: PartialMessage<WorkspaceMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "configuration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "original_context_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceMetadata {
    return new WorkspaceMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceMetadata {
    return new WorkspaceMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceMetadata {
    return new WorkspaceMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceMetadata | PlainMessage<WorkspaceMetadata> | undefined, b: WorkspaceMetadata | PlainMessage<WorkspaceMetadata> | undefined): boolean {
    return proto3.util.equals(WorkspaceMetadata, a, b);
  }
}

/**
 * WorkspaceSpec specifies the configuration of a workspace for a workspace start
 *
 * @generated from message gitpod.v1.WorkspaceSpec
 */
export class WorkspaceSpec extends Message<WorkspaceSpec> {
  /**
   * initializer configures how the workspace is to be initialized
   *
   * @generated from field: gitpod.v1.WorkspaceInitializer initializer = 1;
   */
  initializer?: WorkspaceInitializer;

  /**
   * Type denots the kind of workspace we ought to start
   *
   * @generated from field: gitpod.v1.WorkspaceSpec.WorkspaceType type = 2;
   */
  type = WorkspaceSpec_WorkspaceType.UNSPECIFIED;

  /**
   * ports is the set of ports which ought to be exposed to the internet
   *
   * @generated from field: repeated gitpod.v1.WorkspacePort ports = 3;
   */
  ports: WorkspacePort[] = [];

  /**
   * envvars are user-defined environment variables which ought to be available in the workspace (shim'ed environment)
   *
   * @generated from field: repeated gitpod.v1.EnvironmentVariable environment_variables = 4;
   */
  environmentVariables: EnvironmentVariable[] = [];

  /**
   * Git configures the Git user in the workspace
   *
   * @generated from field: gitpod.v1.WorkspaceSpec.GitSpec git = 5;
   */
  git?: WorkspaceSpec_GitSpec;

  /**
   * Timeout configures the workspace timeout
   *
   * @generated from field: gitpod.v1.WorkspaceSpec.Timeout timeout = 6;
   */
  timeout?: WorkspaceSpec_Timeout;

  /**
   * admission controlls who can access the workspace and its ports.
   *
   * @generated from field: gitpod.v1.AdmissionLevel admission = 7;
   */
  admission = AdmissionLevel.UNSPECIFIED;

  /**
   * Class denotes the class of the workspace we ought to start
   *
   * @generated from field: string class = 8;
   */
  class = "";

  /**
   * ssh_public_keys is user's uploaded ssh public keys
   *
   * @generated from field: repeated string ssh_public_keys = 9;
   */
  sshPublicKeys: string[] = [];

  /**
   * subassembly_references is a list of workspace IDs that this workspace depends on.
   * For example:
   *   index.docker.io/gitpod-io/subassmeblies/code:latest
   *
   * @generated from field: repeated string subassembly_references = 10;
   */
  subassemblyReferences: string[] = [];

  /**
   * last_user_activity is the time when the user last interacted with the workspace
   *
   * @generated from field: google.protobuf.Timestamp last_user_activity = 11;
   */
  lastUserActivity?: Timestamp;

  /**
   * log_url is the URL where we stream the workspace's logs to.
   * Can be changed when the workspace is PENDING or STOPPED.
   *
   * @generated from field: string log_url = 12;
   */
  logUrl = "";

  /**
   * @generated from field: gitpod.v1.EditorReference editor = 13;
   */
  editor?: EditorReference;

  constructor(data?: PartialMessage<WorkspaceSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "initializer", kind: "message", T: WorkspaceInitializer },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(WorkspaceSpec_WorkspaceType) },
    { no: 3, name: "ports", kind: "message", T: WorkspacePort, repeated: true },
    { no: 4, name: "environment_variables", kind: "message", T: EnvironmentVariable, repeated: true },
    { no: 5, name: "git", kind: "message", T: WorkspaceSpec_GitSpec },
    { no: 6, name: "timeout", kind: "message", T: WorkspaceSpec_Timeout },
    { no: 7, name: "admission", kind: "enum", T: proto3.getEnumType(AdmissionLevel) },
    { no: 8, name: "class", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "ssh_public_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "subassembly_references", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "last_user_activity", kind: "message", T: Timestamp },
    { no: 12, name: "log_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "editor", kind: "message", T: EditorReference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceSpec {
    return new WorkspaceSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceSpec {
    return new WorkspaceSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceSpec {
    return new WorkspaceSpec().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceSpec | PlainMessage<WorkspaceSpec> | undefined, b: WorkspaceSpec | PlainMessage<WorkspaceSpec> | undefined): boolean {
    return proto3.util.equals(WorkspaceSpec, a, b);
  }
}

/**
 * WorkspaceType specifies the purpose/use of a workspace. Different workspace types are handled differently by all parts of the system.
 *
 * @generated from enum gitpod.v1.WorkspaceSpec.WorkspaceType
 */
export enum WorkspaceSpec_WorkspaceType {
  /**
   * @generated from enum value: WORKSPACE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Regular workspaces are your off-the-mill workspaces intended for users. They are directly user-facing and hence are most important.
   *
   * @generated from enum value: WORKSPACE_TYPE_REGULAR = 1;
   */
  REGULAR = 1,

  /**
   * Prebuild workspaces are workspaces used to pre-build the content of other workspaces. They run headless and have no direct user-interaction.
   *
   * @generated from enum value: WORKSPACE_TYPE_PREBUILD = 2;
   */
  PREBUILD = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkspaceSpec_WorkspaceType)
proto3.util.setEnumType(WorkspaceSpec_WorkspaceType, "gitpod.v1.WorkspaceSpec.WorkspaceType", [
  { no: 0, name: "WORKSPACE_TYPE_UNSPECIFIED" },
  { no: 1, name: "WORKSPACE_TYPE_REGULAR" },
  { no: 2, name: "WORKSPACE_TYPE_PREBUILD" },
]);

/**
 * Timeout configures the workspace timeout
 *
 * @generated from message gitpod.v1.WorkspaceSpec.Timeout
 */
export class WorkspaceSpec_Timeout extends Message<WorkspaceSpec_Timeout> {
  /**
   * inacitivity is the maximum time of inactivity before the workspace is stopped or paused
   *
   * @generated from field: google.protobuf.Duration inactivity = 1;
   */
  inactivity?: Duration;

  /**
   * inacitivity is the maximum time of disconnection before the workspace is stopped or paused
   * set to zero to disable.
   *
   * @generated from field: google.protobuf.Duration disconnected = 2;
   */
  disconnected?: Duration;

  /**
   * maximum lifetime of the workspace
   *
   * @generated from field: google.protobuf.Duration maximum_lifetime = 3;
   */
  maximumLifetime?: Duration;

  constructor(data?: PartialMessage<WorkspaceSpec_Timeout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceSpec.Timeout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inactivity", kind: "message", T: Duration },
    { no: 2, name: "disconnected", kind: "message", T: Duration },
    { no: 3, name: "maximum_lifetime", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceSpec_Timeout {
    return new WorkspaceSpec_Timeout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceSpec_Timeout {
    return new WorkspaceSpec_Timeout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceSpec_Timeout {
    return new WorkspaceSpec_Timeout().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceSpec_Timeout | PlainMessage<WorkspaceSpec_Timeout> | undefined, b: WorkspaceSpec_Timeout | PlainMessage<WorkspaceSpec_Timeout> | undefined): boolean {
    return proto3.util.equals(WorkspaceSpec_Timeout, a, b);
  }
}

/**
 * GitSpec configures the Git available within the workspace
 *
 * @generated from message gitpod.v1.WorkspaceSpec.GitSpec
 */
export class WorkspaceSpec_GitSpec extends Message<WorkspaceSpec_GitSpec> {
  /**
   * The Git username
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * The Git email address
   *
   * @generated from field: string email = 2;
   */
  email = "";

  constructor(data?: PartialMessage<WorkspaceSpec_GitSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceSpec.GitSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceSpec_GitSpec {
    return new WorkspaceSpec_GitSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceSpec_GitSpec {
    return new WorkspaceSpec_GitSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceSpec_GitSpec {
    return new WorkspaceSpec_GitSpec().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceSpec_GitSpec | PlainMessage<WorkspaceSpec_GitSpec> | undefined, b: WorkspaceSpec_GitSpec | PlainMessage<WorkspaceSpec_GitSpec> | undefined): boolean {
    return proto3.util.equals(WorkspaceSpec_GitSpec, a, b);
  }
}

/**
 * WorkspaceStatus describes a workspace status
 *
 * @generated from message gitpod.v1.WorkspaceStatus
 */
export class WorkspaceStatus extends Message<WorkspaceStatus> {
  /**
   * version of the status update. Workspace instances themselves are unversioned,
   * but their statuus has different versions.
   * The value of this field has no semantic meaning (e.g. don't interpret it as
   * as a timestemp), but it can be used to impose a partial order.
   * If a.status_version < b.status_version then a was the status before b.
   *
   * @generated from field: uint64 status_version = 1;
   */
  statusVersion = protoInt64.zero;

  /**
   * the phase of a workspace is a simple, high-level summary of where the workspace is in its lifecycle
   *
   * @generated from field: gitpod.v1.WorkspacePhase phase = 2;
   */
  phase?: WorkspacePhase;

  /**
   * workspace_url contains the URL at which the workspace can be accessed.
   * This field is only set if the workspace is running.
   *
   * @generated from field: string workspace_url = 3;
   */
  workspaceUrl = "";

  /**
   * conditions detail the current state of the workspace
   *
   * @generated from field: gitpod.v1.WorkspaceStatus.WorkspaceConditions conditions = 4;
   */
  conditions?: WorkspaceStatus_WorkspaceConditions;

  /**
   * prebuild_result contains the result of a prebuild. Only if the workspace is
   *
   * @generated from field: gitpod.v1.WorkspaceStatus.PrebuildResult prebuild_result = 5;
   */
  prebuildResult?: WorkspaceStatus_PrebuildResult;

  /**
   * git_status details the Git working copy status of the workspace.
   * Note: this is a best-effort field and more often than not will not be present. Its absence does not
   * indicate the absence of a working copy.
   *
   * @generated from field: gitpod.v1.WorkspaceGitStatus git_status = 6;
   */
  gitStatus?: WorkspaceGitStatus;

  /**
   * instance_id is the ID of the workspace instance - do not use, interpret or rely on this field
   * unless you know what you're doing.
   *
   * @generated from field: string instance_id = 7 [deprecated = true];
   * @deprecated
   */
  instanceId = "";

  constructor(data?: PartialMessage<WorkspaceStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "phase", kind: "message", T: WorkspacePhase },
    { no: 3, name: "workspace_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "conditions", kind: "message", T: WorkspaceStatus_WorkspaceConditions },
    { no: 5, name: "prebuild_result", kind: "message", T: WorkspaceStatus_PrebuildResult },
    { no: 6, name: "git_status", kind: "message", T: WorkspaceGitStatus },
    { no: 7, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceStatus {
    return new WorkspaceStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceStatus {
    return new WorkspaceStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceStatus {
    return new WorkspaceStatus().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceStatus | PlainMessage<WorkspaceStatus> | undefined, b: WorkspaceStatus | PlainMessage<WorkspaceStatus> | undefined): boolean {
    return proto3.util.equals(WorkspaceStatus, a, b);
  }
}

/**
 * WorkspaceCondition gives more detailed information as to the state of the workspace. Which condition actually
 * has a value depends on the phase the workspace is in.
 *
 * @generated from message gitpod.v1.WorkspaceStatus.WorkspaceConditions
 */
export class WorkspaceStatus_WorkspaceConditions extends Message<WorkspaceStatus_WorkspaceConditions> {
  /**
   * failed contains the reason the workspace failed to operate. If this field is empty, the workspace has not failed.
   *
   * @generated from field: string failed = 1;
   */
  failed = "";

  /**
   * failed_reason contains the reason the workspace failed to operate.
   * This field is only set if the workspace has failed.
   *
   * @generated from field: gitpod.v1.WorkspaceStatus.WorkspaceConditions.FailedReason failed_reason = 2;
   */
  failedReason = WorkspaceStatus_WorkspaceConditions_FailedReason.UNSPECIFIED;

  /**
   * timeout contains the reason the workspace has timed out. If this field is empty, the workspace has not timed out.
   *
   * @generated from field: string timeout = 3;
   */
  timeout = "";

  constructor(data?: PartialMessage<WorkspaceStatus_WorkspaceConditions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceStatus.WorkspaceConditions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "failed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "failed_reason", kind: "enum", T: proto3.getEnumType(WorkspaceStatus_WorkspaceConditions_FailedReason) },
    { no: 3, name: "timeout", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceStatus_WorkspaceConditions {
    return new WorkspaceStatus_WorkspaceConditions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceStatus_WorkspaceConditions {
    return new WorkspaceStatus_WorkspaceConditions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceStatus_WorkspaceConditions {
    return new WorkspaceStatus_WorkspaceConditions().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceStatus_WorkspaceConditions | PlainMessage<WorkspaceStatus_WorkspaceConditions> | undefined, b: WorkspaceStatus_WorkspaceConditions | PlainMessage<WorkspaceStatus_WorkspaceConditions> | undefined): boolean {
    return proto3.util.equals(WorkspaceStatus_WorkspaceConditions, a, b);
  }
}

/**
 * @generated from enum gitpod.v1.WorkspaceStatus.WorkspaceConditions.FailedReason
 */
export enum WorkspaceStatus_WorkspaceConditions_FailedReason {
  /**
   * @generated from enum value: FAILED_REASON_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FAILED_REASON_CONTENT_INITIALIZATION_FAILED = 1;
   */
  CONTENT_INITIALIZATION_FAILED = 1,

  /**
   * @generated from enum value: FAILED_REASON_BACKUP_FAILED = 2;
   */
  BACKUP_FAILED = 2,

  /**
   * @generated from enum value: FAILED_REASON_IMAGE_PULL_FAILURE = 3;
   */
  IMAGE_PULL_FAILURE = 3,

  /**
   * @generated from enum value: FAILED_REASON_UNEXPECTED_TERMINATION = 4;
   */
  UNEXPECTED_TERMINATION = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkspaceStatus_WorkspaceConditions_FailedReason)
proto3.util.setEnumType(WorkspaceStatus_WorkspaceConditions_FailedReason, "gitpod.v1.WorkspaceStatus.WorkspaceConditions.FailedReason", [
  { no: 0, name: "FAILED_REASON_UNSPECIFIED" },
  { no: 1, name: "FAILED_REASON_CONTENT_INITIALIZATION_FAILED" },
  { no: 2, name: "FAILED_REASON_BACKUP_FAILED" },
  { no: 3, name: "FAILED_REASON_IMAGE_PULL_FAILURE" },
  { no: 4, name: "FAILED_REASON_UNEXPECTED_TERMINATION" },
]);

/**
 * @generated from message gitpod.v1.WorkspaceStatus.PrebuildResult
 */
export class WorkspaceStatus_PrebuildResult extends Message<WorkspaceStatus_PrebuildResult> {
  /**
   * Snapshot points to the content of the prebuild. This string is opaque to the cluster manager,
   * and must be returned unaltered.
   *
   * @generated from field: string snapshot = 1;
   */
  snapshot = "";

  /**
   * The prebuild's error message
   *
   * @generated from field: string error_message = 2;
   */
  errorMessage = "";

  constructor(data?: PartialMessage<WorkspaceStatus_PrebuildResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceStatus.PrebuildResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshot", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceStatus_PrebuildResult {
    return new WorkspaceStatus_PrebuildResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceStatus_PrebuildResult {
    return new WorkspaceStatus_PrebuildResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceStatus_PrebuildResult {
    return new WorkspaceStatus_PrebuildResult().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceStatus_PrebuildResult | PlainMessage<WorkspaceStatus_PrebuildResult> | undefined, b: WorkspaceStatus_PrebuildResult | PlainMessage<WorkspaceStatus_PrebuildResult> | undefined): boolean {
    return proto3.util.equals(WorkspaceStatus_PrebuildResult, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WorkspacePort
 */
export class WorkspacePort extends Message<WorkspacePort> {
  /**
   * port number
   *
   * @generated from field: uint64 port = 1;
   */
  port = protoInt64.zero;

  /**
   * policy of this port
   *
   * @generated from field: gitpod.v1.AdmissionLevel admission = 2;
   */
  admission = AdmissionLevel.UNSPECIFIED;

  /**
   * url that can be used to access the port
   *
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * backend protocol of this port
   *
   * @generated from field: gitpod.v1.WorkspacePort.Protocol protocol = 4;
   */
  protocol = WorkspacePort_Protocol.UNSPECIFIED;

  constructor(data?: PartialMessage<WorkspacePort>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspacePort";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "admission", kind: "enum", T: proto3.getEnumType(AdmissionLevel) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "protocol", kind: "enum", T: proto3.getEnumType(WorkspacePort_Protocol) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspacePort {
    return new WorkspacePort().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspacePort {
    return new WorkspacePort().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspacePort {
    return new WorkspacePort().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspacePort | PlainMessage<WorkspacePort> | undefined, b: WorkspacePort | PlainMessage<WorkspacePort> | undefined): boolean {
    return proto3.util.equals(WorkspacePort, a, b);
  }
}

/**
 * Protocol defines the backend protocol of port
 *
 * @generated from enum gitpod.v1.WorkspacePort.Protocol
 */
export enum WorkspacePort_Protocol {
  /**
   * @generated from enum value: PROTOCOL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Http means the port backend is http
   *
   * @generated from enum value: PROTOCOL_HTTP = 1;
   */
  HTTP = 1,

  /**
   * Https means the port backend is https
   *
   * @generated from enum value: PROTOCOL_HTTPS = 2;
   */
  HTTPS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkspacePort_Protocol)
proto3.util.setEnumType(WorkspacePort_Protocol, "gitpod.v1.WorkspacePort.Protocol", [
  { no: 0, name: "PROTOCOL_UNSPECIFIED" },
  { no: 1, name: "PROTOCOL_HTTP" },
  { no: 2, name: "PROTOCOL_HTTPS" },
]);

/**
 * @generated from message gitpod.v1.WorkspaceGitStatus
 */
export class WorkspaceGitStatus extends Message<WorkspaceGitStatus> {
  /**
   * clone_url is the repository url as you would pass it to "git clone".
   * Only HTTPS clone URLs are supported.
   *
   * @generated from field: string clone_url = 1;
   */
  cloneUrl = "";

  /**
   * branch is branch we're currently on
   *
   * @generated from field: string branch = 2;
   */
  branch = "";

  /**
   * latest_commit is the most recent commit on the current branch
   *
   * @generated from field: string latest_commit = 3;
   */
  latestCommit = "";

  /**
   * uncommited_files is an array of uncommitted files, possibly truncated
   *
   * @generated from field: repeated string uncommited_files = 4;
   */
  uncommitedFiles: string[] = [];

  /**
   * the total number of uncommited files
   *
   * @generated from field: int32 total_uncommited_files = 5;
   */
  totalUncommitedFiles = 0;

  /**
   * untracked_files is an array of untracked files in the workspace, possibly
   * truncated
   *
   * @generated from field: repeated string untracked_files = 6;
   */
  untrackedFiles: string[] = [];

  /**
   * the total number of untracked files
   *
   * @generated from field: int32 total_untracked_files = 7;
   */
  totalUntrackedFiles = 0;

  /**
   * unpushed_commits is an array of unpushed changes in the workspace, possibly
   * truncated
   *
   * @generated from field: repeated string unpushed_commits = 8;
   */
  unpushedCommits: string[] = [];

  /**
   * the total number of unpushed changes
   *
   * @generated from field: int32 total_unpushed_commits = 9;
   */
  totalUnpushedCommits = 0;

  constructor(data?: PartialMessage<WorkspaceGitStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceGitStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clone_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "latest_commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "uncommited_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "total_uncommited_files", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "untracked_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "total_untracked_files", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "unpushed_commits", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "total_unpushed_commits", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceGitStatus {
    return new WorkspaceGitStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceGitStatus {
    return new WorkspaceGitStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceGitStatus {
    return new WorkspaceGitStatus().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceGitStatus | PlainMessage<WorkspaceGitStatus> | undefined, b: WorkspaceGitStatus | PlainMessage<WorkspaceGitStatus> | undefined): boolean {
    return proto3.util.equals(WorkspaceGitStatus, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WorkspacePhase
 */
export class WorkspacePhase extends Message<WorkspacePhase> {
  /**
   * @generated from field: gitpod.v1.WorkspacePhase.Phase name = 1;
   */
  name = WorkspacePhase_Phase.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp last_transition_time = 2;
   */
  lastTransitionTime?: Timestamp;

  constructor(data?: PartialMessage<WorkspacePhase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspacePhase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "enum", T: proto3.getEnumType(WorkspacePhase_Phase) },
    { no: 2, name: "last_transition_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspacePhase {
    return new WorkspacePhase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspacePhase {
    return new WorkspacePhase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspacePhase {
    return new WorkspacePhase().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspacePhase | PlainMessage<WorkspacePhase> | undefined, b: WorkspacePhase | PlainMessage<WorkspacePhase> | undefined): boolean {
    return proto3.util.equals(WorkspacePhase, a, b);
  }
}

/**
 * @generated from enum gitpod.v1.WorkspacePhase.Phase
 */
export enum WorkspacePhase_Phase {
  /**
   * Unknown indicates an issue within the workspace manager in that it cannot
   * determine the actual phase of a workspace. This phase is usually
   * accompanied by an error.
   *
   * @generated from enum value: PHASE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Preparing means that we haven't actually started the workspace instance
   * just yet, but rather are still preparing for launch.
   *
   * @generated from enum value: PHASE_PREPARING = 1;
   */
  PREPARING = 1,

  /**
   * ImageBuild indicates that there's an image build running for this
   * workspace.
   *
   * @generated from enum value: PHASE_IMAGEBUILD = 2;
   */
  IMAGEBUILD = 2,

  /**
   * Pending means the workspace does not yet consume resources in the
   * cluster, but rather is looking for some space within the cluster. If for
   * example the cluster needs to scale up to accomodate the workspace, the
   * workspace will be in Pending state until that happened.
   *
   * @generated from enum value: PHASE_PENDING = 3;
   */
  PENDING = 3,

  /**
   * Creating means the workspace is currently being created. That includes
   * downloading the images required to run the workspace over the network.
   * The time spent in this phase varies widely and depends on the current
   * network speed, image size and cache states.
   *
   * @generated from enum value: PHASE_CREATING = 4;
   */
  CREATING = 4,

  /**
   * Initializing is the phase in which the workspace is executing the
   * appropriate workspace initializer (e.g. Git clone or backup download).
   * After this phase one can expect the workspace to either be Running or
   * Failed.
   *
   * @generated from enum value: PHASE_INITIALIZING = 5;
   */
  INITIALIZING = 5,

  /**
   * Running means the workspace is able to actively perform work, either by
   * serving a user through Theia, or as a headless workspace.
   *
   * @generated from enum value: PHASE_RUNNING = 6;
   */
  RUNNING = 6,

  /**
   * Interrupted is an exceptional state where the container should be running
   * but is temporarily unavailable. When in this state, we expect it to
   * become running or stopping anytime soon.
   *
   * @generated from enum value: PHASE_INTERRUPTED = 7;
   */
  INTERRUPTED = 7,

  /**
   * Paused means the workspace is currently unavailable, akin to stopped,
   * but faster to wake up.
   *
   * @generated from enum value: PHASE_PAUSED = 8;
   */
  PAUSED = 8,

  /**
   * Stopping means that the workspace is currently shutting down. It could go
   * to stopped every moment.
   *
   * @generated from enum value: PHASE_STOPPING = 9;
   */
  STOPPING = 9,

  /**
   * Stopped means the workspace ended regularly because it was shut down.
   *
   * @generated from enum value: PHASE_STOPPED = 10;
   */
  STOPPED = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkspacePhase_Phase)
proto3.util.setEnumType(WorkspacePhase_Phase, "gitpod.v1.WorkspacePhase.Phase", [
  { no: 0, name: "PHASE_UNSPECIFIED" },
  { no: 1, name: "PHASE_PREPARING" },
  { no: 2, name: "PHASE_IMAGEBUILD" },
  { no: 3, name: "PHASE_PENDING" },
  { no: 4, name: "PHASE_CREATING" },
  { no: 5, name: "PHASE_INITIALIZING" },
  { no: 6, name: "PHASE_RUNNING" },
  { no: 7, name: "PHASE_INTERRUPTED" },
  { no: 8, name: "PHASE_PAUSED" },
  { no: 9, name: "PHASE_STOPPING" },
  { no: 10, name: "PHASE_STOPPED" },
]);

/**
 * WorkspaceInitializer specifies how a workspace is to be initialized
 *
 * @generated from message gitpod.v1.WorkspaceInitializer
 */
export class WorkspaceInitializer extends Message<WorkspaceInitializer> {
  /**
   * @generated from field: repeated gitpod.v1.WorkspaceInitializer.Spec specs = 1;
   */
  specs: WorkspaceInitializer_Spec[] = [];

  constructor(data?: PartialMessage<WorkspaceInitializer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceInitializer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "specs", kind: "message", T: WorkspaceInitializer_Spec, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceInitializer {
    return new WorkspaceInitializer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceInitializer {
    return new WorkspaceInitializer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceInitializer {
    return new WorkspaceInitializer().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceInitializer | PlainMessage<WorkspaceInitializer> | undefined, b: WorkspaceInitializer | PlainMessage<WorkspaceInitializer> | undefined): boolean {
    return proto3.util.equals(WorkspaceInitializer, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WorkspaceInitializer.Spec
 */
export class WorkspaceInitializer_Spec extends Message<WorkspaceInitializer_Spec> {
  /**
   * @generated from oneof gitpod.v1.WorkspaceInitializer.Spec.spec
   */
  spec: {
    /**
     * @generated from field: gitpod.v1.GitInitializer git = 1;
     */
    value: GitInitializer;
    case: "git";
  } | {
    /**
     * @generated from field: gitpod.v1.SnapshotInitializer snapshot = 2;
     */
    value: SnapshotInitializer;
    case: "snapshot";
  } | {
    /**
     * @generated from field: gitpod.v1.PrebuildInitializer prebuild = 3;
     */
    value: PrebuildInitializer;
    case: "prebuild";
  } | {
    /**
     * @generated from field: gitpod.v1.FileDownloadInitializer download = 4;
     */
    value: FileDownloadInitializer;
    case: "download";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<WorkspaceInitializer_Spec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceInitializer.Spec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "git", kind: "message", T: GitInitializer, oneof: "spec" },
    { no: 2, name: "snapshot", kind: "message", T: SnapshotInitializer, oneof: "spec" },
    { no: 3, name: "prebuild", kind: "message", T: PrebuildInitializer, oneof: "spec" },
    { no: 4, name: "download", kind: "message", T: FileDownloadInitializer, oneof: "spec" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceInitializer_Spec {
    return new WorkspaceInitializer_Spec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceInitializer_Spec {
    return new WorkspaceInitializer_Spec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceInitializer_Spec {
    return new WorkspaceInitializer_Spec().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceInitializer_Spec | PlainMessage<WorkspaceInitializer_Spec> | undefined, b: WorkspaceInitializer_Spec | PlainMessage<WorkspaceInitializer_Spec> | undefined): boolean {
    return proto3.util.equals(WorkspaceInitializer_Spec, a, b);
  }
}

/**
 * @generated from message gitpod.v1.GitInitializer
 */
export class GitInitializer extends Message<GitInitializer> {
  /**
   * remote_uri is the Git remote origin
   *
   * @generated from field: string remote_uri = 1;
   */
  remoteUri = "";

  /**
   * upstream_Remote_uri is the fork upstream of a repository
   *
   * @generated from field: string upstream_remote_uri = 2;
   */
  upstreamRemoteUri = "";

  /**
   * the target mode determines what gets checked out
   *
   * @generated from field: gitpod.v1.GitInitializer.CloneTargetMode target_mode = 3;
   */
  targetMode = GitInitializer_CloneTargetMode.UNSPECIFIED;

  /**
   * the value for the clone target mode - use depends on the target mode
   *
   * @generated from field: string clone_target = 4;
   */
  cloneTarget = "";

  /**
   * a path relative to the workspace root in which the code will be checked out to
   *
   * @generated from field: string checkout_location = 5;
   */
  checkoutLocation = "";

  /**
   * config specifies the Git configuration for this workspace
   *
   * @generated from field: gitpod.v1.GitInitializer.GitConfig config = 6;
   */
  config?: GitInitializer_GitConfig;

  constructor(data?: PartialMessage<GitInitializer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GitInitializer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "remote_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "upstream_remote_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "target_mode", kind: "enum", T: proto3.getEnumType(GitInitializer_CloneTargetMode) },
    { no: 4, name: "clone_target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "checkout_location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "config", kind: "message", T: GitInitializer_GitConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitInitializer {
    return new GitInitializer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitInitializer {
    return new GitInitializer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitInitializer {
    return new GitInitializer().fromJsonString(jsonString, options);
  }

  static equals(a: GitInitializer | PlainMessage<GitInitializer> | undefined, b: GitInitializer | PlainMessage<GitInitializer> | undefined): boolean {
    return proto3.util.equals(GitInitializer, a, b);
  }
}

/**
 * CloneTargetMode is the target state in which we want to leave a GitWorkspace
 *
 * @generated from enum gitpod.v1.GitInitializer.CloneTargetMode
 */
export enum GitInitializer_CloneTargetMode {
  /**
   * @generated from enum value: CLONE_TARGET_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * REMOTE_HEAD has the local WS point at the remote branch head
   *
   * @generated from enum value: CLONE_TARGET_MODE_REMOTE_HEAD = 1;
   */
  REMOTE_HEAD = 1,

  /**
   * REMOTE_COMMIT has the local WS point at a specific commit
   *
   * @generated from enum value: CLONE_TARGET_MODE_REMOTE_COMMIT = 2;
   */
  REMOTE_COMMIT = 2,

  /**
   * REMOTE_BRANCH has the local WS point at a remote branch
   *
   * @generated from enum value: CLONE_TARGET_MODE_REMOTE_BRANCH = 3;
   */
  REMOTE_BRANCH = 3,

  /**
   * LOCAL_BRANCH creates a local branch in the workspace
   *
   * @generated from enum value: CLONE_TARGET_MODE_LOCAL_BRANCH = 4;
   */
  LOCAL_BRANCH = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(GitInitializer_CloneTargetMode)
proto3.util.setEnumType(GitInitializer_CloneTargetMode, "gitpod.v1.GitInitializer.CloneTargetMode", [
  { no: 0, name: "CLONE_TARGET_MODE_UNSPECIFIED" },
  { no: 1, name: "CLONE_TARGET_MODE_REMOTE_HEAD" },
  { no: 2, name: "CLONE_TARGET_MODE_REMOTE_COMMIT" },
  { no: 3, name: "CLONE_TARGET_MODE_REMOTE_BRANCH" },
  { no: 4, name: "CLONE_TARGET_MODE_LOCAL_BRANCH" },
]);

/**
 * AuthMethod is the means of authentication used during clone
 *
 * @generated from enum gitpod.v1.GitInitializer.AuthMethod
 */
export enum GitInitializer_AuthMethod {
  /**
   * NO_AUTH disables authentication during clone
   *
   * @generated from enum value: AUTH_METHOD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * BASIC_AUTH uses HTTP basic auth during clone (fails if repo is not cloned through http)
   *
   * @generated from enum value: AUTH_METHOD_BASIC_AUTH = 1;
   */
  BASIC_AUTH = 1,

  /**
   * BASIC_AUTH_OTS uses HTTP basic auth during the clone with the secrets coming from the OTS URL.
   * Fails if either the OTS download or the clone fail.
   *
   * @generated from enum value: AUTH_METHOD_BASIC_AUTH_OTS = 2;
   */
  BASIC_AUTH_OTS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(GitInitializer_AuthMethod)
proto3.util.setEnumType(GitInitializer_AuthMethod, "gitpod.v1.GitInitializer.AuthMethod", [
  { no: 0, name: "AUTH_METHOD_UNSPECIFIED" },
  { no: 1, name: "AUTH_METHOD_BASIC_AUTH" },
  { no: 2, name: "AUTH_METHOD_BASIC_AUTH_OTS" },
]);

/**
 * @generated from message gitpod.v1.GitInitializer.GitConfig
 */
export class GitInitializer_GitConfig extends Message<GitInitializer_GitConfig> {
  /**
   * custom config values to be set on clone provided through `.gitpod.yml`
   *
   * @generated from field: map<string, string> custom_config = 1;
   */
  customConfig: { [key: string]: string } = {};

  /**
   * authentication method
   *
   * @generated from field: gitpod.v1.GitInitializer.AuthMethod authentication = 2;
   */
  authentication = GitInitializer_AuthMethod.UNSPECIFIED;

  /**
   * auth_user is the username used to authenticate the clone
   *
   * @generated from field: string auth_user = 3;
   */
  authUser = "";

  /**
   * auth_password is the password used to authenticate the clone (can also be an API token)
   *
   * @generated from field: string auth_password = 4;
   */
  authPassword = "";

  /**
   * auth_ots is a URL where one can download the authentication secret (<username>:<password>)
   * using a GET request.
   *
   * @generated from field: string auth_ots = 5;
   */
  authOts = "";

  constructor(data?: PartialMessage<GitInitializer_GitConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GitInitializer.GitConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "custom_config", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 2, name: "authentication", kind: "enum", T: proto3.getEnumType(GitInitializer_AuthMethod) },
    { no: 3, name: "auth_user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "auth_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "auth_ots", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitInitializer_GitConfig {
    return new GitInitializer_GitConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitInitializer_GitConfig {
    return new GitInitializer_GitConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitInitializer_GitConfig {
    return new GitInitializer_GitConfig().fromJsonString(jsonString, options);
  }

  static equals(a: GitInitializer_GitConfig | PlainMessage<GitInitializer_GitConfig> | undefined, b: GitInitializer_GitConfig | PlainMessage<GitInitializer_GitConfig> | undefined): boolean {
    return proto3.util.equals(GitInitializer_GitConfig, a, b);
  }
}

/**
 * @generated from message gitpod.v1.SnapshotInitializer
 */
export class SnapshotInitializer extends Message<SnapshotInitializer> {
  /**
   * reference of the snapshot to restore
   *
   * @generated from field: string snapshot_id = 1;
   */
  snapshotId = "";

  constructor(data?: PartialMessage<SnapshotInitializer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.SnapshotInitializer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshot_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SnapshotInitializer {
    return new SnapshotInitializer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SnapshotInitializer {
    return new SnapshotInitializer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SnapshotInitializer {
    return new SnapshotInitializer().fromJsonString(jsonString, options);
  }

  static equals(a: SnapshotInitializer | PlainMessage<SnapshotInitializer> | undefined, b: SnapshotInitializer | PlainMessage<SnapshotInitializer> | undefined): boolean {
    return proto3.util.equals(SnapshotInitializer, a, b);
  }
}

/**
 * @generated from message gitpod.v1.PrebuildInitializer
 */
export class PrebuildInitializer extends Message<PrebuildInitializer> {
  /**
   * reference of the prebuild to restore
   *
   * @generated from field: string prebuild_id = 1;
   */
  prebuildId = "";

  constructor(data?: PartialMessage<PrebuildInitializer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.PrebuildInitializer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prebuild_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrebuildInitializer {
    return new PrebuildInitializer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrebuildInitializer {
    return new PrebuildInitializer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrebuildInitializer {
    return new PrebuildInitializer().fromJsonString(jsonString, options);
  }

  static equals(a: PrebuildInitializer | PlainMessage<PrebuildInitializer> | undefined, b: PrebuildInitializer | PlainMessage<PrebuildInitializer> | undefined): boolean {
    return proto3.util.equals(PrebuildInitializer, a, b);
  }
}

/**
 * FileDownloadInitializer downloads files and uses them as workspace content.
 *
 * @generated from message gitpod.v1.FileDownloadInitializer
 */
export class FileDownloadInitializer extends Message<FileDownloadInitializer> {
  /**
   * @generated from field: repeated gitpod.v1.FileDownloadInitializer.FileInfo files = 1;
   */
  files: FileDownloadInitializer_FileInfo[] = [];

  /**
   * @generated from field: string target_location = 2;
   */
  targetLocation = "";

  constructor(data?: PartialMessage<FileDownloadInitializer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.FileDownloadInitializer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "files", kind: "message", T: FileDownloadInitializer_FileInfo, repeated: true },
    { no: 2, name: "target_location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileDownloadInitializer {
    return new FileDownloadInitializer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileDownloadInitializer {
    return new FileDownloadInitializer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileDownloadInitializer {
    return new FileDownloadInitializer().fromJsonString(jsonString, options);
  }

  static equals(a: FileDownloadInitializer | PlainMessage<FileDownloadInitializer> | undefined, b: FileDownloadInitializer | PlainMessage<FileDownloadInitializer> | undefined): boolean {
    return proto3.util.equals(FileDownloadInitializer, a, b);
  }
}

/**
 * @generated from message gitpod.v1.FileDownloadInitializer.FileInfo
 */
export class FileDownloadInitializer_FileInfo extends Message<FileDownloadInitializer_FileInfo> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * file_path is relative to the target_location, e.g. if target_location is in `/workspace/myrepo`
   * a file_path of `foobar/file` would produce a file in `/workspace/myrepo/foobar/file`.
   * file_path must include the filename. The FileDownloadInitializer will create any parent directories
   * necessary to place the file.
   *
   * @generated from field: string file_path = 2;
   */
  filePath = "";

  /**
   * digest is a hash of the file content in the OCI digest format (see https://github.com/opencontainers/image-spec/blob/master/descriptor.md#digests).
   * This information is used to compute subsequent
   * content versions, and to validate the file content was downloaded correctly.
   *
   * @generated from field: string digest = 3;
   */
  digest = "";

  constructor(data?: PartialMessage<FileDownloadInitializer_FileInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.FileDownloadInitializer.FileInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileDownloadInitializer_FileInfo {
    return new FileDownloadInitializer_FileInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileDownloadInitializer_FileInfo {
    return new FileDownloadInitializer_FileInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileDownloadInitializer_FileInfo {
    return new FileDownloadInitializer_FileInfo().fromJsonString(jsonString, options);
  }

  static equals(a: FileDownloadInitializer_FileInfo | PlainMessage<FileDownloadInitializer_FileInfo> | undefined, b: FileDownloadInitializer_FileInfo | PlainMessage<FileDownloadInitializer_FileInfo> | undefined): boolean {
    return proto3.util.equals(FileDownloadInitializer_FileInfo, a, b);
  }
}

/**
 * GitStatus describes the current Git working copy status, akin to a combination of "git status" and "git branch"
 *
 * @generated from message gitpod.v1.GitStatus
 */
export class GitStatus extends Message<GitStatus> {
  /**
   * branch is branch we're currently on
   *
   * @generated from field: string branch = 1;
   */
  branch = "";

  /**
   * latest_commit is the most recent commit on the current branch
   *
   * @generated from field: string latest_commit = 2;
   */
  latestCommit = "";

  /**
   * uncommited_files is the number of uncommitted files, possibly truncated
   *
   * @generated from field: repeated string uncommited_files = 3;
   */
  uncommitedFiles: string[] = [];

  /**
   * the total number of uncommited files
   *
   * @generated from field: int64 total_uncommited_files = 6;
   */
  totalUncommitedFiles = protoInt64.zero;

  /**
   * untracked_files is the number of untracked files in the workspace, possibly truncated
   *
   * @generated from field: repeated string untracked_files = 4;
   */
  untrackedFiles: string[] = [];

  /**
   * the total number of untracked files
   *
   * @generated from field: int64 total_untracked_files = 7;
   */
  totalUntrackedFiles = protoInt64.zero;

  /**
   * unpushed_commits is the number of unpushed changes in the workspace, possibly truncated
   *
   * @generated from field: repeated string unpushed_commits = 5;
   */
  unpushedCommits: string[] = [];

  /**
   * the total number of unpushed changes
   *
   * @generated from field: int64 total_unpushed_commits = 8;
   */
  totalUnpushedCommits = protoInt64.zero;

  constructor(data?: PartialMessage<GitStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GitStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "latest_commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "uncommited_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "total_uncommited_files", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "untracked_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "total_untracked_files", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "unpushed_commits", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "total_unpushed_commits", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitStatus {
    return new GitStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitStatus {
    return new GitStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitStatus {
    return new GitStatus().fromJsonString(jsonString, options);
  }

  static equals(a: GitStatus | PlainMessage<GitStatus> | undefined, b: GitStatus | PlainMessage<GitStatus> | undefined): boolean {
    return proto3.util.equals(GitStatus, a, b);
  }
}

/**
 * @generated from message gitpod.v1.UpdateWorkspaceRequest
 */
export class UpdateWorkspaceRequest extends Message<UpdateWorkspaceRequest> {
  /**
   * workspace_id specifies the workspace to update
   *
   * +required
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * metadata is data associated with this workspace that's required for other parts of Gitpod to function
   *
   * @generated from field: optional gitpod.v1.UpdateWorkspaceRequest.UpdateWorkspaceMetadata metadata = 2;
   */
  metadata?: UpdateWorkspaceRequest_UpdateWorkspaceMetadata;

  /**
   * spec is the configuration of the workspace that's required for the ws-manager to start the workspace
   *
   * @generated from field: optional gitpod.v1.UpdateWorkspaceRequest.UpdateWorkspaceSpec spec = 3;
   */
  spec?: UpdateWorkspaceRequest_UpdateWorkspaceSpec;

  /**
   * git_status updates the git status of the workspace - this is only here during the migration
   *
   * @generated from field: optional gitpod.v1.WorkspaceGitStatus git_status = 4 [deprecated = true];
   * @deprecated
   */
  gitStatus?: WorkspaceGitStatus;

  constructor(data?: PartialMessage<UpdateWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.UpdateWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: UpdateWorkspaceRequest_UpdateWorkspaceMetadata, opt: true },
    { no: 3, name: "spec", kind: "message", T: UpdateWorkspaceRequest_UpdateWorkspaceSpec, opt: true },
    { no: 4, name: "git_status", kind: "message", T: WorkspaceGitStatus, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkspaceRequest {
    return new UpdateWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkspaceRequest {
    return new UpdateWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkspaceRequest {
    return new UpdateWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWorkspaceRequest | PlainMessage<UpdateWorkspaceRequest> | undefined, b: UpdateWorkspaceRequest | PlainMessage<UpdateWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.UpdateWorkspaceRequest.UpdateWorkspaceMetadata
 */
export class UpdateWorkspaceRequest_UpdateWorkspaceMetadata extends Message<UpdateWorkspaceRequest_UpdateWorkspaceMetadata> {
  /**
   * name is the name of the workspace as specified by the user
   *
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * pinned indicates whether the workspace is pinned
   *
   * @generated from field: optional bool pinned = 2;
   */
  pinned?: boolean;

  constructor(data?: PartialMessage<UpdateWorkspaceRequest_UpdateWorkspaceMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.UpdateWorkspaceRequest.UpdateWorkspaceMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkspaceRequest_UpdateWorkspaceMetadata {
    return new UpdateWorkspaceRequest_UpdateWorkspaceMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkspaceRequest_UpdateWorkspaceMetadata {
    return new UpdateWorkspaceRequest_UpdateWorkspaceMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkspaceRequest_UpdateWorkspaceMetadata {
    return new UpdateWorkspaceRequest_UpdateWorkspaceMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWorkspaceRequest_UpdateWorkspaceMetadata | PlainMessage<UpdateWorkspaceRequest_UpdateWorkspaceMetadata> | undefined, b: UpdateWorkspaceRequest_UpdateWorkspaceMetadata | PlainMessage<UpdateWorkspaceRequest_UpdateWorkspaceMetadata> | undefined): boolean {
    return proto3.util.equals(UpdateWorkspaceRequest_UpdateWorkspaceMetadata, a, b);
  }
}

/**
 * @generated from message gitpod.v1.UpdateWorkspaceRequest.UpdateTimeout
 */
export class UpdateWorkspaceRequest_UpdateTimeout extends Message<UpdateWorkspaceRequest_UpdateTimeout> {
  /**
   * inacitivity is the maximum time of inactivity before the workspace is stopped or paused
   *
   * @generated from field: optional google.protobuf.Duration inactivity = 1;
   */
  inactivity?: Duration;

  /**
   * inacitivity is the maximum time of disconnection before the workspace is stopped or paused
   *
   * @generated from field: optional google.protobuf.Duration disconnected = 2;
   */
  disconnected?: Duration;

  constructor(data?: PartialMessage<UpdateWorkspaceRequest_UpdateTimeout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.UpdateWorkspaceRequest.UpdateTimeout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inactivity", kind: "message", T: Duration, opt: true },
    { no: 2, name: "disconnected", kind: "message", T: Duration, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkspaceRequest_UpdateTimeout {
    return new UpdateWorkspaceRequest_UpdateTimeout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkspaceRequest_UpdateTimeout {
    return new UpdateWorkspaceRequest_UpdateTimeout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkspaceRequest_UpdateTimeout {
    return new UpdateWorkspaceRequest_UpdateTimeout().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWorkspaceRequest_UpdateTimeout | PlainMessage<UpdateWorkspaceRequest_UpdateTimeout> | undefined, b: UpdateWorkspaceRequest_UpdateTimeout | PlainMessage<UpdateWorkspaceRequest_UpdateTimeout> | undefined): boolean {
    return proto3.util.equals(UpdateWorkspaceRequest_UpdateTimeout, a, b);
  }
}

/**
 * Note(cw): Ports cannot be updated here in favour of UpdateWorkspacePorts call which exists so that
 * we can update individual ports.
 *
 * @generated from message gitpod.v1.UpdateWorkspaceRequest.UpdateWorkspaceSpec
 */
export class UpdateWorkspaceRequest_UpdateWorkspaceSpec extends Message<UpdateWorkspaceRequest_UpdateWorkspaceSpec> {
  /**
   * timeout configures the workspace timeout
   *
   * @generated from field: optional gitpod.v1.UpdateWorkspaceRequest.UpdateTimeout timeout = 1;
   */
  timeout?: UpdateWorkspaceRequest_UpdateTimeout;

  /**
   * admission controlls who can access the workspace and its ports.
   *
   * @generated from field: optional gitpod.v1.AdmissionLevel admission = 2;
   */
  admission?: AdmissionLevel;

  /**
   * Note(cw): repeated fields have implicit presence. There's a difference between passing an empty list or nothing.
   *
   * @generated from field: repeated string ssh_public_keys = 3;
   */
  sshPublicKeys: string[] = [];

  constructor(data?: PartialMessage<UpdateWorkspaceRequest_UpdateWorkspaceSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.UpdateWorkspaceRequest.UpdateWorkspaceSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timeout", kind: "message", T: UpdateWorkspaceRequest_UpdateTimeout, opt: true },
    { no: 2, name: "admission", kind: "enum", T: proto3.getEnumType(AdmissionLevel), opt: true },
    { no: 3, name: "ssh_public_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkspaceRequest_UpdateWorkspaceSpec {
    return new UpdateWorkspaceRequest_UpdateWorkspaceSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkspaceRequest_UpdateWorkspaceSpec {
    return new UpdateWorkspaceRequest_UpdateWorkspaceSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkspaceRequest_UpdateWorkspaceSpec {
    return new UpdateWorkspaceRequest_UpdateWorkspaceSpec().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWorkspaceRequest_UpdateWorkspaceSpec | PlainMessage<UpdateWorkspaceRequest_UpdateWorkspaceSpec> | undefined, b: UpdateWorkspaceRequest_UpdateWorkspaceSpec | PlainMessage<UpdateWorkspaceRequest_UpdateWorkspaceSpec> | undefined): boolean {
    return proto3.util.equals(UpdateWorkspaceRequest_UpdateWorkspaceSpec, a, b);
  }
}

/**
 * @generated from message gitpod.v1.UpdateWorkspaceResponse
 */
export class UpdateWorkspaceResponse extends Message<UpdateWorkspaceResponse> {
  /**
   * @generated from field: gitpod.v1.Workspace workspace = 1;
   */
  workspace?: Workspace;

  constructor(data?: PartialMessage<UpdateWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.UpdateWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace", kind: "message", T: Workspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkspaceResponse {
    return new UpdateWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkspaceResponse {
    return new UpdateWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkspaceResponse {
    return new UpdateWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWorkspaceResponse | PlainMessage<UpdateWorkspaceResponse> | undefined, b: UpdateWorkspaceResponse | PlainMessage<UpdateWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(UpdateWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.StopWorkspaceRequest
 */
export class StopWorkspaceRequest extends Message<StopWorkspaceRequest> {
  /**
   * workspace_id specifies which workspace should be stopped.
   *
   * +required
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<StopWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.StopWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopWorkspaceRequest {
    return new StopWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopWorkspaceRequest {
    return new StopWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopWorkspaceRequest {
    return new StopWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopWorkspaceRequest | PlainMessage<StopWorkspaceRequest> | undefined, b: StopWorkspaceRequest | PlainMessage<StopWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(StopWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.StopWorkspaceResponse
 */
export class StopWorkspaceResponse extends Message<StopWorkspaceResponse> {
  constructor(data?: PartialMessage<StopWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.StopWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopWorkspaceResponse {
    return new StopWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopWorkspaceResponse {
    return new StopWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopWorkspaceResponse {
    return new StopWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopWorkspaceResponse | PlainMessage<StopWorkspaceResponse> | undefined, b: StopWorkspaceResponse | PlainMessage<StopWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(StopWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.DeleteWorkspaceRequest
 */
export class DeleteWorkspaceRequest extends Message<DeleteWorkspaceRequest> {
  /**
   * workspace_id specifies the workspace that is going to delete.
   *
   * +required
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<DeleteWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.DeleteWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWorkspaceRequest {
    return new DeleteWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWorkspaceRequest {
    return new DeleteWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWorkspaceRequest {
    return new DeleteWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWorkspaceRequest | PlainMessage<DeleteWorkspaceRequest> | undefined, b: DeleteWorkspaceRequest | PlainMessage<DeleteWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.DeleteWorkspaceResponse
 */
export class DeleteWorkspaceResponse extends Message<DeleteWorkspaceResponse> {
  constructor(data?: PartialMessage<DeleteWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.DeleteWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWorkspaceResponse {
    return new DeleteWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWorkspaceResponse {
    return new DeleteWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWorkspaceResponse {
    return new DeleteWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWorkspaceResponse | PlainMessage<DeleteWorkspaceResponse> | undefined, b: DeleteWorkspaceResponse | PlainMessage<DeleteWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(DeleteWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.ListWorkspaceClassesRequest
 */
export class ListWorkspaceClassesRequest extends Message<ListWorkspaceClassesRequest> {
  /**
   * @generated from field: gitpod.v1.PaginationRequest pagination = 1;
   */
  pagination?: PaginationRequest;

  constructor(data?: PartialMessage<ListWorkspaceClassesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.ListWorkspaceClassesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkspaceClassesRequest {
    return new ListWorkspaceClassesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkspaceClassesRequest {
    return new ListWorkspaceClassesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkspaceClassesRequest {
    return new ListWorkspaceClassesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkspaceClassesRequest | PlainMessage<ListWorkspaceClassesRequest> | undefined, b: ListWorkspaceClassesRequest | PlainMessage<ListWorkspaceClassesRequest> | undefined): boolean {
    return proto3.util.equals(ListWorkspaceClassesRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.ListWorkspaceClassesResponse
 */
export class ListWorkspaceClassesResponse extends Message<ListWorkspaceClassesResponse> {
  /**
   * @generated from field: gitpod.v1.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponse;

  /**
   * @generated from field: repeated gitpod.v1.WorkspaceClass workspace_classes = 2;
   */
  workspaceClasses: WorkspaceClass[] = [];

  constructor(data?: PartialMessage<ListWorkspaceClassesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.ListWorkspaceClassesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PaginationResponse },
    { no: 2, name: "workspace_classes", kind: "message", T: WorkspaceClass, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkspaceClassesResponse {
    return new ListWorkspaceClassesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkspaceClassesResponse {
    return new ListWorkspaceClassesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkspaceClassesResponse {
    return new ListWorkspaceClassesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkspaceClassesResponse | PlainMessage<ListWorkspaceClassesResponse> | undefined, b: ListWorkspaceClassesResponse | PlainMessage<ListWorkspaceClassesResponse> | undefined): boolean {
    return proto3.util.equals(ListWorkspaceClassesResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.ParseContextURLRequest
 */
export class ParseContextURLRequest extends Message<ParseContextURLRequest> {
  /**
   * context_url is the URL to parse
   *
   * @generated from field: string context_url = 1;
   */
  contextUrl = "";

  /**
   * configuration_id is the ID of the configuration to use
   *
   * @generated from field: string configuration_id = 2;
   */
  configurationId = "";

  constructor(data?: PartialMessage<ParseContextURLRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.ParseContextURLRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "configuration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParseContextURLRequest {
    return new ParseContextURLRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParseContextURLRequest {
    return new ParseContextURLRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParseContextURLRequest {
    return new ParseContextURLRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ParseContextURLRequest | PlainMessage<ParseContextURLRequest> | undefined, b: ParseContextURLRequest | PlainMessage<ParseContextURLRequest> | undefined): boolean {
    return proto3.util.equals(ParseContextURLRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.ParseContextURLResponse
 */
export class ParseContextURLResponse extends Message<ParseContextURLResponse> {
  /**
   * @generated from field: gitpod.v1.WorkspaceMetadata metadata = 1;
   */
  metadata?: WorkspaceMetadata;

  /**
   * @generated from field: gitpod.v1.WorkspaceSpec spec = 2;
   */
  spec?: WorkspaceSpec;

  constructor(data?: PartialMessage<ParseContextURLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.ParseContextURLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: WorkspaceMetadata },
    { no: 2, name: "spec", kind: "message", T: WorkspaceSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParseContextURLResponse {
    return new ParseContextURLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParseContextURLResponse {
    return new ParseContextURLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParseContextURLResponse {
    return new ParseContextURLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ParseContextURLResponse | PlainMessage<ParseContextURLResponse> | undefined, b: ParseContextURLResponse | PlainMessage<ParseContextURLResponse> | undefined): boolean {
    return proto3.util.equals(ParseContextURLResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WorkspaceClass
 */
export class WorkspaceClass extends Message<WorkspaceClass> {
  /**
   * id is the unique identifier of the workspace class
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * display_name is the human readable name of the workspace class
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * description is a human readable description of the workspace class
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * is_default indicates if this workspace class is the default one
   *
   * @generated from field: bool is_default = 4;
   */
  isDefault = false;

  constructor(data?: PartialMessage<WorkspaceClass>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceClass";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "is_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceClass {
    return new WorkspaceClass().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceClass {
    return new WorkspaceClass().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceClass {
    return new WorkspaceClass().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceClass | PlainMessage<WorkspaceClass> | undefined, b: WorkspaceClass | PlainMessage<WorkspaceClass> | undefined): boolean {
    return proto3.util.equals(WorkspaceClass, a, b);
  }
}

/**
 * @generated from message gitpod.v1.CreateWorkspaceSnapshotRequest
 */
export class CreateWorkspaceSnapshotRequest extends Message<CreateWorkspaceSnapshotRequest> {
  /**
   * workspace_id specifies the workspace to create snapshot
   *
   * +required
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<CreateWorkspaceSnapshotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.CreateWorkspaceSnapshotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWorkspaceSnapshotRequest {
    return new CreateWorkspaceSnapshotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWorkspaceSnapshotRequest {
    return new CreateWorkspaceSnapshotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWorkspaceSnapshotRequest {
    return new CreateWorkspaceSnapshotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWorkspaceSnapshotRequest | PlainMessage<CreateWorkspaceSnapshotRequest> | undefined, b: CreateWorkspaceSnapshotRequest | PlainMessage<CreateWorkspaceSnapshotRequest> | undefined): boolean {
    return proto3.util.equals(CreateWorkspaceSnapshotRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.CreateWorkspaceSnapshotResponse
 */
export class CreateWorkspaceSnapshotResponse extends Message<CreateWorkspaceSnapshotResponse> {
  /**
   * @generated from field: gitpod.v1.WorkspaceSnapshot snapshot = 1;
   */
  snapshot?: WorkspaceSnapshot;

  constructor(data?: PartialMessage<CreateWorkspaceSnapshotResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.CreateWorkspaceSnapshotResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshot", kind: "message", T: WorkspaceSnapshot },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWorkspaceSnapshotResponse {
    return new CreateWorkspaceSnapshotResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWorkspaceSnapshotResponse {
    return new CreateWorkspaceSnapshotResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWorkspaceSnapshotResponse {
    return new CreateWorkspaceSnapshotResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWorkspaceSnapshotResponse | PlainMessage<CreateWorkspaceSnapshotResponse> | undefined, b: CreateWorkspaceSnapshotResponse | PlainMessage<CreateWorkspaceSnapshotResponse> | undefined): boolean {
    return proto3.util.equals(CreateWorkspaceSnapshotResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WaitForWorkspaceSnapshotRequest
 */
export class WaitForWorkspaceSnapshotRequest extends Message<WaitForWorkspaceSnapshotRequest> {
  /**
   * snapshot_id specifies the snapshot to wait for
   *
   * +required
   *
   * @generated from field: string snapshot_id = 1;
   */
  snapshotId = "";

  constructor(data?: PartialMessage<WaitForWorkspaceSnapshotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WaitForWorkspaceSnapshotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshot_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WaitForWorkspaceSnapshotRequest {
    return new WaitForWorkspaceSnapshotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WaitForWorkspaceSnapshotRequest {
    return new WaitForWorkspaceSnapshotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WaitForWorkspaceSnapshotRequest {
    return new WaitForWorkspaceSnapshotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WaitForWorkspaceSnapshotRequest | PlainMessage<WaitForWorkspaceSnapshotRequest> | undefined, b: WaitForWorkspaceSnapshotRequest | PlainMessage<WaitForWorkspaceSnapshotRequest> | undefined): boolean {
    return proto3.util.equals(WaitForWorkspaceSnapshotRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WaitForWorkspaceSnapshotResponse
 */
export class WaitForWorkspaceSnapshotResponse extends Message<WaitForWorkspaceSnapshotResponse> {
  constructor(data?: PartialMessage<WaitForWorkspaceSnapshotResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WaitForWorkspaceSnapshotResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WaitForWorkspaceSnapshotResponse {
    return new WaitForWorkspaceSnapshotResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WaitForWorkspaceSnapshotResponse {
    return new WaitForWorkspaceSnapshotResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WaitForWorkspaceSnapshotResponse {
    return new WaitForWorkspaceSnapshotResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WaitForWorkspaceSnapshotResponse | PlainMessage<WaitForWorkspaceSnapshotResponse> | undefined, b: WaitForWorkspaceSnapshotResponse | PlainMessage<WaitForWorkspaceSnapshotResponse> | undefined): boolean {
    return proto3.util.equals(WaitForWorkspaceSnapshotResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WorkspaceSnapshot
 */
export class WorkspaceSnapshot extends Message<WorkspaceSnapshot> {
  /**
   * id is the unique identifier of the snapshot
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * workspace_id is the source workspace id of snapshot
   *
   * @generated from field: string workspace_id = 2;
   */
  workspaceId = "";

  /**
   * @generated from field: google.protobuf.Timestamp creation_time = 3;
   */
  creationTime?: Timestamp;

  constructor(data?: PartialMessage<WorkspaceSnapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceSnapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "creation_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceSnapshot {
    return new WorkspaceSnapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceSnapshot {
    return new WorkspaceSnapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceSnapshot {
    return new WorkspaceSnapshot().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceSnapshot | PlainMessage<WorkspaceSnapshot> | undefined, b: WorkspaceSnapshot | PlainMessage<WorkspaceSnapshot> | undefined): boolean {
    return proto3.util.equals(WorkspaceSnapshot, a, b);
  }
}
