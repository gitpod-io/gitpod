/**
 * Copyright (c) 2023 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file gitpod/v1/workspace.proto (package gitpod.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { PaginationRequest, PaginationResponse } from "./pagination_pb.js";

/**
 * Admission level describes who can access a workspace instance and its ports.
 *
 * @generated from enum gitpod.v1.AdmissionLevel
 */
export enum AdmissionLevel {
  /**
   * @generated from enum value: ADMISSION_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * ADMISSION_LEVEL_OWNER_ONLY means the workspace can only be accessed using
   * the owner token
   *
   * @generated from enum value: ADMISSION_LEVEL_OWNER_ONLY = 1;
   */
  OWNER_ONLY = 1,

  /**
   * ADMISSION_LEVEL_EVERYONE means the workspace (including ports) can be
   * accessed by everyone.
   *
   * @generated from enum value: ADMISSION_LEVEL_EVERYONE = 2;
   */
  EVERYONE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AdmissionLevel)
proto3.util.setEnumType(AdmissionLevel, "gitpod.v1.AdmissionLevel", [
  { no: 0, name: "ADMISSION_LEVEL_UNSPECIFIED" },
  { no: 1, name: "ADMISSION_LEVEL_OWNER_ONLY" },
  { no: 2, name: "ADMISSION_LEVEL_EVERYONE" },
]);

/**
 * @generated from message gitpod.v1.GetWorkspaceRequest
 */
export class GetWorkspaceRequest extends Message<GetWorkspaceRequest> {
  /**
   * workspace_id specifies the workspace to get
   *
   * +required
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<GetWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceRequest {
    return new GetWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceRequest | PlainMessage<GetWorkspaceRequest> | undefined, b: GetWorkspaceRequest | PlainMessage<GetWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.GetWorkspaceResponse
 */
export class GetWorkspaceResponse extends Message<GetWorkspaceResponse> {
  /**
   * @generated from field: gitpod.v1.Workspace workspace = 1;
   */
  workspace?: Workspace;

  constructor(data?: PartialMessage<GetWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace", kind: "message", T: Workspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceResponse {
    return new GetWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceResponse | PlainMessage<GetWorkspaceResponse> | undefined, b: GetWorkspaceResponse | PlainMessage<GetWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WatchWorkspaceStatusRequest
 */
export class WatchWorkspaceStatusRequest extends Message<WatchWorkspaceStatusRequest> {
  /**
   * workspace_id specifies the workspace to watch
   *
   * +optional if empty then watch all workspaces
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  constructor(data?: PartialMessage<WatchWorkspaceStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WatchWorkspaceStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchWorkspaceStatusRequest {
    return new WatchWorkspaceStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchWorkspaceStatusRequest {
    return new WatchWorkspaceStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchWorkspaceStatusRequest {
    return new WatchWorkspaceStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchWorkspaceStatusRequest | PlainMessage<WatchWorkspaceStatusRequest> | undefined, b: WatchWorkspaceStatusRequest | PlainMessage<WatchWorkspaceStatusRequest> | undefined): boolean {
    return proto3.util.equals(WatchWorkspaceStatusRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WatchWorkspaceStatusResponse
 */
export class WatchWorkspaceStatusResponse extends Message<WatchWorkspaceStatusResponse> {
  /**
   * workspace_id is the ID of the workspace that has status updated
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId = "";

  /**
   * status is the updated status of workspace
   *
   * @generated from field: gitpod.v1.WorkspaceStatus status = 2;
   */
  status?: WorkspaceStatus;

  constructor(data?: PartialMessage<WatchWorkspaceStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WatchWorkspaceStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "message", T: WorkspaceStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchWorkspaceStatusResponse {
    return new WatchWorkspaceStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchWorkspaceStatusResponse {
    return new WatchWorkspaceStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchWorkspaceStatusResponse {
    return new WatchWorkspaceStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchWorkspaceStatusResponse | PlainMessage<WatchWorkspaceStatusResponse> | undefined, b: WatchWorkspaceStatusResponse | PlainMessage<WatchWorkspaceStatusResponse> | undefined): boolean {
    return proto3.util.equals(WatchWorkspaceStatusResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.ListWorkspacesRequest
 */
export class ListWorkspacesRequest extends Message<ListWorkspacesRequest> {
  /**
   * pagination contains the pagination options for listing workspaces
   *
   * @generated from field: gitpod.v1.PaginationRequest pagination = 1;
   */
  pagination?: PaginationRequest;

  /**
   * organization_id is the ID of the organization that contains the workspaces
   *
   * +required
   *
   * @generated from field: string organization_id = 2;
   */
  organizationId = "";

  /**
   * pinned indicates whether to list only pinned workspaces
   *
   * @generated from field: bool pinned = 3;
   */
  pinned = false;

  /**
   * search_term is a search term to filter workspaces by name
   *
   * @generated from field: string search_term = 4;
   */
  searchTerm = "";

  constructor(data?: PartialMessage<ListWorkspacesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.ListWorkspacesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PaginationRequest },
    { no: 2, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "search_term", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkspacesRequest {
    return new ListWorkspacesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkspacesRequest {
    return new ListWorkspacesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkspacesRequest {
    return new ListWorkspacesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkspacesRequest | PlainMessage<ListWorkspacesRequest> | undefined, b: ListWorkspacesRequest | PlainMessage<ListWorkspacesRequest> | undefined): boolean {
    return proto3.util.equals(ListWorkspacesRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.ListWorkspacesResponse
 */
export class ListWorkspacesResponse extends Message<ListWorkspacesResponse> {
  /**
   * workspaces are the workspaces that matched the query
   *
   * @generated from field: repeated gitpod.v1.Workspace workspaces = 1;
   */
  workspaces: Workspace[] = [];

  /**
   * pagination contains the pagination options for listing workspaces
   *
   * @generated from field: gitpod.v1.PaginationResponse pagination = 2;
   */
  pagination?: PaginationResponse;

  constructor(data?: PartialMessage<ListWorkspacesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.ListWorkspacesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspaces", kind: "message", T: Workspace, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkspacesResponse {
    return new ListWorkspacesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkspacesResponse {
    return new ListWorkspacesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkspacesResponse {
    return new ListWorkspacesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkspacesResponse | PlainMessage<ListWorkspacesResponse> | undefined, b: ListWorkspacesResponse | PlainMessage<ListWorkspacesResponse> | undefined): boolean {
    return proto3.util.equals(ListWorkspacesResponse, a, b);
  }
}

/**
 * +resource get workspace
 *
 * @generated from message gitpod.v1.Workspace
 */
export class Workspace extends Message<Workspace> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * prebuild indicates it is a prebuild
   * TODO(ak) model prebuilds as a separate resource
   *
   * @generated from field: bool prebuild = 2;
   */
  prebuild = false;

  /**
   * @generated from field: string organization_id = 3;
   */
  organizationId = "";

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: bool pinned = 5;
   */
  pinned = false;

  /**
   * @generated from field: gitpod.v1.WorkspaceStatus status = 6;
   */
  status?: WorkspaceStatus;

  /**
   * additional_environment_variables provide additional environment variables
   * which take precedence over environment variables provided by the project
   * and user.
   *
   * +optional
   *
   * @generated from field: repeated gitpod.v1.WorkspaceEnvironmentVariable additional_environment_variables = 7;
   */
  additionalEnvironmentVariables: WorkspaceEnvironmentVariable[] = [];

  /**
   * region specifies the region in which the workspace will be created.
   * Obtain available regions using the ListRegions operation.
   *
   * +optional defaults to the user's default region
   *
   * @generated from field: string region = 8;
   */
  region = "";

  /**
   * workspace_class specifies the workspace class with which to create the
   * workspace. Obtain available workspace classes using the ListWorkspaceClass
   * operation.
   *
   * +optional defaults to the class configured on the project or the cluster's
   * default class.
   *
   * @generated from field: string workspace_class = 9;
   */
  workspaceClass = "";

  /**
   * editor specifies the editor that will be used with this workspace.
   * Obtain available editors using the EditorService.ListEditors operation.
   *
   * +optional defaults to the default editor of the user
   *
   * @generated from field: gitpod.v1.EditorReference editor = 10;
   */
  editor?: EditorReference;

  /**
   * context_url is the normalized URL from which the workspace was created
   * TODO(ak) replace with resolveContextURL API
   *
   * @generated from field: string context_url = 11;
   */
  contextUrl = "";

  /**
   * Prebuild ID is the unique identifier of the prebuild
   * from which this workspace was created
   * +optional if empty then this workspace was not created from a prebuild
   *
   * @generated from field: string prebuild_id = 12;
   */
  prebuildId = "";

  constructor(data?: PartialMessage<Workspace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.Workspace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "prebuild", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "status", kind: "message", T: WorkspaceStatus },
    { no: 7, name: "additional_environment_variables", kind: "message", T: WorkspaceEnvironmentVariable, repeated: true },
    { no: 8, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "workspace_class", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "editor", kind: "message", T: EditorReference },
    { no: 11, name: "context_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "prebuild_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workspace {
    return new Workspace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJsonString(jsonString, options);
  }

  static equals(a: Workspace | PlainMessage<Workspace> | undefined, b: Workspace | PlainMessage<Workspace> | undefined): boolean {
    return proto3.util.equals(Workspace, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WorkspaceStatus
 */
export class WorkspaceStatus extends Message<WorkspaceStatus> {
  /**
   * Phase is a simple, high-level summary of where the workspace is in its
   * lifecycle. The phase is not intended to be a comprehensive rollup of
   * observations of the workspace state, nor is it intended to be a
   * comprehensive state machine.
   *
   * @generated from field: gitpod.v1.WorkspacePhase phase = 1;
   */
  phase?: WorkspacePhase;

  /**
   * message is an optional human-readable message detailing the current phase
   *
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * workspace_url is the URL of the workspace. Only present when the phase is
   * running.
   *
   * @generated from field: string workspace_url = 3;
   */
  workspaceUrl = "";

  /**
   * git_status details the Git working copy status of the workspace.
   * Note: this is a best-effort field and more often than not will not be
   * present. Its absence does not indicate the absence of a working copy.
   *
   * @generated from field: gitpod.v1.WorkspaceGitStatus git_status = 4;
   */
  gitStatus?: WorkspaceGitStatus;

  /**
   * ports lists the network ports currently available/known of this workspace
   *
   * @generated from field: repeated gitpod.v1.WorkspacePort ports = 5;
   */
  ports: WorkspacePort[] = [];

  /**
   * Admission describes who can access a workspace instance and its ports.
   *
   * @generated from field: gitpod.v1.AdmissionLevel admission = 6;
   */
  admission = AdmissionLevel.UNSPECIFIED;

  /**
   * Instance ID is the unique identifier of the workspace instance
   *
   * @generated from field: string instance_id = 7;
   */
  instanceId = "";

  /**
   * Conditions contains observations of the workspace's current phase.
   *
   * @generated from field: gitpod.v1.WorkspaceConditions conditions = 8;
   */
  conditions?: WorkspaceConditions;

  constructor(data?: PartialMessage<WorkspaceStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phase", kind: "message", T: WorkspacePhase },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workspace_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "git_status", kind: "message", T: WorkspaceGitStatus },
    { no: 5, name: "ports", kind: "message", T: WorkspacePort, repeated: true },
    { no: 6, name: "admission", kind: "enum", T: proto3.getEnumType(AdmissionLevel) },
    { no: 7, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "conditions", kind: "message", T: WorkspaceConditions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceStatus {
    return new WorkspaceStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceStatus {
    return new WorkspaceStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceStatus {
    return new WorkspaceStatus().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceStatus | PlainMessage<WorkspaceStatus> | undefined, b: WorkspaceStatus | PlainMessage<WorkspaceStatus> | undefined): boolean {
    return proto3.util.equals(WorkspaceStatus, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WorkspaceConditions
 */
export class WorkspaceConditions extends Message<WorkspaceConditions> {
  /**
   * failed contains technical details for the failure of the workspace.
   * +optional If this field is empty, the workspace has not failed.
   *
   * @generated from field: string failed = 1;
   */
  failed = "";

  /**
   * timeout contains the reason the workspace has timed out.
   * +optional If this field is empty, the workspace has not timed out.
   *
   * @generated from field: string timeout = 2;
   */
  timeout = "";

  constructor(data?: PartialMessage<WorkspaceConditions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceConditions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "failed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timeout", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceConditions {
    return new WorkspaceConditions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceConditions {
    return new WorkspaceConditions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceConditions {
    return new WorkspaceConditions().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceConditions | PlainMessage<WorkspaceConditions> | undefined, b: WorkspaceConditions | PlainMessage<WorkspaceConditions> | undefined): boolean {
    return proto3.util.equals(WorkspaceConditions, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WorkspacePort
 */
export class WorkspacePort extends Message<WorkspacePort> {
  /**
   * port number
   *
   * @generated from field: uint64 port = 1;
   */
  port = protoInt64.zero;

  /**
   * policy of this port
   *
   * @generated from field: gitpod.v1.WorkspacePort.Policy policy = 2;
   */
  policy = WorkspacePort_Policy.UNSPECIFIED;

  /**
   * url that can be used to access the port
   *
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * backend protocol of this port
   *
   * @generated from field: gitpod.v1.WorkspacePort.Protocol protocol = 4;
   */
  protocol = WorkspacePort_Protocol.UNSPECIFIED;

  constructor(data?: PartialMessage<WorkspacePort>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspacePort";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "policy", kind: "enum", T: proto3.getEnumType(WorkspacePort_Policy) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "protocol", kind: "enum", T: proto3.getEnumType(WorkspacePort_Protocol) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspacePort {
    return new WorkspacePort().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspacePort {
    return new WorkspacePort().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspacePort {
    return new WorkspacePort().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspacePort | PlainMessage<WorkspacePort> | undefined, b: WorkspacePort | PlainMessage<WorkspacePort> | undefined): boolean {
    return proto3.util.equals(WorkspacePort, a, b);
  }
}

/**
 * Policy defines the accssbility policy of a workspace port is guarded by an
 * authentication in the proxy
 *
 * @generated from enum gitpod.v1.WorkspacePort.Policy
 */
export enum WorkspacePort_Policy {
  /**
   * @generated from enum value: POLICY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Private means the port is accessible by the workspace owner only using
   * the workspace port URL
   *
   * @generated from enum value: POLICY_PRIVATE = 1;
   */
  PRIVATE = 1,

  /**
   * Public means the port is accessible by everybody using the workspace port
   * URL
   *
   * @generated from enum value: POLICY_PUBLIC = 2;
   */
  PUBLIC = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkspacePort_Policy)
proto3.util.setEnumType(WorkspacePort_Policy, "gitpod.v1.WorkspacePort.Policy", [
  { no: 0, name: "POLICY_UNSPECIFIED" },
  { no: 1, name: "POLICY_PRIVATE" },
  { no: 2, name: "POLICY_PUBLIC" },
]);

/**
 * Protocol defines the backend protocol of port
 *
 * @generated from enum gitpod.v1.WorkspacePort.Protocol
 */
export enum WorkspacePort_Protocol {
  /**
   * @generated from enum value: PROTOCOL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Http means the port backend is http
   *
   * @generated from enum value: PROTOCOL_HTTP = 1;
   */
  HTTP = 1,

  /**
   * Https means the port backend is https
   *
   * @generated from enum value: PROTOCOL_HTTPS = 2;
   */
  HTTPS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkspacePort_Protocol)
proto3.util.setEnumType(WorkspacePort_Protocol, "gitpod.v1.WorkspacePort.Protocol", [
  { no: 0, name: "PROTOCOL_UNSPECIFIED" },
  { no: 1, name: "PROTOCOL_HTTP" },
  { no: 2, name: "PROTOCOL_HTTPS" },
]);

/**
 * @generated from message gitpod.v1.WorkspaceGitStatus
 */
export class WorkspaceGitStatus extends Message<WorkspaceGitStatus> {
  /**
   * clone_url is the repository url as you would pass it to "git clone".
   * Only HTTPS clone URLs are supported.
   *
   * @generated from field: string clone_url = 1;
   */
  cloneUrl = "";

  /**
   * branch is branch we're currently on
   *
   * @generated from field: string branch = 2;
   */
  branch = "";

  /**
   * latest_commit is the most recent commit on the current branch
   *
   * @generated from field: string latest_commit = 3;
   */
  latestCommit = "";

  /**
   * uncommited_files is an array of uncommitted files, possibly truncated
   *
   * @generated from field: repeated string uncommited_files = 4;
   */
  uncommitedFiles: string[] = [];

  /**
   * the total number of uncommited files
   *
   * @generated from field: int32 total_uncommited_files = 5;
   */
  totalUncommitedFiles = 0;

  /**
   * untracked_files is an array of untracked files in the workspace, possibly
   * truncated
   *
   * @generated from field: repeated string untracked_files = 6;
   */
  untrackedFiles: string[] = [];

  /**
   * the total number of untracked files
   *
   * @generated from field: int32 total_untracked_files = 7;
   */
  totalUntrackedFiles = 0;

  /**
   * unpushed_commits is an array of unpushed changes in the workspace, possibly
   * truncated
   *
   * @generated from field: repeated string unpushed_commits = 8;
   */
  unpushedCommits: string[] = [];

  /**
   * the total number of unpushed changes
   *
   * @generated from field: int32 total_unpushed_commits = 9;
   */
  totalUnpushedCommits = 0;

  constructor(data?: PartialMessage<WorkspaceGitStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceGitStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clone_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "latest_commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "uncommited_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "total_uncommited_files", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "untracked_files", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "total_untracked_files", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "unpushed_commits", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "total_unpushed_commits", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceGitStatus {
    return new WorkspaceGitStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceGitStatus {
    return new WorkspaceGitStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceGitStatus {
    return new WorkspaceGitStatus().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceGitStatus | PlainMessage<WorkspaceGitStatus> | undefined, b: WorkspaceGitStatus | PlainMessage<WorkspaceGitStatus> | undefined): boolean {
    return proto3.util.equals(WorkspaceGitStatus, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WorkspacePhase
 */
export class WorkspacePhase extends Message<WorkspacePhase> {
  /**
   * @generated from field: gitpod.v1.WorkspacePhase.Phase name = 1;
   */
  name = WorkspacePhase_Phase.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp last_transition_time = 2;
   */
  lastTransitionTime?: Timestamp;

  constructor(data?: PartialMessage<WorkspacePhase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspacePhase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "enum", T: proto3.getEnumType(WorkspacePhase_Phase) },
    { no: 2, name: "last_transition_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspacePhase {
    return new WorkspacePhase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspacePhase {
    return new WorkspacePhase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspacePhase {
    return new WorkspacePhase().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspacePhase | PlainMessage<WorkspacePhase> | undefined, b: WorkspacePhase | PlainMessage<WorkspacePhase> | undefined): boolean {
    return proto3.util.equals(WorkspacePhase, a, b);
  }
}

/**
 * @generated from enum gitpod.v1.WorkspacePhase.Phase
 */
export enum WorkspacePhase_Phase {
  /**
   * Unknown indicates an issue within the workspace manager in that it cannot
   * determine the actual phase of a workspace. This phase is usually
   * accompanied by an error.
   *
   * @generated from enum value: PHASE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Preparing means that we haven't actually started the workspace instance
   * just yet, but rather are still preparing for launch.
   *
   * @generated from enum value: PHASE_PREPARING = 1;
   */
  PREPARING = 1,

  /**
   * ImageBuild indicates that there's an image build running for this
   * workspace.
   *
   * @generated from enum value: PHASE_IMAGEBUILD = 2;
   */
  IMAGEBUILD = 2,

  /**
   * Pending means the workspace does not yet consume resources in the
   * cluster, but rather is looking for some space within the cluster. If for
   * example the cluster needs to scale up to accomodate the workspace, the
   * workspace will be in Pending state until that happened.
   *
   * @generated from enum value: PHASE_PENDING = 3;
   */
  PENDING = 3,

  /**
   * Creating means the workspace is currently being created. That includes
   * downloading the images required to run the workspace over the network.
   * The time spent in this phase varies widely and depends on the current
   * network speed, image size and cache states.
   *
   * @generated from enum value: PHASE_CREATING = 4;
   */
  CREATING = 4,

  /**
   * Initializing is the phase in which the workspace is executing the
   * appropriate workspace initializer (e.g. Git clone or backup download).
   * After this phase one can expect the workspace to either be Running or
   * Failed.
   *
   * @generated from enum value: PHASE_INITIALIZING = 5;
   */
  INITIALIZING = 5,

  /**
   * Running means the workspace is able to actively perform work, either by
   * serving a user through Theia, or as a headless workspace.
   *
   * @generated from enum value: PHASE_RUNNING = 6;
   */
  RUNNING = 6,

  /**
   * Interrupted is an exceptional state where the container should be running
   * but is temporarily unavailable. When in this state, we expect it to
   * become running or stopping anytime soon.
   *
   * @generated from enum value: PHASE_INTERRUPTED = 7;
   */
  INTERRUPTED = 7,

  /**
   * Stopping means that the workspace is currently shutting down. It could go
   * to stopped every moment.
   *
   * @generated from enum value: PHASE_STOPPING = 8;
   */
  STOPPING = 8,

  /**
   * Stopped means the workspace ended regularly because it was shut down.
   *
   * @generated from enum value: PHASE_STOPPED = 9;
   */
  STOPPED = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkspacePhase_Phase)
proto3.util.setEnumType(WorkspacePhase_Phase, "gitpod.v1.WorkspacePhase.Phase", [
  { no: 0, name: "PHASE_UNSPECIFIED" },
  { no: 1, name: "PHASE_PREPARING" },
  { no: 2, name: "PHASE_IMAGEBUILD" },
  { no: 3, name: "PHASE_PENDING" },
  { no: 4, name: "PHASE_CREATING" },
  { no: 5, name: "PHASE_INITIALIZING" },
  { no: 6, name: "PHASE_RUNNING" },
  { no: 7, name: "PHASE_INTERRUPTED" },
  { no: 8, name: "PHASE_STOPPING" },
  { no: 9, name: "PHASE_STOPPED" },
]);

/**
 * @generated from message gitpod.v1.EditorReference
 */
export class EditorReference extends Message<EditorReference> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  constructor(data?: PartialMessage<EditorReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.EditorReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditorReference {
    return new EditorReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditorReference {
    return new EditorReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditorReference {
    return new EditorReference().fromJsonString(jsonString, options);
  }

  static equals(a: EditorReference | PlainMessage<EditorReference> | undefined, b: EditorReference | PlainMessage<EditorReference> | undefined): boolean {
    return proto3.util.equals(EditorReference, a, b);
  }
}

/**
 * @generated from message gitpod.v1.WorkspaceEnvironmentVariable
 */
export class WorkspaceEnvironmentVariable extends Message<WorkspaceEnvironmentVariable> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<WorkspaceEnvironmentVariable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.WorkspaceEnvironmentVariable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceEnvironmentVariable {
    return new WorkspaceEnvironmentVariable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceEnvironmentVariable {
    return new WorkspaceEnvironmentVariable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceEnvironmentVariable {
    return new WorkspaceEnvironmentVariable().fromJsonString(jsonString, options);
  }

  static equals(a: WorkspaceEnvironmentVariable | PlainMessage<WorkspaceEnvironmentVariable> | undefined, b: WorkspaceEnvironmentVariable | PlainMessage<WorkspaceEnvironmentVariable> | undefined): boolean {
    return proto3.util.equals(WorkspaceEnvironmentVariable, a, b);
  }
}
