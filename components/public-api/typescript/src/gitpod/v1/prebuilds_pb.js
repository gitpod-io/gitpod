/**
 * Copyright (c) 2022 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License-AGPL.txt in the project root for license information.
 */

// source: gitpod/v1/prebuilds.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var gitpod_v1_workspaces_pb = require('../../gitpod/v1/workspaces_pb.js');
goog.object.extend(proto, gitpod_v1_workspaces_pb);
goog.exportSymbol('proto.gitpod.v1.GetPrebuildRequest', null, global);
goog.exportSymbol('proto.gitpod.v1.GetPrebuildResponse', null, global);
goog.exportSymbol('proto.gitpod.v1.GetRunningPrebuildRequest', null, global);
goog.exportSymbol('proto.gitpod.v1.GetRunningPrebuildResponse', null, global);
goog.exportSymbol('proto.gitpod.v1.ListenToPrebuildLogsRequest', null, global);
goog.exportSymbol('proto.gitpod.v1.ListenToPrebuildLogsResponse', null, global);
goog.exportSymbol('proto.gitpod.v1.ListenToPrebuildStatusRequest', null, global);
goog.exportSymbol('proto.gitpod.v1.ListenToPrebuildStatusResponse', null, global);
goog.exportSymbol('proto.gitpod.v1.Prebuild', null, global);
goog.exportSymbol('proto.gitpod.v1.PrebuildSpec', null, global);
goog.exportSymbol('proto.gitpod.v1.PrebuildStatus', null, global);
goog.exportSymbol('proto.gitpod.v1.PrebuildStatus.Phase', null, global);
goog.exportSymbol('proto.gitpod.v1.PrebuildStatus.Result', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gitpod.v1.GetPrebuildRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gitpod.v1.GetPrebuildRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gitpod.v1.GetPrebuildRequest.displayName = 'proto.gitpod.v1.GetPrebuildRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gitpod.v1.GetPrebuildResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gitpod.v1.GetPrebuildResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gitpod.v1.GetPrebuildResponse.displayName = 'proto.gitpod.v1.GetPrebuildResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gitpod.v1.GetRunningPrebuildRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gitpod.v1.GetRunningPrebuildRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gitpod.v1.GetRunningPrebuildRequest.displayName = 'proto.gitpod.v1.GetRunningPrebuildRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gitpod.v1.GetRunningPrebuildResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gitpod.v1.GetRunningPrebuildResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gitpod.v1.GetRunningPrebuildResponse.displayName = 'proto.gitpod.v1.GetRunningPrebuildResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gitpod.v1.ListenToPrebuildStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gitpod.v1.ListenToPrebuildStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gitpod.v1.ListenToPrebuildStatusRequest.displayName = 'proto.gitpod.v1.ListenToPrebuildStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gitpod.v1.ListenToPrebuildStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gitpod.v1.ListenToPrebuildStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gitpod.v1.ListenToPrebuildStatusResponse.displayName = 'proto.gitpod.v1.ListenToPrebuildStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gitpod.v1.ListenToPrebuildLogsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gitpod.v1.ListenToPrebuildLogsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gitpod.v1.ListenToPrebuildLogsRequest.displayName = 'proto.gitpod.v1.ListenToPrebuildLogsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gitpod.v1.ListenToPrebuildLogsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gitpod.v1.ListenToPrebuildLogsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gitpod.v1.ListenToPrebuildLogsResponse.displayName = 'proto.gitpod.v1.ListenToPrebuildLogsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gitpod.v1.Prebuild = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gitpod.v1.Prebuild, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gitpod.v1.Prebuild.displayName = 'proto.gitpod.v1.Prebuild';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gitpod.v1.PrebuildSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gitpod.v1.PrebuildSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gitpod.v1.PrebuildSpec.displayName = 'proto.gitpod.v1.PrebuildSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gitpod.v1.PrebuildStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gitpod.v1.PrebuildStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gitpod.v1.PrebuildStatus.displayName = 'proto.gitpod.v1.PrebuildStatus';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gitpod.v1.GetPrebuildRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gitpod.v1.GetPrebuildRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gitpod.v1.GetPrebuildRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.GetPrebuildRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    prebuildId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gitpod.v1.GetPrebuildRequest}
 */
proto.gitpod.v1.GetPrebuildRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gitpod.v1.GetPrebuildRequest;
  return proto.gitpod.v1.GetPrebuildRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gitpod.v1.GetPrebuildRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gitpod.v1.GetPrebuildRequest}
 */
proto.gitpod.v1.GetPrebuildRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrebuildId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gitpod.v1.GetPrebuildRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gitpod.v1.GetPrebuildRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gitpod.v1.GetPrebuildRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.GetPrebuildRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrebuildId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string prebuild_id = 1;
 * @return {string}
 */
proto.gitpod.v1.GetPrebuildRequest.prototype.getPrebuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gitpod.v1.GetPrebuildRequest} returns this
 */
proto.gitpod.v1.GetPrebuildRequest.prototype.setPrebuildId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gitpod.v1.GetPrebuildResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gitpod.v1.GetPrebuildResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gitpod.v1.GetPrebuildResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.GetPrebuildResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    prebuild: (f = msg.getPrebuild()) && proto.gitpod.v1.Prebuild.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gitpod.v1.GetPrebuildResponse}
 */
proto.gitpod.v1.GetPrebuildResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gitpod.v1.GetPrebuildResponse;
  return proto.gitpod.v1.GetPrebuildResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gitpod.v1.GetPrebuildResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gitpod.v1.GetPrebuildResponse}
 */
proto.gitpod.v1.GetPrebuildResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gitpod.v1.Prebuild;
      reader.readMessage(value,proto.gitpod.v1.Prebuild.deserializeBinaryFromReader);
      msg.setPrebuild(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gitpod.v1.GetPrebuildResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gitpod.v1.GetPrebuildResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gitpod.v1.GetPrebuildResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.GetPrebuildResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrebuild();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gitpod.v1.Prebuild.serializeBinaryToWriter
    );
  }
};


/**
 * optional Prebuild prebuild = 1;
 * @return {?proto.gitpod.v1.Prebuild}
 */
proto.gitpod.v1.GetPrebuildResponse.prototype.getPrebuild = function() {
  return /** @type{?proto.gitpod.v1.Prebuild} */ (
    jspb.Message.getWrapperField(this, proto.gitpod.v1.Prebuild, 1));
};


/**
 * @param {?proto.gitpod.v1.Prebuild|undefined} value
 * @return {!proto.gitpod.v1.GetPrebuildResponse} returns this
*/
proto.gitpod.v1.GetPrebuildResponse.prototype.setPrebuild = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gitpod.v1.GetPrebuildResponse} returns this
 */
proto.gitpod.v1.GetPrebuildResponse.prototype.clearPrebuild = function() {
  return this.setPrebuild(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gitpod.v1.GetPrebuildResponse.prototype.hasPrebuild = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gitpod.v1.GetRunningPrebuildRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gitpod.v1.GetRunningPrebuildRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gitpod.v1.GetRunningPrebuildRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.GetRunningPrebuildRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextUrl: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gitpod.v1.GetRunningPrebuildRequest}
 */
proto.gitpod.v1.GetRunningPrebuildRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gitpod.v1.GetRunningPrebuildRequest;
  return proto.gitpod.v1.GetRunningPrebuildRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gitpod.v1.GetRunningPrebuildRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gitpod.v1.GetRunningPrebuildRequest}
 */
proto.gitpod.v1.GetRunningPrebuildRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gitpod.v1.GetRunningPrebuildRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gitpod.v1.GetRunningPrebuildRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gitpod.v1.GetRunningPrebuildRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.GetRunningPrebuildRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string context_url = 1;
 * @return {string}
 */
proto.gitpod.v1.GetRunningPrebuildRequest.prototype.getContextUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gitpod.v1.GetRunningPrebuildRequest} returns this
 */
proto.gitpod.v1.GetRunningPrebuildRequest.prototype.setContextUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gitpod.v1.GetRunningPrebuildResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gitpod.v1.GetRunningPrebuildResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gitpod.v1.GetRunningPrebuildResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.GetRunningPrebuildResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    prebuild: (f = msg.getPrebuild()) && proto.gitpod.v1.Prebuild.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gitpod.v1.GetRunningPrebuildResponse}
 */
proto.gitpod.v1.GetRunningPrebuildResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gitpod.v1.GetRunningPrebuildResponse;
  return proto.gitpod.v1.GetRunningPrebuildResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gitpod.v1.GetRunningPrebuildResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gitpod.v1.GetRunningPrebuildResponse}
 */
proto.gitpod.v1.GetRunningPrebuildResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gitpod.v1.Prebuild;
      reader.readMessage(value,proto.gitpod.v1.Prebuild.deserializeBinaryFromReader);
      msg.setPrebuild(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gitpod.v1.GetRunningPrebuildResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gitpod.v1.GetRunningPrebuildResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gitpod.v1.GetRunningPrebuildResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.GetRunningPrebuildResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrebuild();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gitpod.v1.Prebuild.serializeBinaryToWriter
    );
  }
};


/**
 * optional Prebuild prebuild = 1;
 * @return {?proto.gitpod.v1.Prebuild}
 */
proto.gitpod.v1.GetRunningPrebuildResponse.prototype.getPrebuild = function() {
  return /** @type{?proto.gitpod.v1.Prebuild} */ (
    jspb.Message.getWrapperField(this, proto.gitpod.v1.Prebuild, 1));
};


/**
 * @param {?proto.gitpod.v1.Prebuild|undefined} value
 * @return {!proto.gitpod.v1.GetRunningPrebuildResponse} returns this
*/
proto.gitpod.v1.GetRunningPrebuildResponse.prototype.setPrebuild = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gitpod.v1.GetRunningPrebuildResponse} returns this
 */
proto.gitpod.v1.GetRunningPrebuildResponse.prototype.clearPrebuild = function() {
  return this.setPrebuild(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gitpod.v1.GetRunningPrebuildResponse.prototype.hasPrebuild = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gitpod.v1.ListenToPrebuildStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gitpod.v1.ListenToPrebuildStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gitpod.v1.ListenToPrebuildStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.ListenToPrebuildStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    prebuildId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gitpod.v1.ListenToPrebuildStatusRequest}
 */
proto.gitpod.v1.ListenToPrebuildStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gitpod.v1.ListenToPrebuildStatusRequest;
  return proto.gitpod.v1.ListenToPrebuildStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gitpod.v1.ListenToPrebuildStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gitpod.v1.ListenToPrebuildStatusRequest}
 */
proto.gitpod.v1.ListenToPrebuildStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrebuildId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gitpod.v1.ListenToPrebuildStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gitpod.v1.ListenToPrebuildStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gitpod.v1.ListenToPrebuildStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.ListenToPrebuildStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrebuildId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string prebuild_id = 1;
 * @return {string}
 */
proto.gitpod.v1.ListenToPrebuildStatusRequest.prototype.getPrebuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gitpod.v1.ListenToPrebuildStatusRequest} returns this
 */
proto.gitpod.v1.ListenToPrebuildStatusRequest.prototype.setPrebuildId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gitpod.v1.ListenToPrebuildStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gitpod.v1.ListenToPrebuildStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gitpod.v1.ListenToPrebuildStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.ListenToPrebuildStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.gitpod.v1.PrebuildStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gitpod.v1.ListenToPrebuildStatusResponse}
 */
proto.gitpod.v1.ListenToPrebuildStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gitpod.v1.ListenToPrebuildStatusResponse;
  return proto.gitpod.v1.ListenToPrebuildStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gitpod.v1.ListenToPrebuildStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gitpod.v1.ListenToPrebuildStatusResponse}
 */
proto.gitpod.v1.ListenToPrebuildStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gitpod.v1.PrebuildStatus;
      reader.readMessage(value,proto.gitpod.v1.PrebuildStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gitpod.v1.ListenToPrebuildStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gitpod.v1.ListenToPrebuildStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gitpod.v1.ListenToPrebuildStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.ListenToPrebuildStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gitpod.v1.PrebuildStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional PrebuildStatus status = 1;
 * @return {?proto.gitpod.v1.PrebuildStatus}
 */
proto.gitpod.v1.ListenToPrebuildStatusResponse.prototype.getStatus = function() {
  return /** @type{?proto.gitpod.v1.PrebuildStatus} */ (
    jspb.Message.getWrapperField(this, proto.gitpod.v1.PrebuildStatus, 1));
};


/**
 * @param {?proto.gitpod.v1.PrebuildStatus|undefined} value
 * @return {!proto.gitpod.v1.ListenToPrebuildStatusResponse} returns this
*/
proto.gitpod.v1.ListenToPrebuildStatusResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gitpod.v1.ListenToPrebuildStatusResponse} returns this
 */
proto.gitpod.v1.ListenToPrebuildStatusResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gitpod.v1.ListenToPrebuildStatusResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gitpod.v1.ListenToPrebuildLogsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gitpod.v1.ListenToPrebuildLogsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gitpod.v1.ListenToPrebuildLogsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.ListenToPrebuildLogsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    prebuildId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gitpod.v1.ListenToPrebuildLogsRequest}
 */
proto.gitpod.v1.ListenToPrebuildLogsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gitpod.v1.ListenToPrebuildLogsRequest;
  return proto.gitpod.v1.ListenToPrebuildLogsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gitpod.v1.ListenToPrebuildLogsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gitpod.v1.ListenToPrebuildLogsRequest}
 */
proto.gitpod.v1.ListenToPrebuildLogsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrebuildId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gitpod.v1.ListenToPrebuildLogsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gitpod.v1.ListenToPrebuildLogsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gitpod.v1.ListenToPrebuildLogsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.ListenToPrebuildLogsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrebuildId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string prebuild_id = 1;
 * @return {string}
 */
proto.gitpod.v1.ListenToPrebuildLogsRequest.prototype.getPrebuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gitpod.v1.ListenToPrebuildLogsRequest} returns this
 */
proto.gitpod.v1.ListenToPrebuildLogsRequest.prototype.setPrebuildId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gitpod.v1.ListenToPrebuildLogsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gitpod.v1.ListenToPrebuildLogsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gitpod.v1.ListenToPrebuildLogsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.ListenToPrebuildLogsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    line: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gitpod.v1.ListenToPrebuildLogsResponse}
 */
proto.gitpod.v1.ListenToPrebuildLogsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gitpod.v1.ListenToPrebuildLogsResponse;
  return proto.gitpod.v1.ListenToPrebuildLogsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gitpod.v1.ListenToPrebuildLogsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gitpod.v1.ListenToPrebuildLogsResponse}
 */
proto.gitpod.v1.ListenToPrebuildLogsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gitpod.v1.ListenToPrebuildLogsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gitpod.v1.ListenToPrebuildLogsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gitpod.v1.ListenToPrebuildLogsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.ListenToPrebuildLogsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLine();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string line = 1;
 * @return {string}
 */
proto.gitpod.v1.ListenToPrebuildLogsResponse.prototype.getLine = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gitpod.v1.ListenToPrebuildLogsResponse} returns this
 */
proto.gitpod.v1.ListenToPrebuildLogsResponse.prototype.setLine = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gitpod.v1.Prebuild.prototype.toObject = function(opt_includeInstance) {
  return proto.gitpod.v1.Prebuild.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gitpod.v1.Prebuild} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.Prebuild.toObject = function(includeInstance, msg) {
  var f, obj = {
    prebuildId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    spec: (f = msg.getSpec()) && proto.gitpod.v1.PrebuildSpec.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && proto.gitpod.v1.PrebuildStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gitpod.v1.Prebuild}
 */
proto.gitpod.v1.Prebuild.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gitpod.v1.Prebuild;
  return proto.gitpod.v1.Prebuild.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gitpod.v1.Prebuild} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gitpod.v1.Prebuild}
 */
proto.gitpod.v1.Prebuild.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrebuildId(value);
      break;
    case 2:
      var value = new proto.gitpod.v1.PrebuildSpec;
      reader.readMessage(value,proto.gitpod.v1.PrebuildSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 3:
      var value = new proto.gitpod.v1.PrebuildStatus;
      reader.readMessage(value,proto.gitpod.v1.PrebuildStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gitpod.v1.Prebuild.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gitpod.v1.Prebuild.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gitpod.v1.Prebuild} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.Prebuild.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrebuildId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gitpod.v1.PrebuildSpec.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.gitpod.v1.PrebuildStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional string prebuild_id = 1;
 * @return {string}
 */
proto.gitpod.v1.Prebuild.prototype.getPrebuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gitpod.v1.Prebuild} returns this
 */
proto.gitpod.v1.Prebuild.prototype.setPrebuildId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PrebuildSpec spec = 2;
 * @return {?proto.gitpod.v1.PrebuildSpec}
 */
proto.gitpod.v1.Prebuild.prototype.getSpec = function() {
  return /** @type{?proto.gitpod.v1.PrebuildSpec} */ (
    jspb.Message.getWrapperField(this, proto.gitpod.v1.PrebuildSpec, 2));
};


/**
 * @param {?proto.gitpod.v1.PrebuildSpec|undefined} value
 * @return {!proto.gitpod.v1.Prebuild} returns this
*/
proto.gitpod.v1.Prebuild.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gitpod.v1.Prebuild} returns this
 */
proto.gitpod.v1.Prebuild.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gitpod.v1.Prebuild.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PrebuildStatus status = 3;
 * @return {?proto.gitpod.v1.PrebuildStatus}
 */
proto.gitpod.v1.Prebuild.prototype.getStatus = function() {
  return /** @type{?proto.gitpod.v1.PrebuildStatus} */ (
    jspb.Message.getWrapperField(this, proto.gitpod.v1.PrebuildStatus, 3));
};


/**
 * @param {?proto.gitpod.v1.PrebuildStatus|undefined} value
 * @return {!proto.gitpod.v1.Prebuild} returns this
*/
proto.gitpod.v1.Prebuild.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gitpod.v1.Prebuild} returns this
 */
proto.gitpod.v1.Prebuild.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gitpod.v1.Prebuild.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gitpod.v1.PrebuildSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.gitpod.v1.PrebuildSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gitpod.v1.PrebuildSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.PrebuildSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && gitpod_v1_workspaces_pb.WorkspaceContext.toObject(includeInstance, f),
    incremental: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gitpod.v1.PrebuildSpec}
 */
proto.gitpod.v1.PrebuildSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gitpod.v1.PrebuildSpec;
  return proto.gitpod.v1.PrebuildSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gitpod.v1.PrebuildSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gitpod.v1.PrebuildSpec}
 */
proto.gitpod.v1.PrebuildSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new gitpod_v1_workspaces_pb.WorkspaceContext;
      reader.readMessage(value,gitpod_v1_workspaces_pb.WorkspaceContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncremental(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gitpod.v1.PrebuildSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gitpod.v1.PrebuildSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gitpod.v1.PrebuildSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.PrebuildSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      gitpod_v1_workspaces_pb.WorkspaceContext.serializeBinaryToWriter
    );
  }
  f = message.getIncremental();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional WorkspaceContext context = 1;
 * @return {?proto.gitpod.v1.WorkspaceContext}
 */
proto.gitpod.v1.PrebuildSpec.prototype.getContext = function() {
  return /** @type{?proto.gitpod.v1.WorkspaceContext} */ (
    jspb.Message.getWrapperField(this, gitpod_v1_workspaces_pb.WorkspaceContext, 1));
};


/**
 * @param {?proto.gitpod.v1.WorkspaceContext|undefined} value
 * @return {!proto.gitpod.v1.PrebuildSpec} returns this
*/
proto.gitpod.v1.PrebuildSpec.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gitpod.v1.PrebuildSpec} returns this
 */
proto.gitpod.v1.PrebuildSpec.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gitpod.v1.PrebuildSpec.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool incremental = 2;
 * @return {boolean}
 */
proto.gitpod.v1.PrebuildSpec.prototype.getIncremental = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gitpod.v1.PrebuildSpec} returns this
 */
proto.gitpod.v1.PrebuildSpec.prototype.setIncremental = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gitpod.v1.PrebuildStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.gitpod.v1.PrebuildStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gitpod.v1.PrebuildStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.PrebuildStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    phase: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0),
    resultMessage: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gitpod.v1.PrebuildStatus}
 */
proto.gitpod.v1.PrebuildStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gitpod.v1.PrebuildStatus;
  return proto.gitpod.v1.PrebuildStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gitpod.v1.PrebuildStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gitpod.v1.PrebuildStatus}
 */
proto.gitpod.v1.PrebuildStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.gitpod.v1.PrebuildStatus.Phase} */ (reader.readEnum());
      msg.setPhase(value);
      break;
    case 2:
      var value = /** @type {!proto.gitpod.v1.PrebuildStatus.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gitpod.v1.PrebuildStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gitpod.v1.PrebuildStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gitpod.v1.PrebuildStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gitpod.v1.PrebuildStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getResultMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.gitpod.v1.PrebuildStatus.Phase = {
  PHASE_UNSPECIFIED: 0,
  PHASE_PENDING: 1,
  PHASE_RUNNING: 2,
  PHASE_DONE: 3
};

/**
 * @enum {number}
 */
proto.gitpod.v1.PrebuildStatus.Result = {
  RESULT_UNSPECIFIED: 0,
  RESULT_SUCCESS: 1,
  RESULT_USER_CANCELED: 2,
  RESULT_SYSTEM_FAILURE: 3,
  RESULT_TASK_FAILURE: 4
};

/**
 * optional Phase phase = 1;
 * @return {!proto.gitpod.v1.PrebuildStatus.Phase}
 */
proto.gitpod.v1.PrebuildStatus.prototype.getPhase = function() {
  return /** @type {!proto.gitpod.v1.PrebuildStatus.Phase} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.gitpod.v1.PrebuildStatus.Phase} value
 * @return {!proto.gitpod.v1.PrebuildStatus} returns this
 */
proto.gitpod.v1.PrebuildStatus.prototype.setPhase = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Result result = 2;
 * @return {!proto.gitpod.v1.PrebuildStatus.Result}
 */
proto.gitpod.v1.PrebuildStatus.prototype.getResult = function() {
  return /** @type {!proto.gitpod.v1.PrebuildStatus.Result} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.gitpod.v1.PrebuildStatus.Result} value
 * @return {!proto.gitpod.v1.PrebuildStatus} returns this
 */
proto.gitpod.v1.PrebuildStatus.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string result_message = 3;
 * @return {string}
 */
proto.gitpod.v1.PrebuildStatus.prototype.getResultMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gitpod.v1.PrebuildStatus} returns this
 */
proto.gitpod.v1.PrebuildStatus.prototype.setResultMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.gitpod.v1);
