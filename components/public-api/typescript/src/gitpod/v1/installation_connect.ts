/**
 * Copyright (c) 2024 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-connect-es v1.1.2 with parameter "target=ts"
// @generated from file gitpod/v1/installation.proto (package gitpod.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateBlockedEmailDomainRequest, CreateBlockedEmailDomainResponse, CreateBlockedRepositoryRequest, CreateBlockedRepositoryResponse, DeleteBlockedRepositoryRequest, DeleteBlockedRepositoryResponse, GetInstallationWorkspaceDefaultImageRequest, GetInstallationWorkspaceDefaultImageResponse, GetOnboardingStateRequest, GetOnboardingStateResponse, ListBlockedEmailDomainsRequest, ListBlockedEmailDomainsResponse, ListBlockedRepositoriesRequest, ListBlockedRepositoriesResponse } from "./installation_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service gitpod.v1.InstallationService
 */
export const InstallationService = {
  typeName: "gitpod.v1.InstallationService",
  methods: {
    /**
     * GetInstallationWorkspaceDefaultImage returns the default image for current
     * Gitpod Installation.
     *
     * @generated from rpc gitpod.v1.InstallationService.GetInstallationWorkspaceDefaultImage
     */
    getInstallationWorkspaceDefaultImage: {
      name: "GetInstallationWorkspaceDefaultImage",
      I: GetInstallationWorkspaceDefaultImageRequest,
      O: GetInstallationWorkspaceDefaultImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListBlockedRepositories lists blocked repositories.
     *
     * @generated from rpc gitpod.v1.InstallationService.ListBlockedRepositories
     */
    listBlockedRepositories: {
      name: "ListBlockedRepositories",
      I: ListBlockedRepositoriesRequest,
      O: ListBlockedRepositoriesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateBlockedRepository creates a new blocked repository.
     *
     * @generated from rpc gitpod.v1.InstallationService.CreateBlockedRepository
     */
    createBlockedRepository: {
      name: "CreateBlockedRepository",
      I: CreateBlockedRepositoryRequest,
      O: CreateBlockedRepositoryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteBlockedRepository deletes a blocked repository.
     *
     * @generated from rpc gitpod.v1.InstallationService.DeleteBlockedRepository
     */
    deleteBlockedRepository: {
      name: "DeleteBlockedRepository",
      I: DeleteBlockedRepositoryRequest,
      O: DeleteBlockedRepositoryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListBlockedEmailDomains lists blocked email domains.
     *
     * @generated from rpc gitpod.v1.InstallationService.ListBlockedEmailDomains
     */
    listBlockedEmailDomains: {
      name: "ListBlockedEmailDomains",
      I: ListBlockedEmailDomainsRequest,
      O: ListBlockedEmailDomainsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateBlockedEmailDomain creates a new blocked email domain.
     *
     * @generated from rpc gitpod.v1.InstallationService.CreateBlockedEmailDomain
     */
    createBlockedEmailDomain: {
      name: "CreateBlockedEmailDomain",
      I: CreateBlockedEmailDomainRequest,
      O: CreateBlockedEmailDomainResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetOnboardingState returns the onboarding state of the installation.
     *
     * @generated from rpc gitpod.v1.InstallationService.GetOnboardingState
     */
    getOnboardingState: {
      name: "GetOnboardingState",
      I: GetOnboardingStateRequest,
      O: GetOnboardingStateResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;
