/**
 * Copyright (c) 2023 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-connect-es v1.1.2 with parameter "target=ts"
// @generated from file gitpod/v1/workspace.proto (package gitpod.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateAndStartWorkspaceRequest, CreateAndStartWorkspaceResponse, GetWorkspaceDefaultImageRequest, GetWorkspaceDefaultImageResponse, GetWorkspaceEditorCredentialsRequest, GetWorkspaceEditorCredentialsResponse, GetWorkspaceOwnerTokenRequest, GetWorkspaceOwnerTokenResponse, GetWorkspaceRequest, GetWorkspaceResponse, ListWorkspacesRequest, ListWorkspacesResponse, ParseContextURLRequest, ParseContextURLResponse, SendHeartBeatRequest, SendHeartBeatResponse, StartWorkspaceRequest, StartWorkspaceResponse, UpdateWorkspaceRequest, UpdateWorkspaceResponse, WatchWorkspaceStatusRequest, WatchWorkspaceStatusResponse } from "./workspace_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service gitpod.v1.WorkspaceService
 */
export const WorkspaceService = {
  typeName: "gitpod.v1.WorkspaceService",
  methods: {
    /**
     * GetWorkspace returns a single workspace.
     *
     * +return NOT_FOUND User does not have access to a workspace with the given
     * ID +return NOT_FOUND Workspace does not exist
     *
     * @generated from rpc gitpod.v1.WorkspaceService.GetWorkspace
     */
    getWorkspace: {
      name: "GetWorkspace",
      I: GetWorkspaceRequest,
      O: GetWorkspaceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * WatchWorkspaceStatus watches the workspaces status changes
     *
     * workspace_id +return NOT_FOUND Workspace does not exist
     *
     * @generated from rpc gitpod.v1.WorkspaceService.WatchWorkspaceStatus
     */
    watchWorkspaceStatus: {
      name: "WatchWorkspaceStatus",
      I: WatchWorkspaceStatusRequest,
      O: WatchWorkspaceStatusResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * ListWorkspaces returns a list of workspaces that match the query.
     *
     * @generated from rpc gitpod.v1.WorkspaceService.ListWorkspaces
     */
    listWorkspaces: {
      name: "ListWorkspaces",
      I: ListWorkspacesRequest,
      O: ListWorkspacesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateAndStartWorkspace creates a new workspace and starts it.
     *
     * @generated from rpc gitpod.v1.WorkspaceService.CreateAndStartWorkspace
     */
    createAndStartWorkspace: {
      name: "CreateAndStartWorkspace",
      I: CreateAndStartWorkspaceRequest,
      O: CreateAndStartWorkspaceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * StartWorkspace starts an existing workspace.
     * If the specified workspace is not in stopped phase, this will return the workspace as is.
     *
     * @generated from rpc gitpod.v1.WorkspaceService.StartWorkspace
     */
    startWorkspace: {
      name: "StartWorkspace",
      I: StartWorkspaceRequest,
      O: StartWorkspaceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateWorkspace updates the workspace.
     *
     * @generated from rpc gitpod.v1.WorkspaceService.UpdateWorkspace
     */
    updateWorkspace: {
      name: "UpdateWorkspace",
      I: UpdateWorkspaceRequest,
      O: UpdateWorkspaceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ParseContextURL parses a context URL and returns the workspace metadata and spec.
     * Not implemented yet.
     *
     * @generated from rpc gitpod.v1.WorkspaceService.ParseContextURL
     */
    parseContextURL: {
      name: "ParseContextURL",
      I: ParseContextURLRequest,
      O: ParseContextURLResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetWorkspaceDefaultImage returns the default workspace image of specified
     * workspace.
     *
     * @generated from rpc gitpod.v1.WorkspaceService.GetWorkspaceDefaultImage
     */
    getWorkspaceDefaultImage: {
      name: "GetWorkspaceDefaultImage",
      I: GetWorkspaceDefaultImageRequest,
      O: GetWorkspaceDefaultImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SendHeartBeat sends a heartbeat to activate the workspace
     *
     * @generated from rpc gitpod.v1.WorkspaceService.SendHeartBeat
     */
    sendHeartBeat: {
      name: "SendHeartBeat",
      I: SendHeartBeatRequest,
      O: SendHeartBeatResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetWorkspaceOwnerToken returns an owner token of workspace.
     *
     * @generated from rpc gitpod.v1.WorkspaceService.GetWorkspaceOwnerToken
     */
    getWorkspaceOwnerToken: {
      name: "GetWorkspaceOwnerToken",
      I: GetWorkspaceOwnerTokenRequest,
      O: GetWorkspaceOwnerTokenResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetWorkspaceEditorCredentials returns an credentials that is used in editor
     * to encrypt and decrypt secrets
     *
     * @generated from rpc gitpod.v1.WorkspaceService.GetWorkspaceEditorCredentials
     */
    getWorkspaceEditorCredentials: {
      name: "GetWorkspaceEditorCredentials",
      I: GetWorkspaceEditorCredentialsRequest,
      O: GetWorkspaceEditorCredentialsResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;
