/**
 * Copyright (c) 2023 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file gitpod/v1/sshkey.proto (package gitpod.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { PaginationRequest } from "./pagination_pb.js";

/**
 * @generated from message gitpod.v1.SshPublicKey
 */
export class SshPublicKey extends Message<SshPublicKey> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string key = 3;
   */
  key = "";

  /**
   * @generated from field: string fingerprint = 4;
   */
  fingerprint = "";

  /**
   * @generated from field: google.protobuf.Timestamp creation_time = 5;
   */
  creationTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp last_used_time = 6;
   */
  lastUsedTime?: Timestamp;

  constructor(data?: PartialMessage<SshPublicKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.SshPublicKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "fingerprint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "creation_time", kind: "message", T: Timestamp },
    { no: 6, name: "last_used_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SshPublicKey {
    return new SshPublicKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SshPublicKey {
    return new SshPublicKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SshPublicKey {
    return new SshPublicKey().fromJsonString(jsonString, options);
  }

  static equals(a: SshPublicKey | PlainMessage<SshPublicKey> | undefined, b: SshPublicKey | PlainMessage<SshPublicKey> | undefined): boolean {
    return proto3.util.equals(SshPublicKey, a, b);
  }
}

/**
 * @generated from message gitpod.v1.ListSshPublicKeysRequest
 */
export class ListSshPublicKeysRequest extends Message<ListSshPublicKeysRequest> {
  /**
   * @generated from field: gitpod.v1.PaginationRequest pagination = 1;
   */
  pagination?: PaginationRequest;

  constructor(data?: PartialMessage<ListSshPublicKeysRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.ListSshPublicKeysRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSshPublicKeysRequest {
    return new ListSshPublicKeysRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSshPublicKeysRequest {
    return new ListSshPublicKeysRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSshPublicKeysRequest {
    return new ListSshPublicKeysRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSshPublicKeysRequest | PlainMessage<ListSshPublicKeysRequest> | undefined, b: ListSshPublicKeysRequest | PlainMessage<ListSshPublicKeysRequest> | undefined): boolean {
    return proto3.util.equals(ListSshPublicKeysRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.ListSshPublicKeysResponse
 */
export class ListSshPublicKeysResponse extends Message<ListSshPublicKeysResponse> {
  /**
   * @generated from field: repeated gitpod.v1.SshPublicKey ssh_keys = 1;
   */
  sshKeys: SshPublicKey[] = [];

  /**
   * @generated from field: gitpod.v1.PaginationRequest pagination = 2;
   */
  pagination?: PaginationRequest;

  constructor(data?: PartialMessage<ListSshPublicKeysResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.ListSshPublicKeysResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ssh_keys", kind: "message", T: SshPublicKey, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSshPublicKeysResponse {
    return new ListSshPublicKeysResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSshPublicKeysResponse {
    return new ListSshPublicKeysResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSshPublicKeysResponse {
    return new ListSshPublicKeysResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSshPublicKeysResponse | PlainMessage<ListSshPublicKeysResponse> | undefined, b: ListSshPublicKeysResponse | PlainMessage<ListSshPublicKeysResponse> | undefined): boolean {
    return proto3.util.equals(ListSshPublicKeysResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.CreateSshPublicKeyRequest
 */
export class CreateSshPublicKeyRequest extends Message<CreateSshPublicKeyRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  constructor(data?: PartialMessage<CreateSshPublicKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.CreateSshPublicKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSshPublicKeyRequest {
    return new CreateSshPublicKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSshPublicKeyRequest {
    return new CreateSshPublicKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSshPublicKeyRequest {
    return new CreateSshPublicKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSshPublicKeyRequest | PlainMessage<CreateSshPublicKeyRequest> | undefined, b: CreateSshPublicKeyRequest | PlainMessage<CreateSshPublicKeyRequest> | undefined): boolean {
    return proto3.util.equals(CreateSshPublicKeyRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.CreateSshPublicKeyResponse
 */
export class CreateSshPublicKeyResponse extends Message<CreateSshPublicKeyResponse> {
  /**
   * @generated from field: gitpod.v1.SshPublicKey ssh_key = 1;
   */
  sshKey?: SshPublicKey;

  constructor(data?: PartialMessage<CreateSshPublicKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.CreateSshPublicKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ssh_key", kind: "message", T: SshPublicKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSshPublicKeyResponse {
    return new CreateSshPublicKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSshPublicKeyResponse {
    return new CreateSshPublicKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSshPublicKeyResponse {
    return new CreateSshPublicKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSshPublicKeyResponse | PlainMessage<CreateSshPublicKeyResponse> | undefined, b: CreateSshPublicKeyResponse | PlainMessage<CreateSshPublicKeyResponse> | undefined): boolean {
    return proto3.util.equals(CreateSshPublicKeyResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.DeleteSshPublicKeyRequest
 */
export class DeleteSshPublicKeyRequest extends Message<DeleteSshPublicKeyRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteSshPublicKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.DeleteSshPublicKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSshPublicKeyRequest {
    return new DeleteSshPublicKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSshPublicKeyRequest {
    return new DeleteSshPublicKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSshPublicKeyRequest {
    return new DeleteSshPublicKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSshPublicKeyRequest | PlainMessage<DeleteSshPublicKeyRequest> | undefined, b: DeleteSshPublicKeyRequest | PlainMessage<DeleteSshPublicKeyRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSshPublicKeyRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.DeleteSshPublicKeyResponse
 */
export class DeleteSshPublicKeyResponse extends Message<DeleteSshPublicKeyResponse> {
  constructor(data?: PartialMessage<DeleteSshPublicKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.DeleteSshPublicKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSshPublicKeyResponse {
    return new DeleteSshPublicKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSshPublicKeyResponse {
    return new DeleteSshPublicKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSshPublicKeyResponse {
    return new DeleteSshPublicKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSshPublicKeyResponse | PlainMessage<DeleteSshPublicKeyResponse> | undefined, b: DeleteSshPublicKeyResponse | PlainMessage<DeleteSshPublicKeyResponse> | undefined): boolean {
    return proto3.util.equals(DeleteSshPublicKeyResponse, a, b);
  }
}
