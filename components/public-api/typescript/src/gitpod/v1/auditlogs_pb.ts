/**
 * Copyright (c) 2024 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file gitpod/v1/auditlogs.proto (package gitpod.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { PaginationRequest, PaginationResponse } from "./pagination_pb.js";

/**
 * @generated from message gitpod.v1.ListAuditLogsRequest
 */
export class ListAuditLogsRequest extends Message<ListAuditLogsRequest> {
  /**
   * pagination contains the pagination options for listing workspaces
   *
   * @generated from field: gitpod.v1.PaginationRequest pagination = 1;
   */
  pagination?: PaginationRequest;

  /**
   * organization_id is the ID of the organization that contains the workspaces
   *
   * +required
   *
   * @generated from field: string organization_id = 2;
   */
  organizationId = "";

  /**
   * from specifies the starting time range for this request.
   * All sessions which existed starting at from will be returned.
   *
   * @generated from field: google.protobuf.Timestamp from = 3;
   */
  from?: Timestamp;

  /**
   * to specifies the end time range for this request.
   * All sessions which existed ending at to will be returned.
   *
   * @generated from field: google.protobuf.Timestamp to = 4;
   */
  to?: Timestamp;

  /**
   * actor_id is the ID of the user that performed the action
   *
   * @generated from field: string actor_id = 5;
   */
  actorId = "";

  /**
   * action is the action that was performed
   *
   * @generated from field: string action = 6;
   */
  action = "";

  constructor(data?: PartialMessage<ListAuditLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.ListAuditLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PaginationRequest },
    { no: 2, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "from", kind: "message", T: Timestamp },
    { no: 4, name: "to", kind: "message", T: Timestamp },
    { no: 5, name: "actor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAuditLogsRequest {
    return new ListAuditLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAuditLogsRequest {
    return new ListAuditLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAuditLogsRequest {
    return new ListAuditLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAuditLogsRequest | PlainMessage<ListAuditLogsRequest> | undefined, b: ListAuditLogsRequest | PlainMessage<ListAuditLogsRequest> | undefined): boolean {
    return proto3.util.equals(ListAuditLogsRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.ListAuditLogsResponse
 */
export class ListAuditLogsResponse extends Message<ListAuditLogsResponse> {
  /**
   * pagination contains the pagination options for listing workspaces
   *
   * @generated from field: gitpod.v1.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponse;

  /**
   * audit_logs that matched the query
   *
   * @generated from field: repeated gitpod.v1.AuditLog audit_logs = 2;
   */
  auditLogs: AuditLog[] = [];

  constructor(data?: PartialMessage<ListAuditLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.ListAuditLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PaginationResponse },
    { no: 2, name: "audit_logs", kind: "message", T: AuditLog, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAuditLogsResponse {
    return new ListAuditLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAuditLogsResponse {
    return new ListAuditLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAuditLogsResponse {
    return new ListAuditLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAuditLogsResponse | PlainMessage<ListAuditLogsResponse> | undefined, b: ListAuditLogsResponse | PlainMessage<ListAuditLogsResponse> | undefined): boolean {
    return proto3.util.equals(ListAuditLogsResponse, a, b);
  }
}

/**
 *
 * AuditLog represents an audit log entry
 * typescript shape:
 *
 * @generated from message gitpod.v1.AuditLog
 */
export class AuditLog extends Message<AuditLog> {
  /**
   * id is the unique identifier of the audit log
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * timestamp is the time when the audit log was created
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * action is the action that was performed
   *
   * @generated from field: string action = 3;
   */
  action = "";

  /**
   * organization_id is the ID of the organization that contains the workspaces
   *
   * @generated from field: string organization_id = 4;
   */
  organizationId = "";

  /**
   * actor_id is the ID of the user that performed the action
   *
   * @generated from field: string actor_id = 5;
   */
  actorId = "";

  /**
   * args contains a serialized JSON array off the arguments that were passed to the action
   *
   * @generated from field: string args = 6;
   */
  args = "";

  constructor(data?: PartialMessage<AuditLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.AuditLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "actor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditLog {
    return new AuditLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditLog {
    return new AuditLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditLog {
    return new AuditLog().fromJsonString(jsonString, options);
  }

  static equals(a: AuditLog | PlainMessage<AuditLog> | undefined, b: AuditLog | PlainMessage<AuditLog> | undefined): boolean {
    return proto3.util.equals(AuditLog, a, b);
  }
}
