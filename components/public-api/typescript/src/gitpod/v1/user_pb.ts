/**
 * Copyright (c) 2023 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License.AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file gitpod/v1/user.proto (package gitpod.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message gitpod.v1.GetAuthenticatedUserRequest
 */
export class GetAuthenticatedUserRequest extends Message<GetAuthenticatedUserRequest> {
  constructor(data?: PartialMessage<GetAuthenticatedUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetAuthenticatedUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthenticatedUserRequest {
    return new GetAuthenticatedUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthenticatedUserRequest {
    return new GetAuthenticatedUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthenticatedUserRequest {
    return new GetAuthenticatedUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthenticatedUserRequest | PlainMessage<GetAuthenticatedUserRequest> | undefined, b: GetAuthenticatedUserRequest | PlainMessage<GetAuthenticatedUserRequest> | undefined): boolean {
    return proto3.util.equals(GetAuthenticatedUserRequest, a, b);
  }
}

/**
 * @generated from message gitpod.v1.GetAuthenticatedUserResponse
 */
export class GetAuthenticatedUserResponse extends Message<GetAuthenticatedUserResponse> {
  /**
   * @generated from field: gitpod.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<GetAuthenticatedUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.GetAuthenticatedUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthenticatedUserResponse {
    return new GetAuthenticatedUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthenticatedUserResponse {
    return new GetAuthenticatedUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthenticatedUserResponse {
    return new GetAuthenticatedUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthenticatedUserResponse | PlainMessage<GetAuthenticatedUserResponse> | undefined, b: GetAuthenticatedUserResponse | PlainMessage<GetAuthenticatedUserResponse> | undefined): boolean {
    return proto3.util.equals(GetAuthenticatedUserResponse, a, b);
  }
}

/**
 * @generated from message gitpod.v1.User
 */
export class User extends Message<User> {
  /**
   * id is a UUID of the user
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * organization_id is the id of the organization this account is owned by.
   *
   * +optional if not set, this account is owned by the installation.
   *
   * @generated from field: string organization_id = 2;
   */
  organizationId = "";

  /**
   * name is the username
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * avatar_url is a link to the user avatar
   *
   * @generated from field: string avatar_url = 4;
   */
  avatarUrl = "";

  /**
   * created_at is the creation time
   *
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: repeated gitpod.v1.Identity identities = 6;
   */
  identities: Identity[] = [];

  /**
   * blocked indicates whether the account is blocked, e.g. due to vialoation of ToS.
   *
   * @generated from field: bool blocked = 7;
   */
  blocked = false;

  /**
   * last_verification_time is the last time this account was verified.
   *
   * +optional if not set, this account is not verified.
   *
   * @generated from field: google.protobuf.Timestamp last_verification_time = 8;
   */
  lastVerificationTime?: Timestamp;

  /**
   * verification_phone_number is the phone number used for the last verification.
   *
   * @generated from field: string verification_phone_number = 9;
   */
  verificationPhoneNumber = "";

  /**
   * @generated from field: gitpod.v1.User.AdditionalUserData additional_user_data = 10;
   */
  additionalUserData?: User_AdditionalUserData;

  /**
   * usage_attribution_id specifies the organization or account to which all of the
   * user's workspace usage is attributed to, e.g. for billing purposes
   *
   * @generated from field: string usage_attribution_id = 11;
   */
  usageAttributionId = "";

  /**
   * per-user settings to control workspace behavior
   *
   * @generated from field: repeated gitpod.v1.User.UserFeatureFlag workspace_feature_flags = 12;
   */
  workspaceFeatureFlags: User_UserFeatureFlag[] = [];

  /**
   * specifies the permissions and/or roles the user has
   *
   * @generated from field: repeated gitpod.v1.User.RoleOrPermission roles_or_permissions = 13;
   */
  rolesOrPermissions: User_RoleOrPermission[] = [];

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "identities", kind: "message", T: Identity, repeated: true },
    { no: 7, name: "blocked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "last_verification_time", kind: "message", T: Timestamp },
    { no: 9, name: "verification_phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "additional_user_data", kind: "message", T: User_AdditionalUserData },
    { no: 11, name: "usage_attribution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "workspace_feature_flags", kind: "enum", T: proto3.getEnumType(User_UserFeatureFlag), repeated: true },
    { no: 13, name: "roles_or_permissions", kind: "enum", T: proto3.getEnumType(User_RoleOrPermission), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from enum gitpod.v1.User.UserFeatureFlag
 */
export enum User_UserFeatureFlag {
  /**
   * @generated from enum value: USER_FEATURE_FLAG_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER_FEATURE_FLAG_FULL_WORKSPACE_BACKUP = 1;
   */
  FULL_WORKSPACE_BACKUP = 1,

  /**
   * @generated from enum value: USER_FEATURE_FLAG_WORKSPACE_CLASS_LIMITING = 2;
   */
  WORKSPACE_CLASS_LIMITING = 2,

  /**
   * @generated from enum value: USER_FEATURE_FLAG_WORKSPACE_CONNECTION_LIMITING = 3;
   */
  WORKSPACE_CONNECTION_LIMITING = 3,

  /**
   * @generated from enum value: USER_FEATURE_FLAG_WORKSPACE_PSI = 4;
   */
  WORKSPACE_PSI = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(User_UserFeatureFlag)
proto3.util.setEnumType(User_UserFeatureFlag, "gitpod.v1.User.UserFeatureFlag", [
  { no: 0, name: "USER_FEATURE_FLAG_UNSPECIFIED" },
  { no: 1, name: "USER_FEATURE_FLAG_FULL_WORKSPACE_BACKUP" },
  { no: 2, name: "USER_FEATURE_FLAG_WORKSPACE_CLASS_LIMITING" },
  { no: 3, name: "USER_FEATURE_FLAG_WORKSPACE_CONNECTION_LIMITING" },
  { no: 4, name: "USER_FEATURE_FLAG_WORKSPACE_PSI" },
]);

/**
 * @generated from enum gitpod.v1.User.RoleOrPermission
 */
export enum User_RoleOrPermission {
  /**
   * @generated from enum value: ROLE_OR_PERMISSION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ROLE_OR_PERMISSION_DEVOPS = 1;
   */
  DEVOPS = 1,

  /**
   * @generated from enum value: ROLE_OR_PERMISSION_VIEWER = 2;
   */
  VIEWER = 2,

  /**
   * @generated from enum value: ROLE_OR_PERMISSION_ADMIN = 3;
   */
  ADMIN = 3,

  /**
   * @generated from enum value: ROLE_OR_PERMISSION_DEVELOPER = 4;
   */
  DEVELOPER = 4,

  /**
   * @generated from enum value: ROLE_OR_PERMISSION_REGISTRY_ACCESS = 5;
   */
  REGISTRY_ACCESS = 5,

  /**
   * @generated from enum value: ROLE_OR_PERMISSION_ADMIN_PERMISSIONS = 6;
   */
  ADMIN_PERMISSIONS = 6,

  /**
   * @generated from enum value: ROLE_OR_PERMISSION_ADMIN_USERS = 7;
   */
  ADMIN_USERS = 7,

  /**
   * @generated from enum value: ROLE_OR_PERMISSION_ADMIN_WORKSPACE_CONTENT = 8;
   */
  ADMIN_WORKSPACE_CONTENT = 8,

  /**
   * @generated from enum value: ROLE_OR_PERMISSION_ADMIN_WORKSPACE = 9;
   */
  ADMIN_WORKSPACE = 9,

  /**
   * @generated from enum value: ROLE_OR_PERMISSION_ADMIN_PROJECTS = 10;
   */
  ADMIN_PROJECTS = 10,

  /**
   * @generated from enum value: ROLE_OR_PERMISSION_NEW_WORKSPACE_CLUSTER = 11;
   */
  NEW_WORKSPACE_CLUSTER = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(User_RoleOrPermission)
proto3.util.setEnumType(User_RoleOrPermission, "gitpod.v1.User.RoleOrPermission", [
  { no: 0, name: "ROLE_OR_PERMISSION_UNSPECIFIED" },
  { no: 1, name: "ROLE_OR_PERMISSION_DEVOPS" },
  { no: 2, name: "ROLE_OR_PERMISSION_VIEWER" },
  { no: 3, name: "ROLE_OR_PERMISSION_ADMIN" },
  { no: 4, name: "ROLE_OR_PERMISSION_DEVELOPER" },
  { no: 5, name: "ROLE_OR_PERMISSION_REGISTRY_ACCESS" },
  { no: 6, name: "ROLE_OR_PERMISSION_ADMIN_PERMISSIONS" },
  { no: 7, name: "ROLE_OR_PERMISSION_ADMIN_USERS" },
  { no: 8, name: "ROLE_OR_PERMISSION_ADMIN_WORKSPACE_CONTENT" },
  { no: 9, name: "ROLE_OR_PERMISSION_ADMIN_WORKSPACE" },
  { no: 10, name: "ROLE_OR_PERMISSION_ADMIN_PROJECTS" },
  { no: 11, name: "ROLE_OR_PERMISSION_NEW_WORKSPACE_CLUSTER" },
]);

/**
 * @generated from message gitpod.v1.User.AdditionalUserData
 */
export class User_AdditionalUserData extends Message<User_AdditionalUserData> {
  /**
   * user globol workspace timeout
   *
   * +optional
   *
   * @generated from field: string workspace_timeout = 1;
   */
  workspaceTimeout = "";

  /**
   * control whether to enable the closed timeout of a workspace, i.e. close web ide, disconnect ssh connection
   *
   * +optional
   *
   * @generated from field: bool disabled_closed_timeout = 2;
   */
  disabledClosedTimeout = false;

  /**
   * +optional
   *
   * @generated from field: gitpod.v1.User.AdditionalUserData.EmailNotificationSettings email_notification_settings = 3;
   */
  emailNotificationSettings?: User_AdditionalUserData_EmailNotificationSettings;

  /**
   * +optional
   *
   * @generated from field: bool feature_preview = 4;
   */
  featurePreview = false;

  /**
   * +optional
   *
   * @generated from field: gitpod.v1.User.AdditionalUserData.IDESettings ide_settings = 5;
   */
  ideSettings?: User_AdditionalUserData_IDESettings;

  /**
   * Git clone URL pointing to the user's dotfile repo
   *
   * // +optional
   *
   * @generated from field: string dotfile_repo = 6;
   */
  dotfileRepo = "";

  /**
   * preferred workspace class
   *
   * +optional
   *
   * @generated from field: string workspace_class = 7;
   */
  workspaceClass = "";

  /**
   * additional user profile data
   *
   * +optional
   *
   * @generated from field: gitpod.v1.User.AdditionalUserData.ProfileDetails profile = 8;
   */
  profile?: User_AdditionalUserData_ProfileDetails;

  /**
   * remembered workspace auto start options
   *
   * +optional
   *
   * @generated from field: repeated gitpod.v1.User.AdditionalUserData.WorkspaceAutostartOption workspace_autostart_options = 9;
   */
  workspaceAutostartOptions: User_AdditionalUserData_WorkspaceAutostartOption[] = [];

  constructor(data?: PartialMessage<User_AdditionalUserData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.User.AdditionalUserData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_timeout", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "disabled_closed_timeout", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "email_notification_settings", kind: "message", T: User_AdditionalUserData_EmailNotificationSettings },
    { no: 4, name: "feature_preview", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "ide_settings", kind: "message", T: User_AdditionalUserData_IDESettings },
    { no: 6, name: "dotfile_repo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "workspace_class", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "profile", kind: "message", T: User_AdditionalUserData_ProfileDetails },
    { no: 9, name: "workspace_autostart_options", kind: "message", T: User_AdditionalUserData_WorkspaceAutostartOption, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User_AdditionalUserData {
    return new User_AdditionalUserData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User_AdditionalUserData {
    return new User_AdditionalUserData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User_AdditionalUserData {
    return new User_AdditionalUserData().fromJsonString(jsonString, options);
  }

  static equals(a: User_AdditionalUserData | PlainMessage<User_AdditionalUserData> | undefined, b: User_AdditionalUserData | PlainMessage<User_AdditionalUserData> | undefined): boolean {
    return proto3.util.equals(User_AdditionalUserData, a, b);
  }
}

/**
 * @generated from message gitpod.v1.User.AdditionalUserData.EmailNotificationSettings
 */
export class User_AdditionalUserData_EmailNotificationSettings extends Message<User_AdditionalUserData_EmailNotificationSettings> {
  /**
   * +optional
   *
   * @generated from field: bool allows_changelog_mail = 1;
   */
  allowsChangelogMail = false;

  /**
   * +optional
   *
   * @generated from field: bool allows_devx_mail = 2;
   */
  allowsDevxMail = false;

  /**
   * +optional
   *
   * @generated from field: bool allows_onboarding_mail = 3;
   */
  allowsOnboardingMail = false;

  constructor(data?: PartialMessage<User_AdditionalUserData_EmailNotificationSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.User.AdditionalUserData.EmailNotificationSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "allows_changelog_mail", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "allows_devx_mail", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "allows_onboarding_mail", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User_AdditionalUserData_EmailNotificationSettings {
    return new User_AdditionalUserData_EmailNotificationSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User_AdditionalUserData_EmailNotificationSettings {
    return new User_AdditionalUserData_EmailNotificationSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User_AdditionalUserData_EmailNotificationSettings {
    return new User_AdditionalUserData_EmailNotificationSettings().fromJsonString(jsonString, options);
  }

  static equals(a: User_AdditionalUserData_EmailNotificationSettings | PlainMessage<User_AdditionalUserData_EmailNotificationSettings> | undefined, b: User_AdditionalUserData_EmailNotificationSettings | PlainMessage<User_AdditionalUserData_EmailNotificationSettings> | undefined): boolean {
    return proto3.util.equals(User_AdditionalUserData_EmailNotificationSettings, a, b);
  }
}

/**
 * @generated from message gitpod.v1.User.AdditionalUserData.IDESettings
 */
export class User_AdditionalUserData_IDESettings extends Message<User_AdditionalUserData_IDESettings> {
  /**
   * +optional
   *
   * @generated from field: string setting_version = 1;
   */
  settingVersion = "";

  /**
   * +optional
   *
   * @generated from field: string default_ide = 2;
   */
  defaultIde = "";

  /**
   * +optional
   *
   * @generated from field: bool use_latest_version = 3;
   */
  useLatestVersion = false;

  constructor(data?: PartialMessage<User_AdditionalUserData_IDESettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.User.AdditionalUserData.IDESettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "setting_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "default_ide", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "use_latest_version", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User_AdditionalUserData_IDESettings {
    return new User_AdditionalUserData_IDESettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User_AdditionalUserData_IDESettings {
    return new User_AdditionalUserData_IDESettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User_AdditionalUserData_IDESettings {
    return new User_AdditionalUserData_IDESettings().fromJsonString(jsonString, options);
  }

  static equals(a: User_AdditionalUserData_IDESettings | PlainMessage<User_AdditionalUserData_IDESettings> | undefined, b: User_AdditionalUserData_IDESettings | PlainMessage<User_AdditionalUserData_IDESettings> | undefined): boolean {
    return proto3.util.equals(User_AdditionalUserData_IDESettings, a, b);
  }
}

/**
 * @generated from message gitpod.v1.User.AdditionalUserData.ProfileDetails
 */
export class User_AdditionalUserData_ProfileDetails extends Message<User_AdditionalUserData_ProfileDetails> {
  /**
   * when was the last time the user updated their profile information or has been nudged to do so.
   *
   * +optional
   *
   * @generated from field: string last_updated_details_nudge = 1;
   */
  lastUpdatedDetailsNudge = "";

  /**
   * when was the last time the user has accepted our privacy policy
   *
   * +optional
   *
   * @generated from field: string accepted_privacy_policy_date = 2;
   */
  acceptedPrivacyPolicyDate = "";

  /**
   * the user's company name
   *
   * +optional
   *
   * @generated from field: string company_name = 3;
   */
  companyName = "";

  /**
   * the user's email
   *
   * +optional
   *
   * @generated from field: string email_address = 4;
   */
  emailAddress = "";

  /**
   * type of role user has in their job
   *
   * +optional
   *
   * @generated from field: string job_role = 5;
   */
  jobRole = "";

  /**
   * freeform entry for job role user works in (when jobRole is "other")
   *
   * +optional
   *
   * @generated from field: string job_role_other = 6;
   */
  jobRoleOther = "";

  /**
   * Reasons user is exploring Gitpod when they signed up
   *
   * +optional
   *
   * @generated from field: repeated string exploration_reasons = 7;
   */
  explorationReasons: string[] = [];

  /**
   * what user hopes to accomplish when they signed up
   *
   * +optional
   *
   * @generated from field: repeated string signup_goals = 8;
   */
  signupGoals: string[] = [];

  /**
   * freeform entry for signup goals (when signupGoals is "other")
   *
   * +optional
   *
   * @generated from field: string signup_goals_other = 10;
   */
  signupGoalsOther = "";

  /**
   * Set after a user completes the onboarding flow
   *
   * +optional
   *
   * @generated from field: string onboarded_timestamp = 11;
   */
  onboardedTimestamp = "";

  /**
   * Onboarding question about a user's company size
   *
   * +optional
   *
   * @generated from field: string company_size = 12;
   */
  companySize = "";

  constructor(data?: PartialMessage<User_AdditionalUserData_ProfileDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.User.AdditionalUserData.ProfileDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_updated_details_nudge", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "accepted_privacy_policy_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "company_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "email_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "job_role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "job_role_other", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "exploration_reasons", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "signup_goals", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "signup_goals_other", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "onboarded_timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "company_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User_AdditionalUserData_ProfileDetails {
    return new User_AdditionalUserData_ProfileDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User_AdditionalUserData_ProfileDetails {
    return new User_AdditionalUserData_ProfileDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User_AdditionalUserData_ProfileDetails {
    return new User_AdditionalUserData_ProfileDetails().fromJsonString(jsonString, options);
  }

  static equals(a: User_AdditionalUserData_ProfileDetails | PlainMessage<User_AdditionalUserData_ProfileDetails> | undefined, b: User_AdditionalUserData_ProfileDetails | PlainMessage<User_AdditionalUserData_ProfileDetails> | undefined): boolean {
    return proto3.util.equals(User_AdditionalUserData_ProfileDetails, a, b);
  }
}

/**
 * @generated from message gitpod.v1.User.AdditionalUserData.WorkspaceAutostartOption
 */
export class User_AdditionalUserData_WorkspaceAutostartOption extends Message<User_AdditionalUserData_WorkspaceAutostartOption> {
  /**
   * @generated from field: string clone_url = 1;
   */
  cloneUrl = "";

  /**
   * @generated from field: string organization_id = 2;
   */
  organizationId = "";

  /**
   * @generated from field: string workspace_class = 3;
   */
  workspaceClass = "";

  /**
   * +optional
   *
   * @generated from field: gitpod.v1.User.AdditionalUserData.IDESettings ide_settings = 4;
   */
  ideSettings?: User_AdditionalUserData_IDESettings;

  /**
   * +optional
   *
   * @generated from field: string region = 5;
   */
  region = "";

  constructor(data?: PartialMessage<User_AdditionalUserData_WorkspaceAutostartOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.User.AdditionalUserData.WorkspaceAutostartOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clone_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workspace_class", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ide_settings", kind: "message", T: User_AdditionalUserData_IDESettings },
    { no: 5, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User_AdditionalUserData_WorkspaceAutostartOption {
    return new User_AdditionalUserData_WorkspaceAutostartOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User_AdditionalUserData_WorkspaceAutostartOption {
    return new User_AdditionalUserData_WorkspaceAutostartOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User_AdditionalUserData_WorkspaceAutostartOption {
    return new User_AdditionalUserData_WorkspaceAutostartOption().fromJsonString(jsonString, options);
  }

  static equals(a: User_AdditionalUserData_WorkspaceAutostartOption | PlainMessage<User_AdditionalUserData_WorkspaceAutostartOption> | undefined, b: User_AdditionalUserData_WorkspaceAutostartOption | PlainMessage<User_AdditionalUserData_WorkspaceAutostartOption> | undefined): boolean {
    return proto3.util.equals(User_AdditionalUserData_WorkspaceAutostartOption, a, b);
  }
}

/**
 * @generated from message gitpod.v1.Identity
 */
export class Identity extends Message<Identity> {
  /**
   * The id of the auth provider this identity was created with.
   *
   * @generated from field: string auth_provider_id = 1;
   */
  authProviderId = "";

  /**
   * The external account id this identity was created for.
   *
   * @generated from field: string auth_id = 2;
   */
  authId = "";

  /**
   * The external account name this identity was created for.
   *
   * @generated from field: string auth_name = 3;
   */
  authName = "";

  /**
   * The primary email of the external account.
   *
   * @generated from field: string primary_email = 4;
   */
  primaryEmail = "";

  /**
   * The time of last signin.
   *
   * +optional
   *
   * @generated from field: google.protobuf.Timestamp last_signin_time = 6;
   */
  lastSigninTime?: Timestamp;

  constructor(data?: PartialMessage<Identity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gitpod.v1.Identity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auth_provider_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "auth_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "auth_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "primary_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "last_signin_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Identity {
    return new Identity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Identity {
    return new Identity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Identity {
    return new Identity().fromJsonString(jsonString, options);
  }

  static equals(a: Identity | PlainMessage<Identity> | undefined, b: Identity | PlainMessage<Identity> | undefined): boolean {
    return proto3.util.equals(Identity, a, b);
  }
}
