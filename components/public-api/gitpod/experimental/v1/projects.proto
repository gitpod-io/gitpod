syntax = "proto3";

package gitpod.experimental.v1;

option go_package = "github.com/gitpod-io/gitpod/components/public-api/go/experimental/v1";

import "google/protobuf/timestamp.proto";
import "gitpod/experimental/v1/pagination.proto";


message Project {
    // ID is the unique identifier for the project.
    // Read only.
    string id = 1;

    // Team ID is the Team this Project belongs to.
    // team_id will be empty if the Project belongs to a User, in which case user_id will be set.
    string team_id = 2;

    // User ID is the User this Project belongs to.
    // user_id will be empty if the Project belongs to a Team, in which case team_id will be set.
    string user_id = 3;

    // Name is the name of the Project.
    // Required.
    string name = 4;

    // Slug is a short-hand identifier for a project.
    // Read-only.
    string slug = 5;

    // Clone URL is the clone URL on which this Project is based.
    // Required.
    string clone_url = 6;

    // Time when the Project was created.
    // Read-only.
    google.protobuf.Timestamp creation_time = 7;

    // Settings are configuration options for a Project.
    ProjectSettings settings = 8;
}

message ProjectSettings {
    PrebuildSettings prebuild = 1;
    WorkspaceSettings workspace = 2;
}

message PrebuildSettings {
    bool enable_incremental_prebuilds = 1;
    bool keep_outdated_prebuilds_running = 2;
    bool use_previous_prebuilds = 3;
    int32 prebuild_every_nth = 4;
}

message WorkspaceSettings {
    bool enable_persistent_volume_claim = 1;
    WorkspaceClassSettings workspace_class = 2;
}

message WorkspaceClassSettings {
    string regular = 1;
    string prebuild = 2;
}

service ProjectsService {
    // Creates a new project.
    rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {};

    // Retrieves a project.
    rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {};

    // Lists projects.
    rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {};

    // Deletes a project.
    rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {};
}

message CreateProjectRequest {
    Project project = 1;
}

message CreateProjectResponse {
    Project project = 1;
}

message GetProjectRequest {
    string project_id = 1;
}

message GetProjectResponse {
    Project project = 1;
}

message ListProjectsRequest {
    // User ID filters Projects owned by user_id
    string user_id = 1;

    // Team ID filters Projects owned by team_id
    string team_id = 2;

    // Page information
    Pagination pagination = 3;
}

message ListProjectsResponse {
    repeated Project projects = 1;

    int32 total_results = 2;
}

message DeleteProjectRequest {
    string project_id = 1;
}

message DeleteProjectResponse {}
