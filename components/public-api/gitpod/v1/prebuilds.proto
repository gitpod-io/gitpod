syntax = "proto3";

package gitpod.v1;

import "gitpod/v1/workspaces.proto";

option go_package = "github.com/gitpod-io/gitpod/public-api/v1";

// import "gitpod/v1/pagination.proto";

service PrebuildsService {

    // GetPrebuild retrieves a single rebuild.
    // Errors:
    //   NOT_FOUND if the prebuild_id does not exist
    rpc GetPrebuild(GetPrebuildRequest) returns (GetPrebuildResponse) {}

    // GetRunningPrebuild returns the prebuild ID of a running prebuild,
    // or NOT_FOUND if there is no prebuild running for the content_url.
    rpc GetRunningPrebuild(GetRunningPrebuildRequest) returns (GetRunningPrebuildResponse) {}

    // ListenToPrebuildStatus streams status updates for a prebuild. If the prebuild is already
    // in the Done phase, only that single status is streamed.
    rpc ListenToPrebuildStatus(ListenToPrebuildStatusRequest) returns (stream ListenToPrebuildStatusResponse) {}

    // ListenToPrebuildLogs returns the log output of a prebuild.
    // This does NOT include an image build if one happened.
    rpc ListenToPrebuildLogs(ListenToPrebuildLogsRequest) returns (stream ListenToPrebuildLogsResponse) {}

}

message GetPrebuildRequest {
    string prebuild_id = 1;
}
message GetPrebuildResponse {
    Prebuild prebuild = 1;
}

message GetRunningPrebuildRequest {
    string context_url = 1;
}
message GetRunningPrebuildResponse {
    Prebuild prebuild = 1;
}

message ListenToPrebuildStatusRequest{
    string prebuild_id = 1;
}
message ListenToPrebuildStatusResponse {
    PrebuildStatus status = 1;
}

message ListenToPrebuildLogsRequest {
    string prebuild_id = 1;
}
message ListenToPrebuildLogsResponse {
    string line = 1;
}

////////////////////////////////
// Shared messages come here
////////////////////////////////

// Prebuild describes a prebuild
message Prebuild {
    string prebuild_id = 1;
    PrebuildSpec spec = 2;
    PrebuildStatus status = 3;
}

// PrebuildSpec specifies the prebuild input.
message PrebuildSpec {
    WorkspaceContext context = 1;

    // Incremental prebuilds are based on other prebuilds. If this field is true,
    // expect the context detail to point to another prebuild.
    bool incremental = 2;
}

// PrebuildStatus describes the prebuild status.
message PrebuildStatus {
    enum Phase {
        PHASE_UNSPECIFIED = 0;
        PHASE_PENDING = 1;
        PHASE_RUNNING = 2;
        PHASE_DONE = 3;
    }
    enum Result {
        RESULT_UNSPECIFIED = 0;
        RESULT_SUCCESS = 1;
        RESULT_USER_CANCELED = 2;
        RESULT_SYSTEM_FAILURE = 3;
        RESULT_TASK_FAILURE = 4;
    }

    // Phase is the prebuild phase we're in
    Phase phase = 1;

    // Result indicates what result the prebuild produced, i.e. if it ran
    // successfully or failed for some reason. If phase != done, this field
    // will have RESULT_UNSPECIFIED as value.
    Result result = 2;

    // result_message contains a human readable message describing the prebuild
    // result. E.g. if teh result is SYSTEM_FAILURE, the message describes what
    // that failure was.
    string result_message = 3;
}
