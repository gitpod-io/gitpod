syntax = "proto3";

package gitpod.v1;

import "gitpod/v1/pagination.proto";
import "gitpod/v1/sorting.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/gitpod-io/gitpod/components/public-api/go/v1";

message Configuration {
  string id = 1;
  string organization_id = 2;
  string name = 3;
  string clone_url = 4;
  google.protobuf.Timestamp creation_time = 5;
  PrebuildSettings prebuild_settings = 6;
  WorkspaceSettings workspace_settings = 7;
}

message PrebuildSettings {
  bool enabled = 1;
  string branch_matching_pattern = 2;
  BranchMatchingStrategy branch_strategy = 3;
  int32 prebuild_interval = 4;
  string workspace_class = 5;
}

enum BranchMatchingStrategy {
  BRANCH_MATCHING_STRATEGY_UNSPECIFIED = 0;
  BRANCH_MATCHING_STRATEGY_DEFAULT_BRANCH = 1;
  BRANCH_MATCHING_STRATEGY_ALL_BRANCHES = 2;
  BRANCH_MATCHING_STRATEGY_MATCHED_BRANCHES = 3;
}

message WorkspaceSettings {
  string workspace_class = 1;
  repeated string restricted_workspace_classes = 2;
  repeated string restricted_editor_names = 3;
}

service ConfigurationService {
  // Creates a new configuration.
  rpc CreateConfiguration(CreateConfigurationRequest) returns (CreateConfigurationResponse) {}

  // Retrieves a configuration.
  rpc GetConfiguration(GetConfigurationRequest) returns (GetConfigurationResponse) {}

  // Lists configurations.
  rpc ListConfigurations(ListConfigurationsRequest) returns (ListConfigurationsResponse) {}

  // Updates a configuration.
  rpc UpdateConfiguration(UpdateConfigurationRequest) returns (UpdateConfigurationResponse) {}

  // Deletes a configuration.
  rpc DeleteConfiguration(DeleteConfigurationRequest) returns (DeleteConfigurationResponse) {}
}

message CreateConfigurationRequest {
  string organization_id = 1;
  string name = 2;
  string clone_url = 3;
}

message CreateConfigurationResponse {
  Configuration configuration = 1;
}

message GetConfigurationRequest {
  string configuration_id = 1;
}

message GetConfigurationResponse {
  Configuration configuration = 1;
}

message ListConfigurationsRequest {
  string organization_id = 1;
  string search_term = 2;
  PaginationRequest pagination = 3;
  // Configurations can be sorted by "name" OR "creationTime"
  repeated Sort sort = 4;
  // Will filter for configurations that have prebuilds enabled/disabled, or both if not set.
  optional bool prebuilds_enabled = 5;
}

message ListConfigurationsResponse {
  repeated Configuration configurations = 1;
  PaginationResponse pagination = 2;
}

message UpdateConfigurationRequest {
  message PrebuildSettings {
    optional bool enabled = 1;
    optional string branch_matching_pattern = 2;
    optional BranchMatchingStrategy branch_strategy = 3;
    optional int32 prebuild_interval = 4;
    optional string workspace_class = 5;
  }
  message WorkspaceSettings {
    optional string workspace_class = 1;

    // restricted_workspace_classes specifies the workspace classes that are NOT allowed to be used in this configuration.
    // If empty, all workspace classes are allowed.
    // Only updates if update_restricted_workspace_classes is true.
    repeated string restricted_workspace_classes = 2;

    // Specifies whether restricted_workspace_classes should be updated.
    optional bool update_restricted_workspace_classes = 3;

    // restricted_editor_names specifies the editor names that are NOT allowed to be used in this configuration.
    // If empty, all editors are allowed.
    // Only updates if update_restricted_editor_names is true.
    repeated string restricted_editor_names = 4;
    // Specifies whether restricted_editor_names should be updated.
    optional bool update_restricted_editor_names = 5;
  }
  string configuration_id = 1;
  optional string name = 2;
  optional PrebuildSettings prebuild_settings = 3;
  optional WorkspaceSettings workspace_settings = 4;
}

message UpdateConfigurationResponse {
  Configuration configuration = 1;
}

message DeleteConfigurationRequest {
  string configuration_id = 1;
}

message DeleteConfigurationResponse {}
