// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/experimental/v1/idp.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gitpod-io/gitpod/components/public-api/go/experimental/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IDPServiceName is the fully-qualified name of the IDPService service.
	IDPServiceName = "gitpod.experimental.v1.IDPService"
)

// IDPServiceClient is a client for the gitpod.experimental.v1.IDPService service.
type IDPServiceClient interface {
	// GetIDToken produces a new IT token
	GetIDToken(context.Context, *connect_go.Request[v1.GetIDTokenRequest]) (*connect_go.Response[v1.GetIDTokenResponse], error)
}

// NewIDPServiceClient constructs a client for the gitpod.experimental.v1.IDPService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIDPServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IDPServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &iDPServiceClient{
		getIDToken: connect_go.NewClient[v1.GetIDTokenRequest, v1.GetIDTokenResponse](
			httpClient,
			baseURL+"/gitpod.experimental.v1.IDPService/GetIDToken",
			opts...,
		),
	}
}

// iDPServiceClient implements IDPServiceClient.
type iDPServiceClient struct {
	getIDToken *connect_go.Client[v1.GetIDTokenRequest, v1.GetIDTokenResponse]
}

// GetIDToken calls gitpod.experimental.v1.IDPService.GetIDToken.
func (c *iDPServiceClient) GetIDToken(ctx context.Context, req *connect_go.Request[v1.GetIDTokenRequest]) (*connect_go.Response[v1.GetIDTokenResponse], error) {
	return c.getIDToken.CallUnary(ctx, req)
}

// IDPServiceHandler is an implementation of the gitpod.experimental.v1.IDPService service.
type IDPServiceHandler interface {
	// GetIDToken produces a new IT token
	GetIDToken(context.Context, *connect_go.Request[v1.GetIDTokenRequest]) (*connect_go.Response[v1.GetIDTokenResponse], error)
}

// NewIDPServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIDPServiceHandler(svc IDPServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/gitpod.experimental.v1.IDPService/GetIDToken", connect_go.NewUnaryHandler(
		"/gitpod.experimental.v1.IDPService/GetIDToken",
		svc.GetIDToken,
		opts...,
	))
	return "/gitpod.experimental.v1.IDPService/", mux
}

// UnimplementedIDPServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIDPServiceHandler struct{}

func (UnimplementedIDPServiceHandler) GetIDToken(context.Context, *connect_go.Request[v1.GetIDTokenRequest]) (*connect_go.Response[v1.GetIDTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.experimental.v1.IDPService.GetIDToken is not implemented"))
}
