// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: gitpod/v1/user.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User_UserFeatureFlag int32

const (
	User_USER_FEATURE_FLAG_UNSPECIFIED                   User_UserFeatureFlag = 0
	User_USER_FEATURE_FLAG_FULL_WORKSPACE_BACKUP         User_UserFeatureFlag = 1
	User_USER_FEATURE_FLAG_WORKSPACE_CLASS_LIMITING      User_UserFeatureFlag = 2
	User_USER_FEATURE_FLAG_WORKSPACE_CONNECTION_LIMITING User_UserFeatureFlag = 3
	User_USER_FEATURE_FLAG_WORKSPACE_PSI                 User_UserFeatureFlag = 4
)

// Enum value maps for User_UserFeatureFlag.
var (
	User_UserFeatureFlag_name = map[int32]string{
		0: "USER_FEATURE_FLAG_UNSPECIFIED",
		1: "USER_FEATURE_FLAG_FULL_WORKSPACE_BACKUP",
		2: "USER_FEATURE_FLAG_WORKSPACE_CLASS_LIMITING",
		3: "USER_FEATURE_FLAG_WORKSPACE_CONNECTION_LIMITING",
		4: "USER_FEATURE_FLAG_WORKSPACE_PSI",
	}
	User_UserFeatureFlag_value = map[string]int32{
		"USER_FEATURE_FLAG_UNSPECIFIED":                   0,
		"USER_FEATURE_FLAG_FULL_WORKSPACE_BACKUP":         1,
		"USER_FEATURE_FLAG_WORKSPACE_CLASS_LIMITING":      2,
		"USER_FEATURE_FLAG_WORKSPACE_CONNECTION_LIMITING": 3,
		"USER_FEATURE_FLAG_WORKSPACE_PSI":                 4,
	}
)

func (x User_UserFeatureFlag) Enum() *User_UserFeatureFlag {
	p := new(User_UserFeatureFlag)
	*p = x
	return p
}

func (x User_UserFeatureFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_UserFeatureFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_user_proto_enumTypes[0].Descriptor()
}

func (User_UserFeatureFlag) Type() protoreflect.EnumType {
	return &file_gitpod_v1_user_proto_enumTypes[0]
}

func (x User_UserFeatureFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_UserFeatureFlag.Descriptor instead.
func (User_UserFeatureFlag) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_user_proto_rawDescGZIP(), []int{2, 0}
}

type User_RoleOrPermission int32

const (
	User_ROLE_OR_PERMISSION_UNSPECIFIED             User_RoleOrPermission = 0
	User_ROLE_OR_PERMISSION_DEVOPS                  User_RoleOrPermission = 1
	User_ROLE_OR_PERMISSION_VIEWER                  User_RoleOrPermission = 2
	User_ROLE_OR_PERMISSION_ADMIN                   User_RoleOrPermission = 3
	User_ROLE_OR_PERMISSION_DEVELOPER               User_RoleOrPermission = 4
	User_ROLE_OR_PERMISSION_REGISTRY_ACCESS         User_RoleOrPermission = 5
	User_ROLE_OR_PERMISSION_ADMIN_PERMISSIONS       User_RoleOrPermission = 6
	User_ROLE_OR_PERMISSION_ADMIN_USERS             User_RoleOrPermission = 7
	User_ROLE_OR_PERMISSION_ADMIN_WORKSPACE_CONTENT User_RoleOrPermission = 8
	User_ROLE_OR_PERMISSION_ADMIN_WORKSPACES        User_RoleOrPermission = 9
	User_ROLE_OR_PERMISSION_ADMIN_PROJECTS          User_RoleOrPermission = 10
	User_ROLE_OR_PERMISSION_NEW_WORKSPACE_CLUSTER   User_RoleOrPermission = 11
)

// Enum value maps for User_RoleOrPermission.
var (
	User_RoleOrPermission_name = map[int32]string{
		0:  "ROLE_OR_PERMISSION_UNSPECIFIED",
		1:  "ROLE_OR_PERMISSION_DEVOPS",
		2:  "ROLE_OR_PERMISSION_VIEWER",
		3:  "ROLE_OR_PERMISSION_ADMIN",
		4:  "ROLE_OR_PERMISSION_DEVELOPER",
		5:  "ROLE_OR_PERMISSION_REGISTRY_ACCESS",
		6:  "ROLE_OR_PERMISSION_ADMIN_PERMISSIONS",
		7:  "ROLE_OR_PERMISSION_ADMIN_USERS",
		8:  "ROLE_OR_PERMISSION_ADMIN_WORKSPACE_CONTENT",
		9:  "ROLE_OR_PERMISSION_ADMIN_WORKSPACES",
		10: "ROLE_OR_PERMISSION_ADMIN_PROJECTS",
		11: "ROLE_OR_PERMISSION_NEW_WORKSPACE_CLUSTER",
	}
	User_RoleOrPermission_value = map[string]int32{
		"ROLE_OR_PERMISSION_UNSPECIFIED":             0,
		"ROLE_OR_PERMISSION_DEVOPS":                  1,
		"ROLE_OR_PERMISSION_VIEWER":                  2,
		"ROLE_OR_PERMISSION_ADMIN":                   3,
		"ROLE_OR_PERMISSION_DEVELOPER":               4,
		"ROLE_OR_PERMISSION_REGISTRY_ACCESS":         5,
		"ROLE_OR_PERMISSION_ADMIN_PERMISSIONS":       6,
		"ROLE_OR_PERMISSION_ADMIN_USERS":             7,
		"ROLE_OR_PERMISSION_ADMIN_WORKSPACE_CONTENT": 8,
		"ROLE_OR_PERMISSION_ADMIN_WORKSPACES":        9,
		"ROLE_OR_PERMISSION_ADMIN_PROJECTS":          10,
		"ROLE_OR_PERMISSION_NEW_WORKSPACE_CLUSTER":   11,
	}
)

func (x User_RoleOrPermission) Enum() *User_RoleOrPermission {
	p := new(User_RoleOrPermission)
	*p = x
	return p
}

func (x User_RoleOrPermission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_RoleOrPermission) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_user_proto_enumTypes[1].Descriptor()
}

func (User_RoleOrPermission) Type() protoreflect.EnumType {
	return &file_gitpod_v1_user_proto_enumTypes[1]
}

func (x User_RoleOrPermission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_RoleOrPermission.Descriptor instead.
func (User_RoleOrPermission) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_user_proto_rawDescGZIP(), []int{2, 1}
}

type GetAuthenticatedUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAuthenticatedUserRequest) Reset() {
	*x = GetAuthenticatedUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthenticatedUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthenticatedUserRequest) ProtoMessage() {}

func (x *GetAuthenticatedUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthenticatedUserRequest.ProtoReflect.Descriptor instead.
func (*GetAuthenticatedUserRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_user_proto_rawDescGZIP(), []int{0}
}

type GetAuthenticatedUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetAuthenticatedUserResponse) Reset() {
	*x = GetAuthenticatedUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthenticatedUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthenticatedUserResponse) ProtoMessage() {}

func (x *GetAuthenticatedUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthenticatedUserResponse.ProtoReflect.Descriptor instead.
func (*GetAuthenticatedUserResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_user_proto_rawDescGZIP(), []int{1}
}

func (x *GetAuthenticatedUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is a UUID of the user
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// organization_id is the id of the organization this account is owned by.
	//
	// +optional if not set, this account is owned by the installation.
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// name is the full name of the user
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// avatar_url is a link to the user avatar
	AvatarUrl string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	// created_at is the creation time
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Identities []*Identity            `protobuf:"bytes,6,rep,name=identities,proto3" json:"identities,omitempty"`
	// blocked indicates whether the account is blocked, e.g. due to vialoation of ToS.
	Blocked bool `protobuf:"varint,7,opt,name=blocked,proto3" json:"blocked,omitempty"`
	// last_verification_time is the last time this account was verified.
	//
	// +optional if not set, this account is not verified.
	LastVerificationTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_verification_time,json=lastVerificationTime,proto3" json:"last_verification_time,omitempty"`
	// verification_phone_number is the phone number used for the last verification.
	VerificationPhoneNumber string `protobuf:"bytes,9,opt,name=verification_phone_number,json=verificationPhoneNumber,proto3" json:"verification_phone_number,omitempty"`
	// user global workspace timeout settings
	//
	// +optional
	WorkspaceTimeoutSettings *User_WorkspaceTimeoutSettings `protobuf:"bytes,10,opt,name=workspace_timeout_settings,json=workspaceTimeoutSettings,proto3" json:"workspace_timeout_settings,omitempty"`
	// +optional
	EmailNotificationSettings *User_EmailNotificationSettings `protobuf:"bytes,11,opt,name=email_notification_settings,json=emailNotificationSettings,proto3" json:"email_notification_settings,omitempty"`
	// +optional
	EditorSettings *EditorReference `protobuf:"bytes,12,opt,name=editor_settings,json=editorSettings,proto3" json:"editor_settings,omitempty"`
	// Git clone URL pointing to the user's dotfile repo
	//
	// // +optional
	DotfileRepo string `protobuf:"bytes,13,opt,name=dotfile_repo,json=dotfileRepo,proto3" json:"dotfile_repo,omitempty"`
	// preferred workspace class
	//
	// +optional
	WorkspaceClass string `protobuf:"bytes,14,opt,name=workspace_class,json=workspaceClass,proto3" json:"workspace_class,omitempty"`
	// additional user profile data
	//
	// +optional
	Profile *User_ProfileDetails `protobuf:"bytes,15,opt,name=profile,proto3" json:"profile,omitempty"`
	// remembered workspace auto start options
	//
	// +optional
	WorkspaceAutostartOptions []*User_WorkspaceAutostartOption `protobuf:"bytes,16,rep,name=workspace_autostart_options,json=workspaceAutostartOptions,proto3" json:"workspace_autostart_options,omitempty"`
	// usage_attribution_id specifies the organization or account to which all of the
	// user's workspace usage is attributed to, e.g. for billing purposes
	UsageAttributionId string `protobuf:"bytes,17,opt,name=usage_attribution_id,json=usageAttributionId,proto3" json:"usage_attribution_id,omitempty"`
	// per-user settings to control workspace behavior
	WorkspaceFeatureFlags []User_UserFeatureFlag `protobuf:"varint,18,rep,packed,name=workspace_feature_flags,json=workspaceFeatureFlags,proto3,enum=gitpod.v1.User_UserFeatureFlag" json:"workspace_feature_flags,omitempty"`
	// specifies the permissions and/or roles the user has
	RolesOrPermissions []User_RoleOrPermission `protobuf:"varint,19,rep,packed,name=roles_or_permissions,json=rolesOrPermissions,proto3,enum=gitpod.v1.User_RoleOrPermission" json:"roles_or_permissions,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_user_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetIdentities() []*Identity {
	if x != nil {
		return x.Identities
	}
	return nil
}

func (x *User) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *User) GetLastVerificationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastVerificationTime
	}
	return nil
}

func (x *User) GetVerificationPhoneNumber() string {
	if x != nil {
		return x.VerificationPhoneNumber
	}
	return ""
}

func (x *User) GetWorkspaceTimeoutSettings() *User_WorkspaceTimeoutSettings {
	if x != nil {
		return x.WorkspaceTimeoutSettings
	}
	return nil
}

func (x *User) GetEmailNotificationSettings() *User_EmailNotificationSettings {
	if x != nil {
		return x.EmailNotificationSettings
	}
	return nil
}

func (x *User) GetEditorSettings() *EditorReference {
	if x != nil {
		return x.EditorSettings
	}
	return nil
}

func (x *User) GetDotfileRepo() string {
	if x != nil {
		return x.DotfileRepo
	}
	return ""
}

func (x *User) GetWorkspaceClass() string {
	if x != nil {
		return x.WorkspaceClass
	}
	return ""
}

func (x *User) GetProfile() *User_ProfileDetails {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *User) GetWorkspaceAutostartOptions() []*User_WorkspaceAutostartOption {
	if x != nil {
		return x.WorkspaceAutostartOptions
	}
	return nil
}

func (x *User) GetUsageAttributionId() string {
	if x != nil {
		return x.UsageAttributionId
	}
	return ""
}

func (x *User) GetWorkspaceFeatureFlags() []User_UserFeatureFlag {
	if x != nil {
		return x.WorkspaceFeatureFlags
	}
	return nil
}

func (x *User) GetRolesOrPermissions() []User_RoleOrPermission {
	if x != nil {
		return x.RolesOrPermissions
	}
	return nil
}

type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the auth provider this identity was created with.
	AuthProviderId string `protobuf:"bytes,1,opt,name=auth_provider_id,json=authProviderId,proto3" json:"auth_provider_id,omitempty"`
	// The external account id this identity was created for.
	AuthId string `protobuf:"bytes,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	// The external account name this identity was created for.
	AuthName string `protobuf:"bytes,3,opt,name=auth_name,json=authName,proto3" json:"auth_name,omitempty"`
	// The primary email of the external account.
	PrimaryEmail string `protobuf:"bytes,4,opt,name=primary_email,json=primaryEmail,proto3" json:"primary_email,omitempty"`
	// The time of last signin.
	//
	// +optional
	LastSigninTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_signin_time,json=lastSigninTime,proto3" json:"last_signin_time,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_user_proto_rawDescGZIP(), []int{3}
}

func (x *Identity) GetAuthProviderId() string {
	if x != nil {
		return x.AuthProviderId
	}
	return ""
}

func (x *Identity) GetAuthId() string {
	if x != nil {
		return x.AuthId
	}
	return ""
}

func (x *Identity) GetAuthName() string {
	if x != nil {
		return x.AuthName
	}
	return ""
}

func (x *Identity) GetPrimaryEmail() string {
	if x != nil {
		return x.PrimaryEmail
	}
	return ""
}

func (x *Identity) GetLastSigninTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSigninTime
	}
	return nil
}

type User_WorkspaceTimeoutSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inacitivity is the maximum time of inactivity before the workspace is stopped or paused
	Inactivity *durationpb.Duration `protobuf:"bytes,1,opt,name=inactivity,proto3" json:"inactivity,omitempty"`
	// control whether to enable the closed timeout of a workspace, i.e. close web ide, disconnect ssh connection
	//
	// +optional
	DisabledDisconnected bool `protobuf:"varint,2,opt,name=disabled_disconnected,json=disabledDisconnected,proto3" json:"disabled_disconnected,omitempty"`
}

func (x *User_WorkspaceTimeoutSettings) Reset() {
	*x = User_WorkspaceTimeoutSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_WorkspaceTimeoutSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_WorkspaceTimeoutSettings) ProtoMessage() {}

func (x *User_WorkspaceTimeoutSettings) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_WorkspaceTimeoutSettings.ProtoReflect.Descriptor instead.
func (*User_WorkspaceTimeoutSettings) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_user_proto_rawDescGZIP(), []int{2, 0}
}

func (x *User_WorkspaceTimeoutSettings) GetInactivity() *durationpb.Duration {
	if x != nil {
		return x.Inactivity
	}
	return nil
}

func (x *User_WorkspaceTimeoutSettings) GetDisabledDisconnected() bool {
	if x != nil {
		return x.DisabledDisconnected
	}
	return false
}

type User_EmailNotificationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	AllowsChangelogMail bool `protobuf:"varint,1,opt,name=allows_changelog_mail,json=allowsChangelogMail,proto3" json:"allows_changelog_mail,omitempty"`
	// +optional
	AllowsDevxMail bool `protobuf:"varint,2,opt,name=allows_devx_mail,json=allowsDevxMail,proto3" json:"allows_devx_mail,omitempty"`
	// +optional
	AllowsOnboardingMail bool `protobuf:"varint,3,opt,name=allows_onboarding_mail,json=allowsOnboardingMail,proto3" json:"allows_onboarding_mail,omitempty"`
}

func (x *User_EmailNotificationSettings) Reset() {
	*x = User_EmailNotificationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_EmailNotificationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_EmailNotificationSettings) ProtoMessage() {}

func (x *User_EmailNotificationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_EmailNotificationSettings.ProtoReflect.Descriptor instead.
func (*User_EmailNotificationSettings) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_user_proto_rawDescGZIP(), []int{2, 1}
}

func (x *User_EmailNotificationSettings) GetAllowsChangelogMail() bool {
	if x != nil {
		return x.AllowsChangelogMail
	}
	return false
}

func (x *User_EmailNotificationSettings) GetAllowsDevxMail() bool {
	if x != nil {
		return x.AllowsDevxMail
	}
	return false
}

func (x *User_EmailNotificationSettings) GetAllowsOnboardingMail() bool {
	if x != nil {
		return x.AllowsOnboardingMail
	}
	return false
}

type User_ProfileDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// when was the last time the user updated their profile information or has been nudged to do so.
	//
	// +optional
	LastUpdatedDetailsNudge string `protobuf:"bytes,1,opt,name=last_updated_details_nudge,json=lastUpdatedDetailsNudge,proto3" json:"last_updated_details_nudge,omitempty"`
	// when was the last time the user has accepted our privacy policy
	//
	// +optional
	AcceptedPrivacyPolicyDate string `protobuf:"bytes,2,opt,name=accepted_privacy_policy_date,json=acceptedPrivacyPolicyDate,proto3" json:"accepted_privacy_policy_date,omitempty"`
	// the user's company name
	//
	// +optional
	CompanyName string `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	// the user's email
	//
	// +optional
	EmailAddress string `protobuf:"bytes,4,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	// type of role user has in their job
	//
	// +optional
	JobRole string `protobuf:"bytes,5,opt,name=job_role,json=jobRole,proto3" json:"job_role,omitempty"`
	// freeform entry for job role user works in (when jobRole is "other")
	//
	// +optional
	JobRoleOther string `protobuf:"bytes,6,opt,name=job_role_other,json=jobRoleOther,proto3" json:"job_role_other,omitempty"`
	// Reasons user is exploring Gitpod when they signed up
	//
	// +optional
	ExplorationReasons []string `protobuf:"bytes,7,rep,name=exploration_reasons,json=explorationReasons,proto3" json:"exploration_reasons,omitempty"`
	// what user hopes to accomplish when they signed up
	//
	// +optional
	SignupGoals []string `protobuf:"bytes,8,rep,name=signup_goals,json=signupGoals,proto3" json:"signup_goals,omitempty"`
	// freeform entry for signup goals (when signupGoals is "other")
	//
	// +optional
	SignupGoalsOther string `protobuf:"bytes,10,opt,name=signup_goals_other,json=signupGoalsOther,proto3" json:"signup_goals_other,omitempty"`
	// Set after a user completes the onboarding flow
	//
	// +optional
	OnboardedTimestamp string `protobuf:"bytes,11,opt,name=onboarded_timestamp,json=onboardedTimestamp,proto3" json:"onboarded_timestamp,omitempty"`
	// Onboarding question about a user's company size
	//
	// +optional
	CompanySize string `protobuf:"bytes,12,opt,name=company_size,json=companySize,proto3" json:"company_size,omitempty"`
}

func (x *User_ProfileDetails) Reset() {
	*x = User_ProfileDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_ProfileDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_ProfileDetails) ProtoMessage() {}

func (x *User_ProfileDetails) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_ProfileDetails.ProtoReflect.Descriptor instead.
func (*User_ProfileDetails) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_user_proto_rawDescGZIP(), []int{2, 2}
}

func (x *User_ProfileDetails) GetLastUpdatedDetailsNudge() string {
	if x != nil {
		return x.LastUpdatedDetailsNudge
	}
	return ""
}

func (x *User_ProfileDetails) GetAcceptedPrivacyPolicyDate() string {
	if x != nil {
		return x.AcceptedPrivacyPolicyDate
	}
	return ""
}

func (x *User_ProfileDetails) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *User_ProfileDetails) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *User_ProfileDetails) GetJobRole() string {
	if x != nil {
		return x.JobRole
	}
	return ""
}

func (x *User_ProfileDetails) GetJobRoleOther() string {
	if x != nil {
		return x.JobRoleOther
	}
	return ""
}

func (x *User_ProfileDetails) GetExplorationReasons() []string {
	if x != nil {
		return x.ExplorationReasons
	}
	return nil
}

func (x *User_ProfileDetails) GetSignupGoals() []string {
	if x != nil {
		return x.SignupGoals
	}
	return nil
}

func (x *User_ProfileDetails) GetSignupGoalsOther() string {
	if x != nil {
		return x.SignupGoalsOther
	}
	return ""
}

func (x *User_ProfileDetails) GetOnboardedTimestamp() string {
	if x != nil {
		return x.OnboardedTimestamp
	}
	return ""
}

func (x *User_ProfileDetails) GetCompanySize() string {
	if x != nil {
		return x.CompanySize
	}
	return ""
}

type User_WorkspaceAutostartOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloneUrl       string `protobuf:"bytes,1,opt,name=clone_url,json=cloneUrl,proto3" json:"clone_url,omitempty"`
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	WorkspaceClass string `protobuf:"bytes,3,opt,name=workspace_class,json=workspaceClass,proto3" json:"workspace_class,omitempty"`
	// +optional
	EditorSettings *EditorReference `protobuf:"bytes,4,opt,name=editor_settings,json=editorSettings,proto3" json:"editor_settings,omitempty"`
	// +optional
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *User_WorkspaceAutostartOption) Reset() {
	*x = User_WorkspaceAutostartOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitpod_v1_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_WorkspaceAutostartOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_WorkspaceAutostartOption) ProtoMessage() {}

func (x *User_WorkspaceAutostartOption) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_WorkspaceAutostartOption.ProtoReflect.Descriptor instead.
func (*User_WorkspaceAutostartOption) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_user_proto_rawDescGZIP(), []int{2, 3}
}

func (x *User_WorkspaceAutostartOption) GetCloneUrl() string {
	if x != nil {
		return x.CloneUrl
	}
	return ""
}

func (x *User_WorkspaceAutostartOption) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *User_WorkspaceAutostartOption) GetWorkspaceClass() string {
	if x != nil {
		return x.WorkspaceClass
	}
	return ""
}

func (x *User_WorkspaceAutostartOption) GetEditorSettings() *EditorReference {
	if x != nil {
		return x.EditorSettings
	}
	return nil
}

func (x *User_WorkspaceAutostartOption) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

var File_gitpod_v1_user_proto protoreflect.FileDescriptor

var file_gitpod_v1_user_proto_rawDesc = []byte{
	0x0a, 0x14, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x1a, 0x16, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xd2,
	0x16, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x50, 0x0a,
	0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x19, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x1a, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x69, 0x0a, 0x1b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x19, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43,
	0x0a, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0e, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x74, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x38, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x68, 0x0a, 0x1b, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x52,
	0x0a, 0x14, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x4f, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x8a, 0x01, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x1a,
	0xaf, 0x01, 0x0a, 0x19, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f,
	0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x4d, 0x61, 0x69,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x78,
	0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x44, 0x65, 0x76, 0x78, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x69,
	0x6c, 0x1a, 0xed, 0x03, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6e, 0x75, 0x64,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4e, 0x75, 0x64, 0x67,
	0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f,
	0x62, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f,
	0x62, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a,
	0x6f, 0x62, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x5f,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x69, 0x67,
	0x6e, 0x75, 0x70, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x2f, 0x0a,
	0x13, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x69, 0x7a,
	0x65, 0x1a, 0xe6, 0x01, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41,
	0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x43, 0x0a,
	0x0f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0e, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x21,
	0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2b, 0x0a, 0x27, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x01, 0x12, 0x2e,
	0x0a, 0x2a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x33,
	0x0a, 0x2f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x5f, 0x50, 0x53, 0x49, 0x10, 0x04, 0x22, 0xd8, 0x03, 0x0a, 0x10, 0x52, 0x6f, 0x6c,
	0x65, 0x4f, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x56, 0x4f, 0x50, 0x53, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x20, 0x0a,
	0x1c, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x26, 0x0a, 0x22, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x4f, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x06, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x53, 0x10, 0x07, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52,
	0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52,
	0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x10, 0x09, 0x12, 0x25,
	0x0a, 0x21, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x53, 0x10, 0x0a, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52,
	0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x57, 0x5f,
	0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x10, 0x0b, 0x22, 0xd5, 0x01, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x78, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitpod_v1_user_proto_rawDescOnce sync.Once
	file_gitpod_v1_user_proto_rawDescData = file_gitpod_v1_user_proto_rawDesc
)

func file_gitpod_v1_user_proto_rawDescGZIP() []byte {
	file_gitpod_v1_user_proto_rawDescOnce.Do(func() {
		file_gitpod_v1_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitpod_v1_user_proto_rawDescData)
	})
	return file_gitpod_v1_user_proto_rawDescData
}

var file_gitpod_v1_user_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gitpod_v1_user_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_gitpod_v1_user_proto_goTypes = []interface{}{
	(User_UserFeatureFlag)(0),              // 0: gitpod.v1.User.UserFeatureFlag
	(User_RoleOrPermission)(0),             // 1: gitpod.v1.User.RoleOrPermission
	(*GetAuthenticatedUserRequest)(nil),    // 2: gitpod.v1.GetAuthenticatedUserRequest
	(*GetAuthenticatedUserResponse)(nil),   // 3: gitpod.v1.GetAuthenticatedUserResponse
	(*User)(nil),                           // 4: gitpod.v1.User
	(*Identity)(nil),                       // 5: gitpod.v1.Identity
	(*User_WorkspaceTimeoutSettings)(nil),  // 6: gitpod.v1.User.WorkspaceTimeoutSettings
	(*User_EmailNotificationSettings)(nil), // 7: gitpod.v1.User.EmailNotificationSettings
	(*User_ProfileDetails)(nil),            // 8: gitpod.v1.User.ProfileDetails
	(*User_WorkspaceAutostartOption)(nil),  // 9: gitpod.v1.User.WorkspaceAutostartOption
	(*timestamppb.Timestamp)(nil),          // 10: google.protobuf.Timestamp
	(*EditorReference)(nil),                // 11: gitpod.v1.EditorReference
	(*durationpb.Duration)(nil),            // 12: google.protobuf.Duration
}
var file_gitpod_v1_user_proto_depIdxs = []int32{
	4,  // 0: gitpod.v1.GetAuthenticatedUserResponse.user:type_name -> gitpod.v1.User
	10, // 1: gitpod.v1.User.created_at:type_name -> google.protobuf.Timestamp
	5,  // 2: gitpod.v1.User.identities:type_name -> gitpod.v1.Identity
	10, // 3: gitpod.v1.User.last_verification_time:type_name -> google.protobuf.Timestamp
	6,  // 4: gitpod.v1.User.workspace_timeout_settings:type_name -> gitpod.v1.User.WorkspaceTimeoutSettings
	7,  // 5: gitpod.v1.User.email_notification_settings:type_name -> gitpod.v1.User.EmailNotificationSettings
	11, // 6: gitpod.v1.User.editor_settings:type_name -> gitpod.v1.EditorReference
	8,  // 7: gitpod.v1.User.profile:type_name -> gitpod.v1.User.ProfileDetails
	9,  // 8: gitpod.v1.User.workspace_autostart_options:type_name -> gitpod.v1.User.WorkspaceAutostartOption
	0,  // 9: gitpod.v1.User.workspace_feature_flags:type_name -> gitpod.v1.User.UserFeatureFlag
	1,  // 10: gitpod.v1.User.roles_or_permissions:type_name -> gitpod.v1.User.RoleOrPermission
	10, // 11: gitpod.v1.Identity.last_signin_time:type_name -> google.protobuf.Timestamp
	12, // 12: gitpod.v1.User.WorkspaceTimeoutSettings.inactivity:type_name -> google.protobuf.Duration
	11, // 13: gitpod.v1.User.WorkspaceAutostartOption.editor_settings:type_name -> gitpod.v1.EditorReference
	2,  // 14: gitpod.v1.UserService.GetAuthenticatedUser:input_type -> gitpod.v1.GetAuthenticatedUserRequest
	3,  // 15: gitpod.v1.UserService.GetAuthenticatedUser:output_type -> gitpod.v1.GetAuthenticatedUserResponse
	15, // [15:16] is the sub-list for method output_type
	14, // [14:15] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_gitpod_v1_user_proto_init() }
func file_gitpod_v1_user_proto_init() {
	if File_gitpod_v1_user_proto != nil {
		return
	}
	file_gitpod_v1_editor_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gitpod_v1_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthenticatedUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthenticatedUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_WorkspaceTimeoutSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_EmailNotificationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_ProfileDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitpod_v1_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_WorkspaceAutostartOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitpod_v1_user_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitpod_v1_user_proto_goTypes,
		DependencyIndexes: file_gitpod_v1_user_proto_depIdxs,
		EnumInfos:         file_gitpod_v1_user_proto_enumTypes,
		MessageInfos:      file_gitpod_v1_user_proto_msgTypes,
	}.Build()
	File_gitpod_v1_user_proto = out.File
	file_gitpod_v1_user_proto_rawDesc = nil
	file_gitpod_v1_user_proto_goTypes = nil
	file_gitpod_v1_user_proto_depIdxs = nil
}
