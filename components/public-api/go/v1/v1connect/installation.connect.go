// Copyright (c) 2024 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/installation.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gitpod-io/gitpod/components/public-api/go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// InstallationServiceName is the fully-qualified name of the InstallationService service.
	InstallationServiceName = "gitpod.v1.InstallationService"
)

// InstallationServiceClient is a client for the gitpod.v1.InstallationService service.
type InstallationServiceClient interface {
	// GetInstallationWorkspaceDefaultImage returns the default image for current
	// Gitpod Installation.
	GetInstallationWorkspaceDefaultImage(context.Context, *connect_go.Request[v1.GetInstallationWorkspaceDefaultImageRequest]) (*connect_go.Response[v1.GetInstallationWorkspaceDefaultImageResponse], error)
	// ListBlockedRepositories lists blocked repositories.
	ListBlockedRepositories(context.Context, *connect_go.Request[v1.ListBlockedRepositoriesRequest]) (*connect_go.Response[v1.ListBlockedRepositoriesResponse], error)
	// CreateBlockedRepository creates a new blocked repository.
	CreateBlockedRepository(context.Context, *connect_go.Request[v1.CreateBlockedRepositoryRequest]) (*connect_go.Response[v1.CreateBlockedRepositoryResponse], error)
	// DeleteBlockedRepository deletes a blocked repository.
	DeleteBlockedRepository(context.Context, *connect_go.Request[v1.DeleteBlockedRepositoryRequest]) (*connect_go.Response[v1.DeleteBlockedRepositoryResponse], error)
	// ListBlockedEmailDomains lists blocked email domains.
	ListBlockedEmailDomains(context.Context, *connect_go.Request[v1.ListBlockedEmailDomainsRequest]) (*connect_go.Response[v1.ListBlockedEmailDomainsResponse], error)
	// CreateBlockedEmailDomain creates a new blocked email domain.
	CreateBlockedEmailDomain(context.Context, *connect_go.Request[v1.CreateBlockedEmailDomainRequest]) (*connect_go.Response[v1.CreateBlockedEmailDomainResponse], error)
	// GetOnboardingState returns the onboarding state of the installation.
	GetOnboardingState(context.Context, *connect_go.Request[v1.GetOnboardingStateRequest]) (*connect_go.Response[v1.GetOnboardingStateResponse], error)
}

// NewInstallationServiceClient constructs a client for the gitpod.v1.InstallationService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInstallationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) InstallationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &installationServiceClient{
		getInstallationWorkspaceDefaultImage: connect_go.NewClient[v1.GetInstallationWorkspaceDefaultImageRequest, v1.GetInstallationWorkspaceDefaultImageResponse](
			httpClient,
			baseURL+"/gitpod.v1.InstallationService/GetInstallationWorkspaceDefaultImage",
			opts...,
		),
		listBlockedRepositories: connect_go.NewClient[v1.ListBlockedRepositoriesRequest, v1.ListBlockedRepositoriesResponse](
			httpClient,
			baseURL+"/gitpod.v1.InstallationService/ListBlockedRepositories",
			opts...,
		),
		createBlockedRepository: connect_go.NewClient[v1.CreateBlockedRepositoryRequest, v1.CreateBlockedRepositoryResponse](
			httpClient,
			baseURL+"/gitpod.v1.InstallationService/CreateBlockedRepository",
			opts...,
		),
		deleteBlockedRepository: connect_go.NewClient[v1.DeleteBlockedRepositoryRequest, v1.DeleteBlockedRepositoryResponse](
			httpClient,
			baseURL+"/gitpod.v1.InstallationService/DeleteBlockedRepository",
			opts...,
		),
		listBlockedEmailDomains: connect_go.NewClient[v1.ListBlockedEmailDomainsRequest, v1.ListBlockedEmailDomainsResponse](
			httpClient,
			baseURL+"/gitpod.v1.InstallationService/ListBlockedEmailDomains",
			opts...,
		),
		createBlockedEmailDomain: connect_go.NewClient[v1.CreateBlockedEmailDomainRequest, v1.CreateBlockedEmailDomainResponse](
			httpClient,
			baseURL+"/gitpod.v1.InstallationService/CreateBlockedEmailDomain",
			opts...,
		),
		getOnboardingState: connect_go.NewClient[v1.GetOnboardingStateRequest, v1.GetOnboardingStateResponse](
			httpClient,
			baseURL+"/gitpod.v1.InstallationService/GetOnboardingState",
			opts...,
		),
	}
}

// installationServiceClient implements InstallationServiceClient.
type installationServiceClient struct {
	getInstallationWorkspaceDefaultImage *connect_go.Client[v1.GetInstallationWorkspaceDefaultImageRequest, v1.GetInstallationWorkspaceDefaultImageResponse]
	listBlockedRepositories              *connect_go.Client[v1.ListBlockedRepositoriesRequest, v1.ListBlockedRepositoriesResponse]
	createBlockedRepository              *connect_go.Client[v1.CreateBlockedRepositoryRequest, v1.CreateBlockedRepositoryResponse]
	deleteBlockedRepository              *connect_go.Client[v1.DeleteBlockedRepositoryRequest, v1.DeleteBlockedRepositoryResponse]
	listBlockedEmailDomains              *connect_go.Client[v1.ListBlockedEmailDomainsRequest, v1.ListBlockedEmailDomainsResponse]
	createBlockedEmailDomain             *connect_go.Client[v1.CreateBlockedEmailDomainRequest, v1.CreateBlockedEmailDomainResponse]
	getOnboardingState                   *connect_go.Client[v1.GetOnboardingStateRequest, v1.GetOnboardingStateResponse]
}

// GetInstallationWorkspaceDefaultImage calls
// gitpod.v1.InstallationService.GetInstallationWorkspaceDefaultImage.
func (c *installationServiceClient) GetInstallationWorkspaceDefaultImage(ctx context.Context, req *connect_go.Request[v1.GetInstallationWorkspaceDefaultImageRequest]) (*connect_go.Response[v1.GetInstallationWorkspaceDefaultImageResponse], error) {
	return c.getInstallationWorkspaceDefaultImage.CallUnary(ctx, req)
}

// ListBlockedRepositories calls gitpod.v1.InstallationService.ListBlockedRepositories.
func (c *installationServiceClient) ListBlockedRepositories(ctx context.Context, req *connect_go.Request[v1.ListBlockedRepositoriesRequest]) (*connect_go.Response[v1.ListBlockedRepositoriesResponse], error) {
	return c.listBlockedRepositories.CallUnary(ctx, req)
}

// CreateBlockedRepository calls gitpod.v1.InstallationService.CreateBlockedRepository.
func (c *installationServiceClient) CreateBlockedRepository(ctx context.Context, req *connect_go.Request[v1.CreateBlockedRepositoryRequest]) (*connect_go.Response[v1.CreateBlockedRepositoryResponse], error) {
	return c.createBlockedRepository.CallUnary(ctx, req)
}

// DeleteBlockedRepository calls gitpod.v1.InstallationService.DeleteBlockedRepository.
func (c *installationServiceClient) DeleteBlockedRepository(ctx context.Context, req *connect_go.Request[v1.DeleteBlockedRepositoryRequest]) (*connect_go.Response[v1.DeleteBlockedRepositoryResponse], error) {
	return c.deleteBlockedRepository.CallUnary(ctx, req)
}

// ListBlockedEmailDomains calls gitpod.v1.InstallationService.ListBlockedEmailDomains.
func (c *installationServiceClient) ListBlockedEmailDomains(ctx context.Context, req *connect_go.Request[v1.ListBlockedEmailDomainsRequest]) (*connect_go.Response[v1.ListBlockedEmailDomainsResponse], error) {
	return c.listBlockedEmailDomains.CallUnary(ctx, req)
}

// CreateBlockedEmailDomain calls gitpod.v1.InstallationService.CreateBlockedEmailDomain.
func (c *installationServiceClient) CreateBlockedEmailDomain(ctx context.Context, req *connect_go.Request[v1.CreateBlockedEmailDomainRequest]) (*connect_go.Response[v1.CreateBlockedEmailDomainResponse], error) {
	return c.createBlockedEmailDomain.CallUnary(ctx, req)
}

// GetOnboardingState calls gitpod.v1.InstallationService.GetOnboardingState.
func (c *installationServiceClient) GetOnboardingState(ctx context.Context, req *connect_go.Request[v1.GetOnboardingStateRequest]) (*connect_go.Response[v1.GetOnboardingStateResponse], error) {
	return c.getOnboardingState.CallUnary(ctx, req)
}

// InstallationServiceHandler is an implementation of the gitpod.v1.InstallationService service.
type InstallationServiceHandler interface {
	// GetInstallationWorkspaceDefaultImage returns the default image for current
	// Gitpod Installation.
	GetInstallationWorkspaceDefaultImage(context.Context, *connect_go.Request[v1.GetInstallationWorkspaceDefaultImageRequest]) (*connect_go.Response[v1.GetInstallationWorkspaceDefaultImageResponse], error)
	// ListBlockedRepositories lists blocked repositories.
	ListBlockedRepositories(context.Context, *connect_go.Request[v1.ListBlockedRepositoriesRequest]) (*connect_go.Response[v1.ListBlockedRepositoriesResponse], error)
	// CreateBlockedRepository creates a new blocked repository.
	CreateBlockedRepository(context.Context, *connect_go.Request[v1.CreateBlockedRepositoryRequest]) (*connect_go.Response[v1.CreateBlockedRepositoryResponse], error)
	// DeleteBlockedRepository deletes a blocked repository.
	DeleteBlockedRepository(context.Context, *connect_go.Request[v1.DeleteBlockedRepositoryRequest]) (*connect_go.Response[v1.DeleteBlockedRepositoryResponse], error)
	// ListBlockedEmailDomains lists blocked email domains.
	ListBlockedEmailDomains(context.Context, *connect_go.Request[v1.ListBlockedEmailDomainsRequest]) (*connect_go.Response[v1.ListBlockedEmailDomainsResponse], error)
	// CreateBlockedEmailDomain creates a new blocked email domain.
	CreateBlockedEmailDomain(context.Context, *connect_go.Request[v1.CreateBlockedEmailDomainRequest]) (*connect_go.Response[v1.CreateBlockedEmailDomainResponse], error)
	// GetOnboardingState returns the onboarding state of the installation.
	GetOnboardingState(context.Context, *connect_go.Request[v1.GetOnboardingStateRequest]) (*connect_go.Response[v1.GetOnboardingStateResponse], error)
}

// NewInstallationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInstallationServiceHandler(svc InstallationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/gitpod.v1.InstallationService/GetInstallationWorkspaceDefaultImage", connect_go.NewUnaryHandler(
		"/gitpod.v1.InstallationService/GetInstallationWorkspaceDefaultImage",
		svc.GetInstallationWorkspaceDefaultImage,
		opts...,
	))
	mux.Handle("/gitpod.v1.InstallationService/ListBlockedRepositories", connect_go.NewUnaryHandler(
		"/gitpod.v1.InstallationService/ListBlockedRepositories",
		svc.ListBlockedRepositories,
		opts...,
	))
	mux.Handle("/gitpod.v1.InstallationService/CreateBlockedRepository", connect_go.NewUnaryHandler(
		"/gitpod.v1.InstallationService/CreateBlockedRepository",
		svc.CreateBlockedRepository,
		opts...,
	))
	mux.Handle("/gitpod.v1.InstallationService/DeleteBlockedRepository", connect_go.NewUnaryHandler(
		"/gitpod.v1.InstallationService/DeleteBlockedRepository",
		svc.DeleteBlockedRepository,
		opts...,
	))
	mux.Handle("/gitpod.v1.InstallationService/ListBlockedEmailDomains", connect_go.NewUnaryHandler(
		"/gitpod.v1.InstallationService/ListBlockedEmailDomains",
		svc.ListBlockedEmailDomains,
		opts...,
	))
	mux.Handle("/gitpod.v1.InstallationService/CreateBlockedEmailDomain", connect_go.NewUnaryHandler(
		"/gitpod.v1.InstallationService/CreateBlockedEmailDomain",
		svc.CreateBlockedEmailDomain,
		opts...,
	))
	mux.Handle("/gitpod.v1.InstallationService/GetOnboardingState", connect_go.NewUnaryHandler(
		"/gitpod.v1.InstallationService/GetOnboardingState",
		svc.GetOnboardingState,
		opts...,
	))
	return "/gitpod.v1.InstallationService/", mux
}

// UnimplementedInstallationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInstallationServiceHandler struct{}

func (UnimplementedInstallationServiceHandler) GetInstallationWorkspaceDefaultImage(context.Context, *connect_go.Request[v1.GetInstallationWorkspaceDefaultImageRequest]) (*connect_go.Response[v1.GetInstallationWorkspaceDefaultImageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.InstallationService.GetInstallationWorkspaceDefaultImage is not implemented"))
}

func (UnimplementedInstallationServiceHandler) ListBlockedRepositories(context.Context, *connect_go.Request[v1.ListBlockedRepositoriesRequest]) (*connect_go.Response[v1.ListBlockedRepositoriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.InstallationService.ListBlockedRepositories is not implemented"))
}

func (UnimplementedInstallationServiceHandler) CreateBlockedRepository(context.Context, *connect_go.Request[v1.CreateBlockedRepositoryRequest]) (*connect_go.Response[v1.CreateBlockedRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.InstallationService.CreateBlockedRepository is not implemented"))
}

func (UnimplementedInstallationServiceHandler) DeleteBlockedRepository(context.Context, *connect_go.Request[v1.DeleteBlockedRepositoryRequest]) (*connect_go.Response[v1.DeleteBlockedRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.InstallationService.DeleteBlockedRepository is not implemented"))
}

func (UnimplementedInstallationServiceHandler) ListBlockedEmailDomains(context.Context, *connect_go.Request[v1.ListBlockedEmailDomainsRequest]) (*connect_go.Response[v1.ListBlockedEmailDomainsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.InstallationService.ListBlockedEmailDomains is not implemented"))
}

func (UnimplementedInstallationServiceHandler) CreateBlockedEmailDomain(context.Context, *connect_go.Request[v1.CreateBlockedEmailDomainRequest]) (*connect_go.Response[v1.CreateBlockedEmailDomainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.InstallationService.CreateBlockedEmailDomain is not implemented"))
}

func (UnimplementedInstallationServiceHandler) GetOnboardingState(context.Context, *connect_go.Request[v1.GetOnboardingStateRequest]) (*connect_go.Response[v1.GetOnboardingStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.InstallationService.GetOnboardingState is not implemented"))
}
