// Copyright (c) 2024 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/envvar.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gitpod-io/gitpod/components/public-api/go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EnvironmentVariableServiceName is the fully-qualified name of the EnvironmentVariableService
	// service.
	EnvironmentVariableServiceName = "gitpod.v1.EnvironmentVariableService"
)

// EnvironmentVariableServiceClient is a client for the gitpod.v1.EnvironmentVariableService
// service.
type EnvironmentVariableServiceClient interface {
	// ListUserEnvironmentVariables returns all environment variables for the
	// authenticated user.
	ListUserEnvironmentVariables(context.Context, *connect_go.Request[v1.ListUserEnvironmentVariablesRequest]) (*connect_go.Response[v1.ListUserEnvironmentVariablesResponse], error)
	// UpdateUserEnvironmentVariable updates an environment variable for the
	// authenticated user.
	UpdateUserEnvironmentVariable(context.Context, *connect_go.Request[v1.UpdateUserEnvironmentVariableRequest]) (*connect_go.Response[v1.UpdateUserEnvironmentVariableResponse], error)
	// CreateUserEnvironmentVariable creates a new environment variable for the
	// authenticated user.
	CreateUserEnvironmentVariable(context.Context, *connect_go.Request[v1.CreateUserEnvironmentVariableRequest]) (*connect_go.Response[v1.CreateUserEnvironmentVariableResponse], error)
	// DeleteUserEnvironmentVariable deletes an environment variable for the
	// authenticated user.
	DeleteUserEnvironmentVariable(context.Context, *connect_go.Request[v1.DeleteUserEnvironmentVariableRequest]) (*connect_go.Response[v1.DeleteUserEnvironmentVariableResponse], error)
	// ListConfigurationEnvironmentVariables returns all environment variables in
	// a configuration.
	ListConfigurationEnvironmentVariables(context.Context, *connect_go.Request[v1.ListConfigurationEnvironmentVariablesRequest]) (*connect_go.Response[v1.ListConfigurationEnvironmentVariablesResponse], error)
	// UpdateConfigurationEnvironmentVariable updates an environment variable in
	// a configuration.
	UpdateConfigurationEnvironmentVariable(context.Context, *connect_go.Request[v1.UpdateConfigurationEnvironmentVariableRequest]) (*connect_go.Response[v1.UpdateConfigurationEnvironmentVariableResponse], error)
	// CreateConfigurationEnvironmentVariable creates a new environment variable
	// in a configuration.
	CreateConfigurationEnvironmentVariable(context.Context, *connect_go.Request[v1.CreateConfigurationEnvironmentVariableRequest]) (*connect_go.Response[v1.CreateConfigurationEnvironmentVariableResponse], error)
	// DeleteConfigurationEnvironmentVariable deletes an environment variable in
	// a configuration.
	DeleteConfigurationEnvironmentVariable(context.Context, *connect_go.Request[v1.DeleteConfigurationEnvironmentVariableRequest]) (*connect_go.Response[v1.DeleteConfigurationEnvironmentVariableResponse], error)
	ResolveWorkspaceEnvironmentVariables(context.Context, *connect_go.Request[v1.ResolveWorkspaceEnvironmentVariablesRequest]) (*connect_go.Response[v1.ResolveWorkspaceEnvironmentVariablesResponse], error)
}

// NewEnvironmentVariableServiceClient constructs a client for the
// gitpod.v1.EnvironmentVariableService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnvironmentVariableServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EnvironmentVariableServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &environmentVariableServiceClient{
		listUserEnvironmentVariables: connect_go.NewClient[v1.ListUserEnvironmentVariablesRequest, v1.ListUserEnvironmentVariablesResponse](
			httpClient,
			baseURL+"/gitpod.v1.EnvironmentVariableService/ListUserEnvironmentVariables",
			opts...,
		),
		updateUserEnvironmentVariable: connect_go.NewClient[v1.UpdateUserEnvironmentVariableRequest, v1.UpdateUserEnvironmentVariableResponse](
			httpClient,
			baseURL+"/gitpod.v1.EnvironmentVariableService/UpdateUserEnvironmentVariable",
			opts...,
		),
		createUserEnvironmentVariable: connect_go.NewClient[v1.CreateUserEnvironmentVariableRequest, v1.CreateUserEnvironmentVariableResponse](
			httpClient,
			baseURL+"/gitpod.v1.EnvironmentVariableService/CreateUserEnvironmentVariable",
			opts...,
		),
		deleteUserEnvironmentVariable: connect_go.NewClient[v1.DeleteUserEnvironmentVariableRequest, v1.DeleteUserEnvironmentVariableResponse](
			httpClient,
			baseURL+"/gitpod.v1.EnvironmentVariableService/DeleteUserEnvironmentVariable",
			opts...,
		),
		listConfigurationEnvironmentVariables: connect_go.NewClient[v1.ListConfigurationEnvironmentVariablesRequest, v1.ListConfigurationEnvironmentVariablesResponse](
			httpClient,
			baseURL+"/gitpod.v1.EnvironmentVariableService/ListConfigurationEnvironmentVariables",
			opts...,
		),
		updateConfigurationEnvironmentVariable: connect_go.NewClient[v1.UpdateConfigurationEnvironmentVariableRequest, v1.UpdateConfigurationEnvironmentVariableResponse](
			httpClient,
			baseURL+"/gitpod.v1.EnvironmentVariableService/UpdateConfigurationEnvironmentVariable",
			opts...,
		),
		createConfigurationEnvironmentVariable: connect_go.NewClient[v1.CreateConfigurationEnvironmentVariableRequest, v1.CreateConfigurationEnvironmentVariableResponse](
			httpClient,
			baseURL+"/gitpod.v1.EnvironmentVariableService/CreateConfigurationEnvironmentVariable",
			opts...,
		),
		deleteConfigurationEnvironmentVariable: connect_go.NewClient[v1.DeleteConfigurationEnvironmentVariableRequest, v1.DeleteConfigurationEnvironmentVariableResponse](
			httpClient,
			baseURL+"/gitpod.v1.EnvironmentVariableService/DeleteConfigurationEnvironmentVariable",
			opts...,
		),
		resolveWorkspaceEnvironmentVariables: connect_go.NewClient[v1.ResolveWorkspaceEnvironmentVariablesRequest, v1.ResolveWorkspaceEnvironmentVariablesResponse](
			httpClient,
			baseURL+"/gitpod.v1.EnvironmentVariableService/ResolveWorkspaceEnvironmentVariables",
			opts...,
		),
	}
}

// environmentVariableServiceClient implements EnvironmentVariableServiceClient.
type environmentVariableServiceClient struct {
	listUserEnvironmentVariables           *connect_go.Client[v1.ListUserEnvironmentVariablesRequest, v1.ListUserEnvironmentVariablesResponse]
	updateUserEnvironmentVariable          *connect_go.Client[v1.UpdateUserEnvironmentVariableRequest, v1.UpdateUserEnvironmentVariableResponse]
	createUserEnvironmentVariable          *connect_go.Client[v1.CreateUserEnvironmentVariableRequest, v1.CreateUserEnvironmentVariableResponse]
	deleteUserEnvironmentVariable          *connect_go.Client[v1.DeleteUserEnvironmentVariableRequest, v1.DeleteUserEnvironmentVariableResponse]
	listConfigurationEnvironmentVariables  *connect_go.Client[v1.ListConfigurationEnvironmentVariablesRequest, v1.ListConfigurationEnvironmentVariablesResponse]
	updateConfigurationEnvironmentVariable *connect_go.Client[v1.UpdateConfigurationEnvironmentVariableRequest, v1.UpdateConfigurationEnvironmentVariableResponse]
	createConfigurationEnvironmentVariable *connect_go.Client[v1.CreateConfigurationEnvironmentVariableRequest, v1.CreateConfigurationEnvironmentVariableResponse]
	deleteConfigurationEnvironmentVariable *connect_go.Client[v1.DeleteConfigurationEnvironmentVariableRequest, v1.DeleteConfigurationEnvironmentVariableResponse]
	resolveWorkspaceEnvironmentVariables   *connect_go.Client[v1.ResolveWorkspaceEnvironmentVariablesRequest, v1.ResolveWorkspaceEnvironmentVariablesResponse]
}

// ListUserEnvironmentVariables calls
// gitpod.v1.EnvironmentVariableService.ListUserEnvironmentVariables.
func (c *environmentVariableServiceClient) ListUserEnvironmentVariables(ctx context.Context, req *connect_go.Request[v1.ListUserEnvironmentVariablesRequest]) (*connect_go.Response[v1.ListUserEnvironmentVariablesResponse], error) {
	return c.listUserEnvironmentVariables.CallUnary(ctx, req)
}

// UpdateUserEnvironmentVariable calls
// gitpod.v1.EnvironmentVariableService.UpdateUserEnvironmentVariable.
func (c *environmentVariableServiceClient) UpdateUserEnvironmentVariable(ctx context.Context, req *connect_go.Request[v1.UpdateUserEnvironmentVariableRequest]) (*connect_go.Response[v1.UpdateUserEnvironmentVariableResponse], error) {
	return c.updateUserEnvironmentVariable.CallUnary(ctx, req)
}

// CreateUserEnvironmentVariable calls
// gitpod.v1.EnvironmentVariableService.CreateUserEnvironmentVariable.
func (c *environmentVariableServiceClient) CreateUserEnvironmentVariable(ctx context.Context, req *connect_go.Request[v1.CreateUserEnvironmentVariableRequest]) (*connect_go.Response[v1.CreateUserEnvironmentVariableResponse], error) {
	return c.createUserEnvironmentVariable.CallUnary(ctx, req)
}

// DeleteUserEnvironmentVariable calls
// gitpod.v1.EnvironmentVariableService.DeleteUserEnvironmentVariable.
func (c *environmentVariableServiceClient) DeleteUserEnvironmentVariable(ctx context.Context, req *connect_go.Request[v1.DeleteUserEnvironmentVariableRequest]) (*connect_go.Response[v1.DeleteUserEnvironmentVariableResponse], error) {
	return c.deleteUserEnvironmentVariable.CallUnary(ctx, req)
}

// ListConfigurationEnvironmentVariables calls
// gitpod.v1.EnvironmentVariableService.ListConfigurationEnvironmentVariables.
func (c *environmentVariableServiceClient) ListConfigurationEnvironmentVariables(ctx context.Context, req *connect_go.Request[v1.ListConfigurationEnvironmentVariablesRequest]) (*connect_go.Response[v1.ListConfigurationEnvironmentVariablesResponse], error) {
	return c.listConfigurationEnvironmentVariables.CallUnary(ctx, req)
}

// UpdateConfigurationEnvironmentVariable calls
// gitpod.v1.EnvironmentVariableService.UpdateConfigurationEnvironmentVariable.
func (c *environmentVariableServiceClient) UpdateConfigurationEnvironmentVariable(ctx context.Context, req *connect_go.Request[v1.UpdateConfigurationEnvironmentVariableRequest]) (*connect_go.Response[v1.UpdateConfigurationEnvironmentVariableResponse], error) {
	return c.updateConfigurationEnvironmentVariable.CallUnary(ctx, req)
}

// CreateConfigurationEnvironmentVariable calls
// gitpod.v1.EnvironmentVariableService.CreateConfigurationEnvironmentVariable.
func (c *environmentVariableServiceClient) CreateConfigurationEnvironmentVariable(ctx context.Context, req *connect_go.Request[v1.CreateConfigurationEnvironmentVariableRequest]) (*connect_go.Response[v1.CreateConfigurationEnvironmentVariableResponse], error) {
	return c.createConfigurationEnvironmentVariable.CallUnary(ctx, req)
}

// DeleteConfigurationEnvironmentVariable calls
// gitpod.v1.EnvironmentVariableService.DeleteConfigurationEnvironmentVariable.
func (c *environmentVariableServiceClient) DeleteConfigurationEnvironmentVariable(ctx context.Context, req *connect_go.Request[v1.DeleteConfigurationEnvironmentVariableRequest]) (*connect_go.Response[v1.DeleteConfigurationEnvironmentVariableResponse], error) {
	return c.deleteConfigurationEnvironmentVariable.CallUnary(ctx, req)
}

// ResolveWorkspaceEnvironmentVariables calls
// gitpod.v1.EnvironmentVariableService.ResolveWorkspaceEnvironmentVariables.
func (c *environmentVariableServiceClient) ResolveWorkspaceEnvironmentVariables(ctx context.Context, req *connect_go.Request[v1.ResolveWorkspaceEnvironmentVariablesRequest]) (*connect_go.Response[v1.ResolveWorkspaceEnvironmentVariablesResponse], error) {
	return c.resolveWorkspaceEnvironmentVariables.CallUnary(ctx, req)
}

// EnvironmentVariableServiceHandler is an implementation of the
// gitpod.v1.EnvironmentVariableService service.
type EnvironmentVariableServiceHandler interface {
	// ListUserEnvironmentVariables returns all environment variables for the
	// authenticated user.
	ListUserEnvironmentVariables(context.Context, *connect_go.Request[v1.ListUserEnvironmentVariablesRequest]) (*connect_go.Response[v1.ListUserEnvironmentVariablesResponse], error)
	// UpdateUserEnvironmentVariable updates an environment variable for the
	// authenticated user.
	UpdateUserEnvironmentVariable(context.Context, *connect_go.Request[v1.UpdateUserEnvironmentVariableRequest]) (*connect_go.Response[v1.UpdateUserEnvironmentVariableResponse], error)
	// CreateUserEnvironmentVariable creates a new environment variable for the
	// authenticated user.
	CreateUserEnvironmentVariable(context.Context, *connect_go.Request[v1.CreateUserEnvironmentVariableRequest]) (*connect_go.Response[v1.CreateUserEnvironmentVariableResponse], error)
	// DeleteUserEnvironmentVariable deletes an environment variable for the
	// authenticated user.
	DeleteUserEnvironmentVariable(context.Context, *connect_go.Request[v1.DeleteUserEnvironmentVariableRequest]) (*connect_go.Response[v1.DeleteUserEnvironmentVariableResponse], error)
	// ListConfigurationEnvironmentVariables returns all environment variables in
	// a configuration.
	ListConfigurationEnvironmentVariables(context.Context, *connect_go.Request[v1.ListConfigurationEnvironmentVariablesRequest]) (*connect_go.Response[v1.ListConfigurationEnvironmentVariablesResponse], error)
	// UpdateConfigurationEnvironmentVariable updates an environment variable in
	// a configuration.
	UpdateConfigurationEnvironmentVariable(context.Context, *connect_go.Request[v1.UpdateConfigurationEnvironmentVariableRequest]) (*connect_go.Response[v1.UpdateConfigurationEnvironmentVariableResponse], error)
	// CreateConfigurationEnvironmentVariable creates a new environment variable
	// in a configuration.
	CreateConfigurationEnvironmentVariable(context.Context, *connect_go.Request[v1.CreateConfigurationEnvironmentVariableRequest]) (*connect_go.Response[v1.CreateConfigurationEnvironmentVariableResponse], error)
	// DeleteConfigurationEnvironmentVariable deletes an environment variable in
	// a configuration.
	DeleteConfigurationEnvironmentVariable(context.Context, *connect_go.Request[v1.DeleteConfigurationEnvironmentVariableRequest]) (*connect_go.Response[v1.DeleteConfigurationEnvironmentVariableResponse], error)
	ResolveWorkspaceEnvironmentVariables(context.Context, *connect_go.Request[v1.ResolveWorkspaceEnvironmentVariablesRequest]) (*connect_go.Response[v1.ResolveWorkspaceEnvironmentVariablesResponse], error)
}

// NewEnvironmentVariableServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnvironmentVariableServiceHandler(svc EnvironmentVariableServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/gitpod.v1.EnvironmentVariableService/ListUserEnvironmentVariables", connect_go.NewUnaryHandler(
		"/gitpod.v1.EnvironmentVariableService/ListUserEnvironmentVariables",
		svc.ListUserEnvironmentVariables,
		opts...,
	))
	mux.Handle("/gitpod.v1.EnvironmentVariableService/UpdateUserEnvironmentVariable", connect_go.NewUnaryHandler(
		"/gitpod.v1.EnvironmentVariableService/UpdateUserEnvironmentVariable",
		svc.UpdateUserEnvironmentVariable,
		opts...,
	))
	mux.Handle("/gitpod.v1.EnvironmentVariableService/CreateUserEnvironmentVariable", connect_go.NewUnaryHandler(
		"/gitpod.v1.EnvironmentVariableService/CreateUserEnvironmentVariable",
		svc.CreateUserEnvironmentVariable,
		opts...,
	))
	mux.Handle("/gitpod.v1.EnvironmentVariableService/DeleteUserEnvironmentVariable", connect_go.NewUnaryHandler(
		"/gitpod.v1.EnvironmentVariableService/DeleteUserEnvironmentVariable",
		svc.DeleteUserEnvironmentVariable,
		opts...,
	))
	mux.Handle("/gitpod.v1.EnvironmentVariableService/ListConfigurationEnvironmentVariables", connect_go.NewUnaryHandler(
		"/gitpod.v1.EnvironmentVariableService/ListConfigurationEnvironmentVariables",
		svc.ListConfigurationEnvironmentVariables,
		opts...,
	))
	mux.Handle("/gitpod.v1.EnvironmentVariableService/UpdateConfigurationEnvironmentVariable", connect_go.NewUnaryHandler(
		"/gitpod.v1.EnvironmentVariableService/UpdateConfigurationEnvironmentVariable",
		svc.UpdateConfigurationEnvironmentVariable,
		opts...,
	))
	mux.Handle("/gitpod.v1.EnvironmentVariableService/CreateConfigurationEnvironmentVariable", connect_go.NewUnaryHandler(
		"/gitpod.v1.EnvironmentVariableService/CreateConfigurationEnvironmentVariable",
		svc.CreateConfigurationEnvironmentVariable,
		opts...,
	))
	mux.Handle("/gitpod.v1.EnvironmentVariableService/DeleteConfigurationEnvironmentVariable", connect_go.NewUnaryHandler(
		"/gitpod.v1.EnvironmentVariableService/DeleteConfigurationEnvironmentVariable",
		svc.DeleteConfigurationEnvironmentVariable,
		opts...,
	))
	mux.Handle("/gitpod.v1.EnvironmentVariableService/ResolveWorkspaceEnvironmentVariables", connect_go.NewUnaryHandler(
		"/gitpod.v1.EnvironmentVariableService/ResolveWorkspaceEnvironmentVariables",
		svc.ResolveWorkspaceEnvironmentVariables,
		opts...,
	))
	return "/gitpod.v1.EnvironmentVariableService/", mux
}

// UnimplementedEnvironmentVariableServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnvironmentVariableServiceHandler struct{}

func (UnimplementedEnvironmentVariableServiceHandler) ListUserEnvironmentVariables(context.Context, *connect_go.Request[v1.ListUserEnvironmentVariablesRequest]) (*connect_go.Response[v1.ListUserEnvironmentVariablesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentVariableService.ListUserEnvironmentVariables is not implemented"))
}

func (UnimplementedEnvironmentVariableServiceHandler) UpdateUserEnvironmentVariable(context.Context, *connect_go.Request[v1.UpdateUserEnvironmentVariableRequest]) (*connect_go.Response[v1.UpdateUserEnvironmentVariableResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentVariableService.UpdateUserEnvironmentVariable is not implemented"))
}

func (UnimplementedEnvironmentVariableServiceHandler) CreateUserEnvironmentVariable(context.Context, *connect_go.Request[v1.CreateUserEnvironmentVariableRequest]) (*connect_go.Response[v1.CreateUserEnvironmentVariableResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentVariableService.CreateUserEnvironmentVariable is not implemented"))
}

func (UnimplementedEnvironmentVariableServiceHandler) DeleteUserEnvironmentVariable(context.Context, *connect_go.Request[v1.DeleteUserEnvironmentVariableRequest]) (*connect_go.Response[v1.DeleteUserEnvironmentVariableResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentVariableService.DeleteUserEnvironmentVariable is not implemented"))
}

func (UnimplementedEnvironmentVariableServiceHandler) ListConfigurationEnvironmentVariables(context.Context, *connect_go.Request[v1.ListConfigurationEnvironmentVariablesRequest]) (*connect_go.Response[v1.ListConfigurationEnvironmentVariablesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentVariableService.ListConfigurationEnvironmentVariables is not implemented"))
}

func (UnimplementedEnvironmentVariableServiceHandler) UpdateConfigurationEnvironmentVariable(context.Context, *connect_go.Request[v1.UpdateConfigurationEnvironmentVariableRequest]) (*connect_go.Response[v1.UpdateConfigurationEnvironmentVariableResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentVariableService.UpdateConfigurationEnvironmentVariable is not implemented"))
}

func (UnimplementedEnvironmentVariableServiceHandler) CreateConfigurationEnvironmentVariable(context.Context, *connect_go.Request[v1.CreateConfigurationEnvironmentVariableRequest]) (*connect_go.Response[v1.CreateConfigurationEnvironmentVariableResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentVariableService.CreateConfigurationEnvironmentVariable is not implemented"))
}

func (UnimplementedEnvironmentVariableServiceHandler) DeleteConfigurationEnvironmentVariable(context.Context, *connect_go.Request[v1.DeleteConfigurationEnvironmentVariableRequest]) (*connect_go.Response[v1.DeleteConfigurationEnvironmentVariableResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentVariableService.DeleteConfigurationEnvironmentVariable is not implemented"))
}

func (UnimplementedEnvironmentVariableServiceHandler) ResolveWorkspaceEnvironmentVariables(context.Context, *connect_go.Request[v1.ResolveWorkspaceEnvironmentVariablesRequest]) (*connect_go.Response[v1.ResolveWorkspaceEnvironmentVariablesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentVariableService.ResolveWorkspaceEnvironmentVariables is not implemented"))
}
