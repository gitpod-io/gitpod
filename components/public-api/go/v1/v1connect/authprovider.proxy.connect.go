// Copyright (c) 2024 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-proxy-gen. DO NOT EDIT.

package v1connect

import (
	context "context"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gitpod-io/gitpod/components/public-api/go/v1"
)

var _ AuthProviderServiceHandler = (*ProxyAuthProviderServiceHandler)(nil)

type ProxyAuthProviderServiceHandler struct {
	Client v1.AuthProviderServiceClient
	UnimplementedAuthProviderServiceHandler
}

func (s *ProxyAuthProviderServiceHandler) CreateAuthProvider(ctx context.Context, req *connect_go.Request[v1.CreateAuthProviderRequest]) (*connect_go.Response[v1.CreateAuthProviderResponse], error) {
	resp, err := s.Client.CreateAuthProvider(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyAuthProviderServiceHandler) GetAuthProvider(ctx context.Context, req *connect_go.Request[v1.GetAuthProviderRequest]) (*connect_go.Response[v1.GetAuthProviderResponse], error) {
	resp, err := s.Client.GetAuthProvider(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyAuthProviderServiceHandler) ListAuthProviders(ctx context.Context, req *connect_go.Request[v1.ListAuthProvidersRequest]) (*connect_go.Response[v1.ListAuthProvidersResponse], error) {
	resp, err := s.Client.ListAuthProviders(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyAuthProviderServiceHandler) ListAuthProviderDescriptions(ctx context.Context, req *connect_go.Request[v1.ListAuthProviderDescriptionsRequest]) (*connect_go.Response[v1.ListAuthProviderDescriptionsResponse], error) {
	resp, err := s.Client.ListAuthProviderDescriptions(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyAuthProviderServiceHandler) UpdateAuthProvider(ctx context.Context, req *connect_go.Request[v1.UpdateAuthProviderRequest]) (*connect_go.Response[v1.UpdateAuthProviderResponse], error) {
	resp, err := s.Client.UpdateAuthProvider(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyAuthProviderServiceHandler) DeleteAuthProvider(ctx context.Context, req *connect_go.Request[v1.DeleteAuthProviderRequest]) (*connect_go.Response[v1.DeleteAuthProviderResponse], error) {
	resp, err := s.Client.DeleteAuthProvider(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}
