// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/sshkey.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gitpod-io/gitpod/components/public-api/go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SshKeyServiceName is the fully-qualified name of the SshKeyService service.
	SshKeyServiceName = "gitpod.v1.SshKeyService"
)

// SshKeyServiceClient is a client for the gitpod.v1.SshKeyService service.
type SshKeyServiceClient interface {
	// ListSshPublicKeys returns all the ssh public keys for the
	// authenticated user.
	ListSshPublicKeys(context.Context, *connect_go.Request[v1.ListSshPublicKeysRequest]) (*connect_go.Response[v1.ListSshPublicKeysResponse], error)
	// CreateSshPublicKeys creates an ssh public key for the
	// authenticated user.
	CreateSshPublicKey(context.Context, *connect_go.Request[v1.CreateSshPublicKeyRequest]) (*connect_go.Response[v1.CreateSshPublicKeyResponse], error)
	// DeleteSshPublicKeys deletes an ssh public key for the
	// authenticated user.
	DeleteSshPublicKey(context.Context, *connect_go.Request[v1.DeleteSshPublicKeyRequest]) (*connect_go.Response[v1.DeleteSshPublicKeyResponse], error)
}

// NewSshKeyServiceClient constructs a client for the gitpod.v1.SshKeyService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSshKeyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SshKeyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sshKeyServiceClient{
		listSshPublicKeys: connect_go.NewClient[v1.ListSshPublicKeysRequest, v1.ListSshPublicKeysResponse](
			httpClient,
			baseURL+"/gitpod.v1.SshKeyService/ListSshPublicKeys",
			opts...,
		),
		createSshPublicKey: connect_go.NewClient[v1.CreateSshPublicKeyRequest, v1.CreateSshPublicKeyResponse](
			httpClient,
			baseURL+"/gitpod.v1.SshKeyService/CreateSshPublicKey",
			opts...,
		),
		deleteSshPublicKey: connect_go.NewClient[v1.DeleteSshPublicKeyRequest, v1.DeleteSshPublicKeyResponse](
			httpClient,
			baseURL+"/gitpod.v1.SshKeyService/DeleteSshPublicKey",
			opts...,
		),
	}
}

// sshKeyServiceClient implements SshKeyServiceClient.
type sshKeyServiceClient struct {
	listSshPublicKeys  *connect_go.Client[v1.ListSshPublicKeysRequest, v1.ListSshPublicKeysResponse]
	createSshPublicKey *connect_go.Client[v1.CreateSshPublicKeyRequest, v1.CreateSshPublicKeyResponse]
	deleteSshPublicKey *connect_go.Client[v1.DeleteSshPublicKeyRequest, v1.DeleteSshPublicKeyResponse]
}

// ListSshPublicKeys calls gitpod.v1.SshKeyService.ListSshPublicKeys.
func (c *sshKeyServiceClient) ListSshPublicKeys(ctx context.Context, req *connect_go.Request[v1.ListSshPublicKeysRequest]) (*connect_go.Response[v1.ListSshPublicKeysResponse], error) {
	return c.listSshPublicKeys.CallUnary(ctx, req)
}

// CreateSshPublicKey calls gitpod.v1.SshKeyService.CreateSshPublicKey.
func (c *sshKeyServiceClient) CreateSshPublicKey(ctx context.Context, req *connect_go.Request[v1.CreateSshPublicKeyRequest]) (*connect_go.Response[v1.CreateSshPublicKeyResponse], error) {
	return c.createSshPublicKey.CallUnary(ctx, req)
}

// DeleteSshPublicKey calls gitpod.v1.SshKeyService.DeleteSshPublicKey.
func (c *sshKeyServiceClient) DeleteSshPublicKey(ctx context.Context, req *connect_go.Request[v1.DeleteSshPublicKeyRequest]) (*connect_go.Response[v1.DeleteSshPublicKeyResponse], error) {
	return c.deleteSshPublicKey.CallUnary(ctx, req)
}

// SshKeyServiceHandler is an implementation of the gitpod.v1.SshKeyService service.
type SshKeyServiceHandler interface {
	// ListSshPublicKeys returns all the ssh public keys for the
	// authenticated user.
	ListSshPublicKeys(context.Context, *connect_go.Request[v1.ListSshPublicKeysRequest]) (*connect_go.Response[v1.ListSshPublicKeysResponse], error)
	// CreateSshPublicKeys creates an ssh public key for the
	// authenticated user.
	CreateSshPublicKey(context.Context, *connect_go.Request[v1.CreateSshPublicKeyRequest]) (*connect_go.Response[v1.CreateSshPublicKeyResponse], error)
	// DeleteSshPublicKeys deletes an ssh public key for the
	// authenticated user.
	DeleteSshPublicKey(context.Context, *connect_go.Request[v1.DeleteSshPublicKeyRequest]) (*connect_go.Response[v1.DeleteSshPublicKeyResponse], error)
}

// NewSshKeyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSshKeyServiceHandler(svc SshKeyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/gitpod.v1.SshKeyService/ListSshPublicKeys", connect_go.NewUnaryHandler(
		"/gitpod.v1.SshKeyService/ListSshPublicKeys",
		svc.ListSshPublicKeys,
		opts...,
	))
	mux.Handle("/gitpod.v1.SshKeyService/CreateSshPublicKey", connect_go.NewUnaryHandler(
		"/gitpod.v1.SshKeyService/CreateSshPublicKey",
		svc.CreateSshPublicKey,
		opts...,
	))
	mux.Handle("/gitpod.v1.SshKeyService/DeleteSshPublicKey", connect_go.NewUnaryHandler(
		"/gitpod.v1.SshKeyService/DeleteSshPublicKey",
		svc.DeleteSshPublicKey,
		opts...,
	))
	return "/gitpod.v1.SshKeyService/", mux
}

// UnimplementedSshKeyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSshKeyServiceHandler struct{}

func (UnimplementedSshKeyServiceHandler) ListSshPublicKeys(context.Context, *connect_go.Request[v1.ListSshPublicKeysRequest]) (*connect_go.Response[v1.ListSshPublicKeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.SshKeyService.ListSshPublicKeys is not implemented"))
}

func (UnimplementedSshKeyServiceHandler) CreateSshPublicKey(context.Context, *connect_go.Request[v1.CreateSshPublicKeyRequest]) (*connect_go.Response[v1.CreateSshPublicKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.SshKeyService.CreateSshPublicKey is not implemented"))
}

func (UnimplementedSshKeyServiceHandler) DeleteSshPublicKey(context.Context, *connect_go.Request[v1.DeleteSshPublicKeyRequest]) (*connect_go.Response[v1.DeleteSshPublicKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.SshKeyService.DeleteSshPublicKey is not implemented"))
}
