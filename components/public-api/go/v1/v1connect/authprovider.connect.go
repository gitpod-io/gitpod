// Copyright (c) 2024 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/authprovider.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gitpod-io/gitpod/components/public-api/go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthProviderServiceName is the fully-qualified name of the AuthProviderService service.
	AuthProviderServiceName = "gitpod.v1.AuthProviderService"
)

// AuthProviderServiceClient is a client for the gitpod.v1.AuthProviderService service.
type AuthProviderServiceClient interface {
	// CreateAuthProvider creates a new auth provider.
	CreateAuthProvider(context.Context, *connect_go.Request[v1.CreateAuthProviderRequest]) (*connect_go.Response[v1.CreateAuthProviderResponse], error)
	// GetAuthProvider returns a single auth provider.
	GetAuthProvider(context.Context, *connect_go.Request[v1.GetAuthProviderRequest]) (*connect_go.Response[v1.GetAuthProviderResponse], error)
	// ListAuthProviders lists auth providers.
	ListAuthProviders(context.Context, *connect_go.Request[v1.ListAuthProvidersRequest]) (*connect_go.Response[v1.ListAuthProvidersResponse], error)
	// ListAuthProviderDescriptions lists publicly available descriptions of
	// authproviders.
	ListAuthProviderDescriptions(context.Context, *connect_go.Request[v1.ListAuthProviderDescriptionsRequest]) (*connect_go.Response[v1.ListAuthProviderDescriptionsResponse], error)
	// UpdateAuthProvider updates an auth provider.
	UpdateAuthProvider(context.Context, *connect_go.Request[v1.UpdateAuthProviderRequest]) (*connect_go.Response[v1.UpdateAuthProviderResponse], error)
	// DeleteAuthProvider deletes the specified auth provider.
	DeleteAuthProvider(context.Context, *connect_go.Request[v1.DeleteAuthProviderRequest]) (*connect_go.Response[v1.DeleteAuthProviderResponse], error)
}

// NewAuthProviderServiceClient constructs a client for the gitpod.v1.AuthProviderService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthProviderServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthProviderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authProviderServiceClient{
		createAuthProvider: connect_go.NewClient[v1.CreateAuthProviderRequest, v1.CreateAuthProviderResponse](
			httpClient,
			baseURL+"/gitpod.v1.AuthProviderService/CreateAuthProvider",
			opts...,
		),
		getAuthProvider: connect_go.NewClient[v1.GetAuthProviderRequest, v1.GetAuthProviderResponse](
			httpClient,
			baseURL+"/gitpod.v1.AuthProviderService/GetAuthProvider",
			opts...,
		),
		listAuthProviders: connect_go.NewClient[v1.ListAuthProvidersRequest, v1.ListAuthProvidersResponse](
			httpClient,
			baseURL+"/gitpod.v1.AuthProviderService/ListAuthProviders",
			opts...,
		),
		listAuthProviderDescriptions: connect_go.NewClient[v1.ListAuthProviderDescriptionsRequest, v1.ListAuthProviderDescriptionsResponse](
			httpClient,
			baseURL+"/gitpod.v1.AuthProviderService/ListAuthProviderDescriptions",
			opts...,
		),
		updateAuthProvider: connect_go.NewClient[v1.UpdateAuthProviderRequest, v1.UpdateAuthProviderResponse](
			httpClient,
			baseURL+"/gitpod.v1.AuthProviderService/UpdateAuthProvider",
			opts...,
		),
		deleteAuthProvider: connect_go.NewClient[v1.DeleteAuthProviderRequest, v1.DeleteAuthProviderResponse](
			httpClient,
			baseURL+"/gitpod.v1.AuthProviderService/DeleteAuthProvider",
			opts...,
		),
	}
}

// authProviderServiceClient implements AuthProviderServiceClient.
type authProviderServiceClient struct {
	createAuthProvider           *connect_go.Client[v1.CreateAuthProviderRequest, v1.CreateAuthProviderResponse]
	getAuthProvider              *connect_go.Client[v1.GetAuthProviderRequest, v1.GetAuthProviderResponse]
	listAuthProviders            *connect_go.Client[v1.ListAuthProvidersRequest, v1.ListAuthProvidersResponse]
	listAuthProviderDescriptions *connect_go.Client[v1.ListAuthProviderDescriptionsRequest, v1.ListAuthProviderDescriptionsResponse]
	updateAuthProvider           *connect_go.Client[v1.UpdateAuthProviderRequest, v1.UpdateAuthProviderResponse]
	deleteAuthProvider           *connect_go.Client[v1.DeleteAuthProviderRequest, v1.DeleteAuthProviderResponse]
}

// CreateAuthProvider calls gitpod.v1.AuthProviderService.CreateAuthProvider.
func (c *authProviderServiceClient) CreateAuthProvider(ctx context.Context, req *connect_go.Request[v1.CreateAuthProviderRequest]) (*connect_go.Response[v1.CreateAuthProviderResponse], error) {
	return c.createAuthProvider.CallUnary(ctx, req)
}

// GetAuthProvider calls gitpod.v1.AuthProviderService.GetAuthProvider.
func (c *authProviderServiceClient) GetAuthProvider(ctx context.Context, req *connect_go.Request[v1.GetAuthProviderRequest]) (*connect_go.Response[v1.GetAuthProviderResponse], error) {
	return c.getAuthProvider.CallUnary(ctx, req)
}

// ListAuthProviders calls gitpod.v1.AuthProviderService.ListAuthProviders.
func (c *authProviderServiceClient) ListAuthProviders(ctx context.Context, req *connect_go.Request[v1.ListAuthProvidersRequest]) (*connect_go.Response[v1.ListAuthProvidersResponse], error) {
	return c.listAuthProviders.CallUnary(ctx, req)
}

// ListAuthProviderDescriptions calls gitpod.v1.AuthProviderService.ListAuthProviderDescriptions.
func (c *authProviderServiceClient) ListAuthProviderDescriptions(ctx context.Context, req *connect_go.Request[v1.ListAuthProviderDescriptionsRequest]) (*connect_go.Response[v1.ListAuthProviderDescriptionsResponse], error) {
	return c.listAuthProviderDescriptions.CallUnary(ctx, req)
}

// UpdateAuthProvider calls gitpod.v1.AuthProviderService.UpdateAuthProvider.
func (c *authProviderServiceClient) UpdateAuthProvider(ctx context.Context, req *connect_go.Request[v1.UpdateAuthProviderRequest]) (*connect_go.Response[v1.UpdateAuthProviderResponse], error) {
	return c.updateAuthProvider.CallUnary(ctx, req)
}

// DeleteAuthProvider calls gitpod.v1.AuthProviderService.DeleteAuthProvider.
func (c *authProviderServiceClient) DeleteAuthProvider(ctx context.Context, req *connect_go.Request[v1.DeleteAuthProviderRequest]) (*connect_go.Response[v1.DeleteAuthProviderResponse], error) {
	return c.deleteAuthProvider.CallUnary(ctx, req)
}

// AuthProviderServiceHandler is an implementation of the gitpod.v1.AuthProviderService service.
type AuthProviderServiceHandler interface {
	// CreateAuthProvider creates a new auth provider.
	CreateAuthProvider(context.Context, *connect_go.Request[v1.CreateAuthProviderRequest]) (*connect_go.Response[v1.CreateAuthProviderResponse], error)
	// GetAuthProvider returns a single auth provider.
	GetAuthProvider(context.Context, *connect_go.Request[v1.GetAuthProviderRequest]) (*connect_go.Response[v1.GetAuthProviderResponse], error)
	// ListAuthProviders lists auth providers.
	ListAuthProviders(context.Context, *connect_go.Request[v1.ListAuthProvidersRequest]) (*connect_go.Response[v1.ListAuthProvidersResponse], error)
	// ListAuthProviderDescriptions lists publicly available descriptions of
	// authproviders.
	ListAuthProviderDescriptions(context.Context, *connect_go.Request[v1.ListAuthProviderDescriptionsRequest]) (*connect_go.Response[v1.ListAuthProviderDescriptionsResponse], error)
	// UpdateAuthProvider updates an auth provider.
	UpdateAuthProvider(context.Context, *connect_go.Request[v1.UpdateAuthProviderRequest]) (*connect_go.Response[v1.UpdateAuthProviderResponse], error)
	// DeleteAuthProvider deletes the specified auth provider.
	DeleteAuthProvider(context.Context, *connect_go.Request[v1.DeleteAuthProviderRequest]) (*connect_go.Response[v1.DeleteAuthProviderResponse], error)
}

// NewAuthProviderServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthProviderServiceHandler(svc AuthProviderServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/gitpod.v1.AuthProviderService/CreateAuthProvider", connect_go.NewUnaryHandler(
		"/gitpod.v1.AuthProviderService/CreateAuthProvider",
		svc.CreateAuthProvider,
		opts...,
	))
	mux.Handle("/gitpod.v1.AuthProviderService/GetAuthProvider", connect_go.NewUnaryHandler(
		"/gitpod.v1.AuthProviderService/GetAuthProvider",
		svc.GetAuthProvider,
		opts...,
	))
	mux.Handle("/gitpod.v1.AuthProviderService/ListAuthProviders", connect_go.NewUnaryHandler(
		"/gitpod.v1.AuthProviderService/ListAuthProviders",
		svc.ListAuthProviders,
		opts...,
	))
	mux.Handle("/gitpod.v1.AuthProviderService/ListAuthProviderDescriptions", connect_go.NewUnaryHandler(
		"/gitpod.v1.AuthProviderService/ListAuthProviderDescriptions",
		svc.ListAuthProviderDescriptions,
		opts...,
	))
	mux.Handle("/gitpod.v1.AuthProviderService/UpdateAuthProvider", connect_go.NewUnaryHandler(
		"/gitpod.v1.AuthProviderService/UpdateAuthProvider",
		svc.UpdateAuthProvider,
		opts...,
	))
	mux.Handle("/gitpod.v1.AuthProviderService/DeleteAuthProvider", connect_go.NewUnaryHandler(
		"/gitpod.v1.AuthProviderService/DeleteAuthProvider",
		svc.DeleteAuthProvider,
		opts...,
	))
	return "/gitpod.v1.AuthProviderService/", mux
}

// UnimplementedAuthProviderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthProviderServiceHandler struct{}

func (UnimplementedAuthProviderServiceHandler) CreateAuthProvider(context.Context, *connect_go.Request[v1.CreateAuthProviderRequest]) (*connect_go.Response[v1.CreateAuthProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.AuthProviderService.CreateAuthProvider is not implemented"))
}

func (UnimplementedAuthProviderServiceHandler) GetAuthProvider(context.Context, *connect_go.Request[v1.GetAuthProviderRequest]) (*connect_go.Response[v1.GetAuthProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.AuthProviderService.GetAuthProvider is not implemented"))
}

func (UnimplementedAuthProviderServiceHandler) ListAuthProviders(context.Context, *connect_go.Request[v1.ListAuthProvidersRequest]) (*connect_go.Response[v1.ListAuthProvidersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.AuthProviderService.ListAuthProviders is not implemented"))
}

func (UnimplementedAuthProviderServiceHandler) ListAuthProviderDescriptions(context.Context, *connect_go.Request[v1.ListAuthProviderDescriptionsRequest]) (*connect_go.Response[v1.ListAuthProviderDescriptionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.AuthProviderService.ListAuthProviderDescriptions is not implemented"))
}

func (UnimplementedAuthProviderServiceHandler) UpdateAuthProvider(context.Context, *connect_go.Request[v1.UpdateAuthProviderRequest]) (*connect_go.Response[v1.UpdateAuthProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.AuthProviderService.UpdateAuthProvider is not implemented"))
}

func (UnimplementedAuthProviderServiceHandler) DeleteAuthProvider(context.Context, *connect_go.Request[v1.DeleteAuthProviderRequest]) (*connect_go.Response[v1.DeleteAuthProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.AuthProviderService.DeleteAuthProvider is not implemented"))
}
