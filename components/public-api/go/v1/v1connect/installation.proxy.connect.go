// Copyright (c) 2024 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-proxy-gen. DO NOT EDIT.

package v1connect

import (
	context "context"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gitpod-io/gitpod/components/public-api/go/v1"
)

var _ InstallationServiceHandler = (*ProxyInstallationServiceHandler)(nil)

type ProxyInstallationServiceHandler struct {
	Client v1.InstallationServiceClient
	UnimplementedInstallationServiceHandler
}

func (s *ProxyInstallationServiceHandler) GetInstallationWorkspaceDefaultImage(ctx context.Context, req *connect_go.Request[v1.GetInstallationWorkspaceDefaultImageRequest]) (*connect_go.Response[v1.GetInstallationWorkspaceDefaultImageResponse], error) {
	resp, err := s.Client.GetInstallationWorkspaceDefaultImage(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyInstallationServiceHandler) ListBlockedRepositories(ctx context.Context, req *connect_go.Request[v1.ListBlockedRepositoriesRequest]) (*connect_go.Response[v1.ListBlockedRepositoriesResponse], error) {
	resp, err := s.Client.ListBlockedRepositories(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyInstallationServiceHandler) CreateBlockedRepository(ctx context.Context, req *connect_go.Request[v1.CreateBlockedRepositoryRequest]) (*connect_go.Response[v1.CreateBlockedRepositoryResponse], error) {
	resp, err := s.Client.CreateBlockedRepository(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyInstallationServiceHandler) DeleteBlockedRepository(ctx context.Context, req *connect_go.Request[v1.DeleteBlockedRepositoryRequest]) (*connect_go.Response[v1.DeleteBlockedRepositoryResponse], error) {
	resp, err := s.Client.DeleteBlockedRepository(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyInstallationServiceHandler) ListBlockedEmailDomains(ctx context.Context, req *connect_go.Request[v1.ListBlockedEmailDomainsRequest]) (*connect_go.Response[v1.ListBlockedEmailDomainsResponse], error) {
	resp, err := s.Client.ListBlockedEmailDomains(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyInstallationServiceHandler) CreateBlockedEmailDomain(ctx context.Context, req *connect_go.Request[v1.CreateBlockedEmailDomainRequest]) (*connect_go.Response[v1.CreateBlockedEmailDomainResponse], error) {
	resp, err := s.Client.CreateBlockedEmailDomain(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}

func (s *ProxyInstallationServiceHandler) GetOnboardingState(ctx context.Context, req *connect_go.Request[v1.GetOnboardingStateRequest]) (*connect_go.Response[v1.GetOnboardingStateResponse], error) {
	resp, err := s.Client.GetOnboardingState(ctx, req.Msg)
	if err != nil {
		// TODO(milan): Convert to correct status code
		return nil, err
	}

	return connect_go.NewResponse(resp), nil
}
