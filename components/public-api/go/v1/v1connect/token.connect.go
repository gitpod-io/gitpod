// Copyright (c) 2024 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/token.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gitpod-io/gitpod/components/public-api/go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TokenServiceName is the fully-qualified name of the TokenService service.
	TokenServiceName = "gitpod.v1.TokenService"
)

// TokenServiceClient is a client for the gitpod.v1.TokenService service.
type TokenServiceClient interface {
	// CreateUserToken creates a new temporary access token for the specified user.
	// +admin – only to be used by installation admins
	CreateTemporaryAccessToken(context.Context, *connect_go.Request[v1.CreateTemporaryAccessTokenRequest]) (*connect_go.Response[v1.CreateTemporaryAccessTokenResponse], error)
}

// NewTokenServiceClient constructs a client for the gitpod.v1.TokenService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTokenServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TokenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tokenServiceClient{
		createTemporaryAccessToken: connect_go.NewClient[v1.CreateTemporaryAccessTokenRequest, v1.CreateTemporaryAccessTokenResponse](
			httpClient,
			baseURL+"/gitpod.v1.TokenService/CreateTemporaryAccessToken",
			opts...,
		),
	}
}

// tokenServiceClient implements TokenServiceClient.
type tokenServiceClient struct {
	createTemporaryAccessToken *connect_go.Client[v1.CreateTemporaryAccessTokenRequest, v1.CreateTemporaryAccessTokenResponse]
}

// CreateTemporaryAccessToken calls gitpod.v1.TokenService.CreateTemporaryAccessToken.
func (c *tokenServiceClient) CreateTemporaryAccessToken(ctx context.Context, req *connect_go.Request[v1.CreateTemporaryAccessTokenRequest]) (*connect_go.Response[v1.CreateTemporaryAccessTokenResponse], error) {
	return c.createTemporaryAccessToken.CallUnary(ctx, req)
}

// TokenServiceHandler is an implementation of the gitpod.v1.TokenService service.
type TokenServiceHandler interface {
	// CreateUserToken creates a new temporary access token for the specified user.
	// +admin – only to be used by installation admins
	CreateTemporaryAccessToken(context.Context, *connect_go.Request[v1.CreateTemporaryAccessTokenRequest]) (*connect_go.Response[v1.CreateTemporaryAccessTokenResponse], error)
}

// NewTokenServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTokenServiceHandler(svc TokenServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/gitpod.v1.TokenService/CreateTemporaryAccessToken", connect_go.NewUnaryHandler(
		"/gitpod.v1.TokenService/CreateTemporaryAccessToken",
		svc.CreateTemporaryAccessToken,
		opts...,
	))
	return "/gitpod.v1.TokenService/", mux
}

// UnimplementedTokenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTokenServiceHandler struct{}

func (UnimplementedTokenServiceHandler) CreateTemporaryAccessToken(context.Context, *connect_go.Request[v1.CreateTemporaryAccessTokenRequest]) (*connect_go.Response[v1.CreateTemporaryAccessTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gitpod.v1.TokenService.CreateTemporaryAccessToken is not implemented"))
}
