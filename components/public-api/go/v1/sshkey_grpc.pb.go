// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gitpod/v1/sshkey.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SshKeyServiceClient is the client API for SshKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SshKeyServiceClient interface {
	// ListSshPublicKeys returns all the ssh public keys for the
	// authenticated user.
	ListSshPublicKeys(ctx context.Context, in *ListSshPublicKeysRequest, opts ...grpc.CallOption) (*ListSshPublicKeysResponse, error)
	// CreateSshPublicKeys creates an ssh public key for the
	// authenticated user.
	CreateSshPublicKey(ctx context.Context, in *CreateSshPublicKeyRequest, opts ...grpc.CallOption) (*CreateSshPublicKeyResponse, error)
	// DeleteSshPublicKeys deletes an ssh public key for the
	// authenticated user.
	DeleteSshPublicKey(ctx context.Context, in *DeleteSshPublicKeyRequest, opts ...grpc.CallOption) (*DeleteSshPublicKeyResponse, error)
}

type sshKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSshKeyServiceClient(cc grpc.ClientConnInterface) SshKeyServiceClient {
	return &sshKeyServiceClient{cc}
}

func (c *sshKeyServiceClient) ListSshPublicKeys(ctx context.Context, in *ListSshPublicKeysRequest, opts ...grpc.CallOption) (*ListSshPublicKeysResponse, error) {
	out := new(ListSshPublicKeysResponse)
	err := c.cc.Invoke(ctx, "/gitpod.v1.SshKeyService/ListSshPublicKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sshKeyServiceClient) CreateSshPublicKey(ctx context.Context, in *CreateSshPublicKeyRequest, opts ...grpc.CallOption) (*CreateSshPublicKeyResponse, error) {
	out := new(CreateSshPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/gitpod.v1.SshKeyService/CreateSshPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sshKeyServiceClient) DeleteSshPublicKey(ctx context.Context, in *DeleteSshPublicKeyRequest, opts ...grpc.CallOption) (*DeleteSshPublicKeyResponse, error) {
	out := new(DeleteSshPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/gitpod.v1.SshKeyService/DeleteSshPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SshKeyServiceServer is the server API for SshKeyService service.
// All implementations must embed UnimplementedSshKeyServiceServer
// for forward compatibility
type SshKeyServiceServer interface {
	// ListSshPublicKeys returns all the ssh public keys for the
	// authenticated user.
	ListSshPublicKeys(context.Context, *ListSshPublicKeysRequest) (*ListSshPublicKeysResponse, error)
	// CreateSshPublicKeys creates an ssh public key for the
	// authenticated user.
	CreateSshPublicKey(context.Context, *CreateSshPublicKeyRequest) (*CreateSshPublicKeyResponse, error)
	// DeleteSshPublicKeys deletes an ssh public key for the
	// authenticated user.
	DeleteSshPublicKey(context.Context, *DeleteSshPublicKeyRequest) (*DeleteSshPublicKeyResponse, error)
	mustEmbedUnimplementedSshKeyServiceServer()
}

// UnimplementedSshKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSshKeyServiceServer struct {
}

func (UnimplementedSshKeyServiceServer) ListSshPublicKeys(context.Context, *ListSshPublicKeysRequest) (*ListSshPublicKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSshPublicKeys not implemented")
}
func (UnimplementedSshKeyServiceServer) CreateSshPublicKey(context.Context, *CreateSshPublicKeyRequest) (*CreateSshPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSshPublicKey not implemented")
}
func (UnimplementedSshKeyServiceServer) DeleteSshPublicKey(context.Context, *DeleteSshPublicKeyRequest) (*DeleteSshPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSshPublicKey not implemented")
}
func (UnimplementedSshKeyServiceServer) mustEmbedUnimplementedSshKeyServiceServer() {}

// UnsafeSshKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SshKeyServiceServer will
// result in compilation errors.
type UnsafeSshKeyServiceServer interface {
	mustEmbedUnimplementedSshKeyServiceServer()
}

func RegisterSshKeyServiceServer(s grpc.ServiceRegistrar, srv SshKeyServiceServer) {
	s.RegisterService(&SshKeyService_ServiceDesc, srv)
}

func _SshKeyService_ListSshPublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSshPublicKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshKeyServiceServer).ListSshPublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitpod.v1.SshKeyService/ListSshPublicKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshKeyServiceServer).ListSshPublicKeys(ctx, req.(*ListSshPublicKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SshKeyService_CreateSshPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSshPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshKeyServiceServer).CreateSshPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitpod.v1.SshKeyService/CreateSshPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshKeyServiceServer).CreateSshPublicKey(ctx, req.(*CreateSshPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SshKeyService_DeleteSshPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSshPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshKeyServiceServer).DeleteSshPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitpod.v1.SshKeyService/DeleteSshPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshKeyServiceServer).DeleteSshPublicKey(ctx, req.(*DeleteSshPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SshKeyService_ServiceDesc is the grpc.ServiceDesc for SshKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SshKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitpod.v1.SshKeyService",
	HandlerType: (*SshKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSshPublicKeys",
			Handler:    _SshKeyService_ListSshPublicKeys_Handler,
		},
		{
			MethodName: "CreateSshPublicKey",
			Handler:    _SshKeyService_CreateSshPublicKey_Handler,
		},
		{
			MethodName: "DeleteSshPublicKey",
			Handler:    _SshKeyService_DeleteSshPublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitpod/v1/sshkey.proto",
}
