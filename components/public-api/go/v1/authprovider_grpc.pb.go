// Copyright (c) 2024 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gitpod/v1/authprovider.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthProviderServiceClient is the client API for AuthProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthProviderServiceClient interface {
	// CreateAuthProvider creates a new auth provider.
	CreateAuthProvider(ctx context.Context, in *CreateAuthProviderRequest, opts ...grpc.CallOption) (*CreateAuthProviderResponse, error)
	// GetAuthProvider returns a single auth provider.
	GetAuthProvider(ctx context.Context, in *GetAuthProviderRequest, opts ...grpc.CallOption) (*GetAuthProviderResponse, error)
	// ListAuthProviders lists auth providers.
	ListAuthProviders(ctx context.Context, in *ListAuthProvidersRequest, opts ...grpc.CallOption) (*ListAuthProvidersResponse, error)
	// ListAuthProviderDescriptions lists publicly available descriptions of
	// authproviders.
	ListAuthProviderDescriptions(ctx context.Context, in *ListAuthProviderDescriptionsRequest, opts ...grpc.CallOption) (*ListAuthProviderDescriptionsResponse, error)
	// UpdateAuthProvider updates an auth provider.
	UpdateAuthProvider(ctx context.Context, in *UpdateAuthProviderRequest, opts ...grpc.CallOption) (*UpdateAuthProviderResponse, error)
	// DeleteAuthProvider deletes the specified auth provider.
	DeleteAuthProvider(ctx context.Context, in *DeleteAuthProviderRequest, opts ...grpc.CallOption) (*DeleteAuthProviderResponse, error)
}

type authProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthProviderServiceClient(cc grpc.ClientConnInterface) AuthProviderServiceClient {
	return &authProviderServiceClient{cc}
}

func (c *authProviderServiceClient) CreateAuthProvider(ctx context.Context, in *CreateAuthProviderRequest, opts ...grpc.CallOption) (*CreateAuthProviderResponse, error) {
	out := new(CreateAuthProviderResponse)
	err := c.cc.Invoke(ctx, "/gitpod.v1.AuthProviderService/CreateAuthProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) GetAuthProvider(ctx context.Context, in *GetAuthProviderRequest, opts ...grpc.CallOption) (*GetAuthProviderResponse, error) {
	out := new(GetAuthProviderResponse)
	err := c.cc.Invoke(ctx, "/gitpod.v1.AuthProviderService/GetAuthProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) ListAuthProviders(ctx context.Context, in *ListAuthProvidersRequest, opts ...grpc.CallOption) (*ListAuthProvidersResponse, error) {
	out := new(ListAuthProvidersResponse)
	err := c.cc.Invoke(ctx, "/gitpod.v1.AuthProviderService/ListAuthProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) ListAuthProviderDescriptions(ctx context.Context, in *ListAuthProviderDescriptionsRequest, opts ...grpc.CallOption) (*ListAuthProviderDescriptionsResponse, error) {
	out := new(ListAuthProviderDescriptionsResponse)
	err := c.cc.Invoke(ctx, "/gitpod.v1.AuthProviderService/ListAuthProviderDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) UpdateAuthProvider(ctx context.Context, in *UpdateAuthProviderRequest, opts ...grpc.CallOption) (*UpdateAuthProviderResponse, error) {
	out := new(UpdateAuthProviderResponse)
	err := c.cc.Invoke(ctx, "/gitpod.v1.AuthProviderService/UpdateAuthProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authProviderServiceClient) DeleteAuthProvider(ctx context.Context, in *DeleteAuthProviderRequest, opts ...grpc.CallOption) (*DeleteAuthProviderResponse, error) {
	out := new(DeleteAuthProviderResponse)
	err := c.cc.Invoke(ctx, "/gitpod.v1.AuthProviderService/DeleteAuthProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthProviderServiceServer is the server API for AuthProviderService service.
// All implementations must embed UnimplementedAuthProviderServiceServer
// for forward compatibility
type AuthProviderServiceServer interface {
	// CreateAuthProvider creates a new auth provider.
	CreateAuthProvider(context.Context, *CreateAuthProviderRequest) (*CreateAuthProviderResponse, error)
	// GetAuthProvider returns a single auth provider.
	GetAuthProvider(context.Context, *GetAuthProviderRequest) (*GetAuthProviderResponse, error)
	// ListAuthProviders lists auth providers.
	ListAuthProviders(context.Context, *ListAuthProvidersRequest) (*ListAuthProvidersResponse, error)
	// ListAuthProviderDescriptions lists publicly available descriptions of
	// authproviders.
	ListAuthProviderDescriptions(context.Context, *ListAuthProviderDescriptionsRequest) (*ListAuthProviderDescriptionsResponse, error)
	// UpdateAuthProvider updates an auth provider.
	UpdateAuthProvider(context.Context, *UpdateAuthProviderRequest) (*UpdateAuthProviderResponse, error)
	// DeleteAuthProvider deletes the specified auth provider.
	DeleteAuthProvider(context.Context, *DeleteAuthProviderRequest) (*DeleteAuthProviderResponse, error)
	mustEmbedUnimplementedAuthProviderServiceServer()
}

// UnimplementedAuthProviderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthProviderServiceServer struct {
}

func (UnimplementedAuthProviderServiceServer) CreateAuthProvider(context.Context, *CreateAuthProviderRequest) (*CreateAuthProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthProvider not implemented")
}
func (UnimplementedAuthProviderServiceServer) GetAuthProvider(context.Context, *GetAuthProviderRequest) (*GetAuthProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthProvider not implemented")
}
func (UnimplementedAuthProviderServiceServer) ListAuthProviders(context.Context, *ListAuthProvidersRequest) (*ListAuthProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthProviders not implemented")
}
func (UnimplementedAuthProviderServiceServer) ListAuthProviderDescriptions(context.Context, *ListAuthProviderDescriptionsRequest) (*ListAuthProviderDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthProviderDescriptions not implemented")
}
func (UnimplementedAuthProviderServiceServer) UpdateAuthProvider(context.Context, *UpdateAuthProviderRequest) (*UpdateAuthProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthProvider not implemented")
}
func (UnimplementedAuthProviderServiceServer) DeleteAuthProvider(context.Context, *DeleteAuthProviderRequest) (*DeleteAuthProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthProvider not implemented")
}
func (UnimplementedAuthProviderServiceServer) mustEmbedUnimplementedAuthProviderServiceServer() {}

// UnsafeAuthProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthProviderServiceServer will
// result in compilation errors.
type UnsafeAuthProviderServiceServer interface {
	mustEmbedUnimplementedAuthProviderServiceServer()
}

func RegisterAuthProviderServiceServer(s grpc.ServiceRegistrar, srv AuthProviderServiceServer) {
	s.RegisterService(&AuthProviderService_ServiceDesc, srv)
}

func _AuthProviderService_CreateAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).CreateAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitpod.v1.AuthProviderService/CreateAuthProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).CreateAuthProvider(ctx, req.(*CreateAuthProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_GetAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).GetAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitpod.v1.AuthProviderService/GetAuthProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).GetAuthProvider(ctx, req.(*GetAuthProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_ListAuthProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).ListAuthProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitpod.v1.AuthProviderService/ListAuthProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).ListAuthProviders(ctx, req.(*ListAuthProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_ListAuthProviderDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthProviderDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).ListAuthProviderDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitpod.v1.AuthProviderService/ListAuthProviderDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).ListAuthProviderDescriptions(ctx, req.(*ListAuthProviderDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_UpdateAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).UpdateAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitpod.v1.AuthProviderService/UpdateAuthProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).UpdateAuthProvider(ctx, req.(*UpdateAuthProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthProviderService_DeleteAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServiceServer).DeleteAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitpod.v1.AuthProviderService/DeleteAuthProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServiceServer).DeleteAuthProvider(ctx, req.(*DeleteAuthProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthProviderService_ServiceDesc is the grpc.ServiceDesc for AuthProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitpod.v1.AuthProviderService",
	HandlerType: (*AuthProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuthProvider",
			Handler:    _AuthProviderService_CreateAuthProvider_Handler,
		},
		{
			MethodName: "GetAuthProvider",
			Handler:    _AuthProviderService_GetAuthProvider_Handler,
		},
		{
			MethodName: "ListAuthProviders",
			Handler:    _AuthProviderService_ListAuthProviders_Handler,
		},
		{
			MethodName: "ListAuthProviderDescriptions",
			Handler:    _AuthProviderService_ListAuthProviderDescriptions_Handler,
		},
		{
			MethodName: "UpdateAuthProvider",
			Handler:    _AuthProviderService_UpdateAuthProvider_Handler,
		},
		{
			MethodName: "DeleteAuthProvider",
			Handler:    _AuthProviderService_DeleteAuthProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitpod/v1/authprovider.proto",
}
