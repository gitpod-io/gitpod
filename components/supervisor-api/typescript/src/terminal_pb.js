/**
 * Copyright (c) 2020 TypeFox GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License-AGPL.txt in the project root for license information.
 */

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.supervisor.ListTerminalsRequest', null, global);
goog.exportSymbol('proto.supervisor.ListTerminalsResponse', null, global);
goog.exportSymbol('proto.supervisor.ListTerminalsResponse.Terminal', null, global);
goog.exportSymbol('proto.supervisor.ListenTerminalRequest', null, global);
goog.exportSymbol('proto.supervisor.ListenTerminalResponse', null, global);
goog.exportSymbol('proto.supervisor.OpenTerminalRequest', null, global);
goog.exportSymbol('proto.supervisor.OpenTerminalResponse', null, global);
goog.exportSymbol('proto.supervisor.SetTerminalSizeRequest', null, global);
goog.exportSymbol('proto.supervisor.SetTerminalSizeResponse', null, global);
goog.exportSymbol('proto.supervisor.WriteTerminalRequest', null, global);
goog.exportSymbol('proto.supervisor.WriteTerminalResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supervisor.OpenTerminalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supervisor.OpenTerminalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supervisor.OpenTerminalRequest.displayName = 'proto.supervisor.OpenTerminalRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supervisor.OpenTerminalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supervisor.OpenTerminalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supervisor.OpenTerminalResponse.displayName = 'proto.supervisor.OpenTerminalResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supervisor.ListTerminalsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supervisor.ListTerminalsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supervisor.ListTerminalsRequest.displayName = 'proto.supervisor.ListTerminalsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supervisor.ListTerminalsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.supervisor.ListTerminalsResponse.repeatedFields_, null);
};
goog.inherits(proto.supervisor.ListTerminalsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supervisor.ListTerminalsResponse.displayName = 'proto.supervisor.ListTerminalsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supervisor.ListTerminalsResponse.Terminal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.supervisor.ListTerminalsResponse.Terminal.repeatedFields_, null);
};
goog.inherits(proto.supervisor.ListTerminalsResponse.Terminal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supervisor.ListTerminalsResponse.Terminal.displayName = 'proto.supervisor.ListTerminalsResponse.Terminal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supervisor.ListenTerminalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supervisor.ListenTerminalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supervisor.ListenTerminalRequest.displayName = 'proto.supervisor.ListenTerminalRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supervisor.ListenTerminalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.supervisor.ListenTerminalResponse.oneofGroups_);
};
goog.inherits(proto.supervisor.ListenTerminalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supervisor.ListenTerminalResponse.displayName = 'proto.supervisor.ListenTerminalResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supervisor.WriteTerminalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supervisor.WriteTerminalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supervisor.WriteTerminalRequest.displayName = 'proto.supervisor.WriteTerminalRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supervisor.WriteTerminalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supervisor.WriteTerminalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supervisor.WriteTerminalResponse.displayName = 'proto.supervisor.WriteTerminalResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supervisor.SetTerminalSizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.supervisor.SetTerminalSizeRequest.oneofGroups_);
};
goog.inherits(proto.supervisor.SetTerminalSizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supervisor.SetTerminalSizeRequest.displayName = 'proto.supervisor.SetTerminalSizeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.supervisor.SetTerminalSizeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.supervisor.SetTerminalSizeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.supervisor.SetTerminalSizeResponse.displayName = 'proto.supervisor.SetTerminalSizeResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supervisor.OpenTerminalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.supervisor.OpenTerminalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supervisor.OpenTerminalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.OpenTerminalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supervisor.OpenTerminalRequest}
 */
proto.supervisor.OpenTerminalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supervisor.OpenTerminalRequest;
  return proto.supervisor.OpenTerminalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supervisor.OpenTerminalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supervisor.OpenTerminalRequest}
 */
proto.supervisor.OpenTerminalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supervisor.OpenTerminalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supervisor.OpenTerminalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supervisor.OpenTerminalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.OpenTerminalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supervisor.OpenTerminalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supervisor.OpenTerminalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supervisor.OpenTerminalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.OpenTerminalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    alias: jspb.Message.getFieldWithDefault(msg, 1, ""),
    starterToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supervisor.OpenTerminalResponse}
 */
proto.supervisor.OpenTerminalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supervisor.OpenTerminalResponse;
  return proto.supervisor.OpenTerminalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supervisor.OpenTerminalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supervisor.OpenTerminalResponse}
 */
proto.supervisor.OpenTerminalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarterToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supervisor.OpenTerminalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supervisor.OpenTerminalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supervisor.OpenTerminalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.OpenTerminalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStarterToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string alias = 1;
 * @return {string}
 */
proto.supervisor.OpenTerminalResponse.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.supervisor.OpenTerminalResponse.prototype.setAlias = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string starter_token = 2;
 * @return {string}
 */
proto.supervisor.OpenTerminalResponse.prototype.getStarterToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.supervisor.OpenTerminalResponse.prototype.setStarterToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supervisor.ListTerminalsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.supervisor.ListTerminalsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supervisor.ListTerminalsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.ListTerminalsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supervisor.ListTerminalsRequest}
 */
proto.supervisor.ListTerminalsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supervisor.ListTerminalsRequest;
  return proto.supervisor.ListTerminalsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supervisor.ListTerminalsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supervisor.ListTerminalsRequest}
 */
proto.supervisor.ListTerminalsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supervisor.ListTerminalsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supervisor.ListTerminalsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supervisor.ListTerminalsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.ListTerminalsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.supervisor.ListTerminalsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supervisor.ListTerminalsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supervisor.ListTerminalsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supervisor.ListTerminalsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.ListTerminalsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    terminalsList: jspb.Message.toObjectList(msg.getTerminalsList(),
    proto.supervisor.ListTerminalsResponse.Terminal.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supervisor.ListTerminalsResponse}
 */
proto.supervisor.ListTerminalsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supervisor.ListTerminalsResponse;
  return proto.supervisor.ListTerminalsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supervisor.ListTerminalsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supervisor.ListTerminalsResponse}
 */
proto.supervisor.ListTerminalsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.supervisor.ListTerminalsResponse.Terminal;
      reader.readMessage(value,proto.supervisor.ListTerminalsResponse.Terminal.deserializeBinaryFromReader);
      msg.addTerminals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supervisor.ListTerminalsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supervisor.ListTerminalsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supervisor.ListTerminalsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.ListTerminalsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerminalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.supervisor.ListTerminalsResponse.Terminal.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.supervisor.ListTerminalsResponse.Terminal.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supervisor.ListTerminalsResponse.Terminal.prototype.toObject = function(opt_includeInstance) {
  return proto.supervisor.ListTerminalsResponse.Terminal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supervisor.ListTerminalsResponse.Terminal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.ListTerminalsResponse.Terminal.toObject = function(includeInstance, msg) {
  var f, obj = {
    alias: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commandList: jspb.Message.getRepeatedField(msg, 2),
    title: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supervisor.ListTerminalsResponse.Terminal}
 */
proto.supervisor.ListTerminalsResponse.Terminal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supervisor.ListTerminalsResponse.Terminal;
  return proto.supervisor.ListTerminalsResponse.Terminal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supervisor.ListTerminalsResponse.Terminal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supervisor.ListTerminalsResponse.Terminal}
 */
proto.supervisor.ListTerminalsResponse.Terminal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addCommand(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supervisor.ListTerminalsResponse.Terminal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supervisor.ListTerminalsResponse.Terminal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supervisor.ListTerminalsResponse.Terminal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.ListTerminalsResponse.Terminal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommandList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string alias = 1;
 * @return {string}
 */
proto.supervisor.ListTerminalsResponse.Terminal.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.supervisor.ListTerminalsResponse.Terminal.prototype.setAlias = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string command = 2;
 * @return {!Array<string>}
 */
proto.supervisor.ListTerminalsResponse.Terminal.prototype.getCommandList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.supervisor.ListTerminalsResponse.Terminal.prototype.setCommandList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.supervisor.ListTerminalsResponse.Terminal.prototype.addCommand = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.supervisor.ListTerminalsResponse.Terminal.prototype.clearCommandList = function() {
  this.setCommandList([]);
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.supervisor.ListTerminalsResponse.Terminal.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.supervisor.ListTerminalsResponse.Terminal.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Terminal terminals = 1;
 * @return {!Array<!proto.supervisor.ListTerminalsResponse.Terminal>}
 */
proto.supervisor.ListTerminalsResponse.prototype.getTerminalsList = function() {
  return /** @type{!Array<!proto.supervisor.ListTerminalsResponse.Terminal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.supervisor.ListTerminalsResponse.Terminal, 1));
};


/** @param {!Array<!proto.supervisor.ListTerminalsResponse.Terminal>} value */
proto.supervisor.ListTerminalsResponse.prototype.setTerminalsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.supervisor.ListTerminalsResponse.Terminal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.supervisor.ListTerminalsResponse.Terminal}
 */
proto.supervisor.ListTerminalsResponse.prototype.addTerminals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.supervisor.ListTerminalsResponse.Terminal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.supervisor.ListTerminalsResponse.prototype.clearTerminalsList = function() {
  this.setTerminalsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supervisor.ListenTerminalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.supervisor.ListenTerminalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supervisor.ListenTerminalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.ListenTerminalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    alias: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supervisor.ListenTerminalRequest}
 */
proto.supervisor.ListenTerminalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supervisor.ListenTerminalRequest;
  return proto.supervisor.ListenTerminalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supervisor.ListenTerminalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supervisor.ListenTerminalRequest}
 */
proto.supervisor.ListenTerminalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supervisor.ListenTerminalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supervisor.ListenTerminalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supervisor.ListenTerminalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.ListenTerminalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string alias = 1;
 * @return {string}
 */
proto.supervisor.ListenTerminalRequest.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.supervisor.ListenTerminalRequest.prototype.setAlias = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.supervisor.ListenTerminalResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.supervisor.ListenTerminalResponse.OutputCase = {
  OUTPUT_NOT_SET: 0,
  STDOUT: 1,
  STDERR: 2
};

/**
 * @return {proto.supervisor.ListenTerminalResponse.OutputCase}
 */
proto.supervisor.ListenTerminalResponse.prototype.getOutputCase = function() {
  return /** @type {proto.supervisor.ListenTerminalResponse.OutputCase} */(jspb.Message.computeOneofCase(this, proto.supervisor.ListenTerminalResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supervisor.ListenTerminalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supervisor.ListenTerminalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supervisor.ListenTerminalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.ListenTerminalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stdout: msg.getStdout_asB64(),
    stderr: msg.getStderr_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supervisor.ListenTerminalResponse}
 */
proto.supervisor.ListenTerminalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supervisor.ListenTerminalResponse;
  return proto.supervisor.ListenTerminalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supervisor.ListenTerminalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supervisor.ListenTerminalResponse}
 */
proto.supervisor.ListenTerminalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStdout(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStderr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supervisor.ListenTerminalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supervisor.ListenTerminalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supervisor.ListenTerminalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.ListenTerminalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes stdout = 1;
 * @return {!(string|Uint8Array)}
 */
proto.supervisor.ListenTerminalResponse.prototype.getStdout = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes stdout = 1;
 * This is a type-conversion wrapper around `getStdout()`
 * @return {string}
 */
proto.supervisor.ListenTerminalResponse.prototype.getStdout_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStdout()));
};


/**
 * optional bytes stdout = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStdout()`
 * @return {!Uint8Array}
 */
proto.supervisor.ListenTerminalResponse.prototype.getStdout_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStdout()));
};


/** @param {!(string|Uint8Array)} value */
proto.supervisor.ListenTerminalResponse.prototype.setStdout = function(value) {
  jspb.Message.setOneofField(this, 1, proto.supervisor.ListenTerminalResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.supervisor.ListenTerminalResponse.prototype.clearStdout = function() {
  jspb.Message.setOneofField(this, 1, proto.supervisor.ListenTerminalResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supervisor.ListenTerminalResponse.prototype.hasStdout = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes stderr = 2;
 * @return {!(string|Uint8Array)}
 */
proto.supervisor.ListenTerminalResponse.prototype.getStderr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes stderr = 2;
 * This is a type-conversion wrapper around `getStderr()`
 * @return {string}
 */
proto.supervisor.ListenTerminalResponse.prototype.getStderr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStderr()));
};


/**
 * optional bytes stderr = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStderr()`
 * @return {!Uint8Array}
 */
proto.supervisor.ListenTerminalResponse.prototype.getStderr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStderr()));
};


/** @param {!(string|Uint8Array)} value */
proto.supervisor.ListenTerminalResponse.prototype.setStderr = function(value) {
  jspb.Message.setOneofField(this, 2, proto.supervisor.ListenTerminalResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.supervisor.ListenTerminalResponse.prototype.clearStderr = function() {
  jspb.Message.setOneofField(this, 2, proto.supervisor.ListenTerminalResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supervisor.ListenTerminalResponse.prototype.hasStderr = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supervisor.WriteTerminalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.supervisor.WriteTerminalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supervisor.WriteTerminalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.WriteTerminalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    alias: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stdin: msg.getStdin_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supervisor.WriteTerminalRequest}
 */
proto.supervisor.WriteTerminalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supervisor.WriteTerminalRequest;
  return proto.supervisor.WriteTerminalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supervisor.WriteTerminalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supervisor.WriteTerminalRequest}
 */
proto.supervisor.WriteTerminalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStdin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supervisor.WriteTerminalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supervisor.WriteTerminalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supervisor.WriteTerminalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.WriteTerminalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStdin_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string alias = 1;
 * @return {string}
 */
proto.supervisor.WriteTerminalRequest.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.supervisor.WriteTerminalRequest.prototype.setAlias = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes stdin = 2;
 * @return {!(string|Uint8Array)}
 */
proto.supervisor.WriteTerminalRequest.prototype.getStdin = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes stdin = 2;
 * This is a type-conversion wrapper around `getStdin()`
 * @return {string}
 */
proto.supervisor.WriteTerminalRequest.prototype.getStdin_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStdin()));
};


/**
 * optional bytes stdin = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStdin()`
 * @return {!Uint8Array}
 */
proto.supervisor.WriteTerminalRequest.prototype.getStdin_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStdin()));
};


/** @param {!(string|Uint8Array)} value */
proto.supervisor.WriteTerminalRequest.prototype.setStdin = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supervisor.WriteTerminalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supervisor.WriteTerminalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supervisor.WriteTerminalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.WriteTerminalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytesWritten: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supervisor.WriteTerminalResponse}
 */
proto.supervisor.WriteTerminalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supervisor.WriteTerminalResponse;
  return proto.supervisor.WriteTerminalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supervisor.WriteTerminalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supervisor.WriteTerminalResponse}
 */
proto.supervisor.WriteTerminalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBytesWritten(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supervisor.WriteTerminalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supervisor.WriteTerminalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supervisor.WriteTerminalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.WriteTerminalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytesWritten();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 bytes_written = 1;
 * @return {number}
 */
proto.supervisor.WriteTerminalResponse.prototype.getBytesWritten = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.supervisor.WriteTerminalResponse.prototype.setBytesWritten = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.supervisor.SetTerminalSizeRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.supervisor.SetTerminalSizeRequest.PriorityCase = {
  PRIORITY_NOT_SET: 0,
  TOKEN: 2,
  FORCE: 3
};

/**
 * @return {proto.supervisor.SetTerminalSizeRequest.PriorityCase}
 */
proto.supervisor.SetTerminalSizeRequest.prototype.getPriorityCase = function() {
  return /** @type {proto.supervisor.SetTerminalSizeRequest.PriorityCase} */(jspb.Message.computeOneofCase(this, proto.supervisor.SetTerminalSizeRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supervisor.SetTerminalSizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.supervisor.SetTerminalSizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supervisor.SetTerminalSizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.SetTerminalSizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    alias: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    force: jspb.Message.getFieldWithDefault(msg, 3, false),
    rows: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cols: jspb.Message.getFieldWithDefault(msg, 5, 0),
    widthpx: jspb.Message.getFieldWithDefault(msg, 6, 0),
    heightpx: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supervisor.SetTerminalSizeRequest}
 */
proto.supervisor.SetTerminalSizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supervisor.SetTerminalSizeRequest;
  return proto.supervisor.SetTerminalSizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supervisor.SetTerminalSizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supervisor.SetTerminalSizeRequest}
 */
proto.supervisor.SetTerminalSizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForce(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRows(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCols(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidthpx(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeightpx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supervisor.SetTerminalSizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supervisor.SetTerminalSizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supervisor.SetTerminalSizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.SetTerminalSizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getRows();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getCols();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getWidthpx();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getHeightpx();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional string alias = 1;
 * @return {string}
 */
proto.supervisor.SetTerminalSizeRequest.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.supervisor.SetTerminalSizeRequest.prototype.setAlias = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.supervisor.SetTerminalSizeRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.supervisor.SetTerminalSizeRequest.prototype.setToken = function(value) {
  jspb.Message.setOneofField(this, 2, proto.supervisor.SetTerminalSizeRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.supervisor.SetTerminalSizeRequest.prototype.clearToken = function() {
  jspb.Message.setOneofField(this, 2, proto.supervisor.SetTerminalSizeRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supervisor.SetTerminalSizeRequest.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool force = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.supervisor.SetTerminalSizeRequest.prototype.getForce = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.supervisor.SetTerminalSizeRequest.prototype.setForce = function(value) {
  jspb.Message.setOneofField(this, 3, proto.supervisor.SetTerminalSizeRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.supervisor.SetTerminalSizeRequest.prototype.clearForce = function() {
  jspb.Message.setOneofField(this, 3, proto.supervisor.SetTerminalSizeRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.supervisor.SetTerminalSizeRequest.prototype.hasForce = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 rows = 4;
 * @return {number}
 */
proto.supervisor.SetTerminalSizeRequest.prototype.getRows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.supervisor.SetTerminalSizeRequest.prototype.setRows = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 cols = 5;
 * @return {number}
 */
proto.supervisor.SetTerminalSizeRequest.prototype.getCols = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.supervisor.SetTerminalSizeRequest.prototype.setCols = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 widthPx = 6;
 * @return {number}
 */
proto.supervisor.SetTerminalSizeRequest.prototype.getWidthpx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.supervisor.SetTerminalSizeRequest.prototype.setWidthpx = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 heightPx = 7;
 * @return {number}
 */
proto.supervisor.SetTerminalSizeRequest.prototype.getHeightpx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.supervisor.SetTerminalSizeRequest.prototype.setHeightpx = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.supervisor.SetTerminalSizeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.supervisor.SetTerminalSizeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.supervisor.SetTerminalSizeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.SetTerminalSizeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.supervisor.SetTerminalSizeResponse}
 */
proto.supervisor.SetTerminalSizeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.supervisor.SetTerminalSizeResponse;
  return proto.supervisor.SetTerminalSizeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.supervisor.SetTerminalSizeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.supervisor.SetTerminalSizeResponse}
 */
proto.supervisor.SetTerminalSizeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.supervisor.SetTerminalSizeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.supervisor.SetTerminalSizeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.supervisor.SetTerminalSizeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.supervisor.SetTerminalSizeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.supervisor);
