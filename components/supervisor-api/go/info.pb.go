// Copyright (c) 2020 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: info.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkspaceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkspaceInfoRequest) Reset() {
	*x = WorkspaceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceInfoRequest) ProtoMessage() {}

func (x *WorkspaceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceInfoRequest.ProtoReflect.Descriptor instead.
func (*WorkspaceInfoRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{0}
}

type WorkspaceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// workspace_id is the workspace ID of this workspace.
	WorkspaceId string `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// instance_id is the instance ID of this workspace.
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// checkout_location is the path where we initialized the workspace content
	CheckoutLocation string `protobuf:"bytes,3,opt,name=checkout_location,json=checkoutLocation,proto3" json:"checkout_location,omitempty"`
	// workspace_location is the location of the IDE workspace
	//
	// Types that are assignable to WorkspaceLocation:
	//
	//	*WorkspaceInfoResponse_WorkspaceLocationFile
	//	*WorkspaceInfoResponse_WorkspaceLocationFolder
	WorkspaceLocation isWorkspaceInfoResponse_WorkspaceLocation `protobuf_oneof:"workspace_location"`
	// user_home is the path to the user's home.
	UserHome string `protobuf:"bytes,6,opt,name=user_home,json=userHome,proto3" json:"user_home,omitempty"`
	// GitpodAPI provides information to reach the Gitpod server API.
	GitpodApi *WorkspaceInfoResponse_GitpodAPI `protobuf:"bytes,7,opt,name=gitpod_api,json=gitpodApi,proto3" json:"gitpod_api,omitempty"`
	// gitpod_host provides Gitpod host URL.
	GitpodHost string `protobuf:"bytes,8,opt,name=gitpod_host,json=gitpodHost,proto3" json:"gitpod_host,omitempty"`
	// workspace_context_url is an URL for which the workspace was created.
	WorkspaceContextUrl string `protobuf:"bytes,9,opt,name=workspace_context_url,json=workspaceContextUrl,proto3" json:"workspace_context_url,omitempty"`
	// repository is a repository from which this workspace was created
	Repository *WorkspaceInfoResponse_Repository `protobuf:"bytes,10,opt,name=repository,proto3" json:"repository,omitempty"`
	// workspace_cluster_host provides the cluster host under which this workspace is served, e.g. ws-eu11.gitpod.io
	WorkspaceClusterHost string `protobuf:"bytes,11,opt,name=workspace_cluster_host,json=workspaceClusterHost,proto3" json:"workspace_cluster_host,omitempty"`
	// workspace_url is an URL for which the workspace is accessed.
	WorkspaceUrl string `protobuf:"bytes,12,opt,name=workspace_url,json=workspaceUrl,proto3" json:"workspace_url,omitempty"`
	// ide_alias is an alias of IDE to be run. Possible values: "code", "code-latest", "theia"
	IdeAlias string `protobuf:"bytes,13,opt,name=ide_alias,json=ideAlias,proto3" json:"ide_alias,omitempty"`
	// ide_port is the port on which the IDE is to be run
	IdePort uint32 `protobuf:"varint,14,opt,name=ide_port,json=idePort,proto3" json:"ide_port,omitempty"`
	// workspace_class denotes the class of the workspace
	WorkspaceClass *WorkspaceInfoResponse_WorkspaceClass `protobuf:"bytes,15,opt,name=workspace_class,json=workspaceClass,proto3" json:"workspace_class,omitempty"`
}

func (x *WorkspaceInfoResponse) Reset() {
	*x = WorkspaceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceInfoResponse) ProtoMessage() {}

func (x *WorkspaceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceInfoResponse.ProtoReflect.Descriptor instead.
func (*WorkspaceInfoResponse) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{1}
}

func (x *WorkspaceInfoResponse) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *WorkspaceInfoResponse) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *WorkspaceInfoResponse) GetCheckoutLocation() string {
	if x != nil {
		return x.CheckoutLocation
	}
	return ""
}

func (m *WorkspaceInfoResponse) GetWorkspaceLocation() isWorkspaceInfoResponse_WorkspaceLocation {
	if m != nil {
		return m.WorkspaceLocation
	}
	return nil
}

func (x *WorkspaceInfoResponse) GetWorkspaceLocationFile() string {
	if x, ok := x.GetWorkspaceLocation().(*WorkspaceInfoResponse_WorkspaceLocationFile); ok {
		return x.WorkspaceLocationFile
	}
	return ""
}

func (x *WorkspaceInfoResponse) GetWorkspaceLocationFolder() string {
	if x, ok := x.GetWorkspaceLocation().(*WorkspaceInfoResponse_WorkspaceLocationFolder); ok {
		return x.WorkspaceLocationFolder
	}
	return ""
}

func (x *WorkspaceInfoResponse) GetUserHome() string {
	if x != nil {
		return x.UserHome
	}
	return ""
}

func (x *WorkspaceInfoResponse) GetGitpodApi() *WorkspaceInfoResponse_GitpodAPI {
	if x != nil {
		return x.GitpodApi
	}
	return nil
}

func (x *WorkspaceInfoResponse) GetGitpodHost() string {
	if x != nil {
		return x.GitpodHost
	}
	return ""
}

func (x *WorkspaceInfoResponse) GetWorkspaceContextUrl() string {
	if x != nil {
		return x.WorkspaceContextUrl
	}
	return ""
}

func (x *WorkspaceInfoResponse) GetRepository() *WorkspaceInfoResponse_Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *WorkspaceInfoResponse) GetWorkspaceClusterHost() string {
	if x != nil {
		return x.WorkspaceClusterHost
	}
	return ""
}

func (x *WorkspaceInfoResponse) GetWorkspaceUrl() string {
	if x != nil {
		return x.WorkspaceUrl
	}
	return ""
}

func (x *WorkspaceInfoResponse) GetIdeAlias() string {
	if x != nil {
		return x.IdeAlias
	}
	return ""
}

func (x *WorkspaceInfoResponse) GetIdePort() uint32 {
	if x != nil {
		return x.IdePort
	}
	return 0
}

func (x *WorkspaceInfoResponse) GetWorkspaceClass() *WorkspaceInfoResponse_WorkspaceClass {
	if x != nil {
		return x.WorkspaceClass
	}
	return nil
}

type isWorkspaceInfoResponse_WorkspaceLocation interface {
	isWorkspaceInfoResponse_WorkspaceLocation()
}

type WorkspaceInfoResponse_WorkspaceLocationFile struct {
	// file means the workspace root is a file describing the workspace layout.
	WorkspaceLocationFile string `protobuf:"bytes,4,opt,name=workspace_location_file,json=workspaceLocationFile,proto3,oneof"`
}

type WorkspaceInfoResponse_WorkspaceLocationFolder struct {
	// folder means the workspace root is a simple folder.
	WorkspaceLocationFolder string `protobuf:"bytes,5,opt,name=workspace_location_folder,json=workspaceLocationFolder,proto3,oneof"`
}

func (*WorkspaceInfoResponse_WorkspaceLocationFile) isWorkspaceInfoResponse_WorkspaceLocation() {}

func (*WorkspaceInfoResponse_WorkspaceLocationFolder) isWorkspaceInfoResponse_WorkspaceLocation() {}

type WorkspaceInfoResponse_GitpodAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// endpoint is the websocket URL on which the token-accessible Gitpod API is served on
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// host is the host of the endpoint. Use this host to ask supervisor a token.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *WorkspaceInfoResponse_GitpodAPI) Reset() {
	*x = WorkspaceInfoResponse_GitpodAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceInfoResponse_GitpodAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceInfoResponse_GitpodAPI) ProtoMessage() {}

func (x *WorkspaceInfoResponse_GitpodAPI) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceInfoResponse_GitpodAPI.ProtoReflect.Descriptor instead.
func (*WorkspaceInfoResponse_GitpodAPI) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{1, 0}
}

func (x *WorkspaceInfoResponse_GitpodAPI) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *WorkspaceInfoResponse_GitpodAPI) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type WorkspaceInfoResponse_Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// owner is the repository owner
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// name is the repository name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WorkspaceInfoResponse_Repository) Reset() {
	*x = WorkspaceInfoResponse_Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceInfoResponse_Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceInfoResponse_Repository) ProtoMessage() {}

func (x *WorkspaceInfoResponse_Repository) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceInfoResponse_Repository.ProtoReflect.Descriptor instead.
func (*WorkspaceInfoResponse_Repository) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{1, 1}
}

func (x *WorkspaceInfoResponse_Repository) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *WorkspaceInfoResponse_Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type WorkspaceInfoResponse_WorkspaceClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the id of the workspace class
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// display_name is the display_name of the workspace class
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// description is the description of the workspace class
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *WorkspaceInfoResponse_WorkspaceClass) Reset() {
	*x = WorkspaceInfoResponse_WorkspaceClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceInfoResponse_WorkspaceClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceInfoResponse_WorkspaceClass) ProtoMessage() {}

func (x *WorkspaceInfoResponse_WorkspaceClass) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceInfoResponse_WorkspaceClass.ProtoReflect.Descriptor instead.
func (*WorkspaceInfoResponse_WorkspaceClass) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{1, 2}
}

func (x *WorkspaceInfoResponse_WorkspaceClass) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkspaceInfoResponse_WorkspaceClass) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *WorkspaceInfoResponse_WorkspaceClass) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_info_proto protoreflect.FileDescriptor

var file_info_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x16, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xec,
	0x07, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x0a, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x41, 0x50, 0x49, 0x52,
	0x09, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x41, 0x70, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x4c, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a,
	0x16, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x65, 0x5f,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x59, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0e, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0x3b, 0x0a, 0x09, 0x47,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x41, 0x50, 0x49, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x1a, 0x36, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0x65, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x7f, 0x0a,
	0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x0d,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x46,
	0x0a, 0x18, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2d, 0x69, 0x6f,
	0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_info_proto_rawDescOnce sync.Once
	file_info_proto_rawDescData = file_info_proto_rawDesc
)

func file_info_proto_rawDescGZIP() []byte {
	file_info_proto_rawDescOnce.Do(func() {
		file_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_info_proto_rawDescData)
	})
	return file_info_proto_rawDescData
}

var file_info_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_info_proto_goTypes = []interface{}{
	(*WorkspaceInfoRequest)(nil),                 // 0: supervisor.WorkspaceInfoRequest
	(*WorkspaceInfoResponse)(nil),                // 1: supervisor.WorkspaceInfoResponse
	(*WorkspaceInfoResponse_GitpodAPI)(nil),      // 2: supervisor.WorkspaceInfoResponse.GitpodAPI
	(*WorkspaceInfoResponse_Repository)(nil),     // 3: supervisor.WorkspaceInfoResponse.Repository
	(*WorkspaceInfoResponse_WorkspaceClass)(nil), // 4: supervisor.WorkspaceInfoResponse.WorkspaceClass
}
var file_info_proto_depIdxs = []int32{
	2, // 0: supervisor.WorkspaceInfoResponse.gitpod_api:type_name -> supervisor.WorkspaceInfoResponse.GitpodAPI
	3, // 1: supervisor.WorkspaceInfoResponse.repository:type_name -> supervisor.WorkspaceInfoResponse.Repository
	4, // 2: supervisor.WorkspaceInfoResponse.workspace_class:type_name -> supervisor.WorkspaceInfoResponse.WorkspaceClass
	0, // 3: supervisor.InfoService.WorkspaceInfo:input_type -> supervisor.WorkspaceInfoRequest
	1, // 4: supervisor.InfoService.WorkspaceInfo:output_type -> supervisor.WorkspaceInfoResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_info_proto_init() }
func file_info_proto_init() {
	if File_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceInfoResponse_GitpodAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceInfoResponse_Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceInfoResponse_WorkspaceClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_info_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*WorkspaceInfoResponse_WorkspaceLocationFile)(nil),
		(*WorkspaceInfoResponse_WorkspaceLocationFolder)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_info_proto_goTypes,
		DependencyIndexes: file_info_proto_depIdxs,
		MessageInfos:      file_info_proto_msgTypes,
	}.Build()
	File_info_proto = out.File
	file_info_proto_rawDesc = nil
	file_info_proto_goTypes = nil
	file_info_proto_depIdxs = nil
}
