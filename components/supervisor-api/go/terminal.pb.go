// Copyright (c) 2020 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License-AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.7.1
// source: terminal.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OpenTerminalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env         map[string]string `protobuf:"bytes,2,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations map[string]string `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OpenTerminalRequest) Reset() {
	*x = OpenTerminalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenTerminalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenTerminalRequest) ProtoMessage() {}

func (x *OpenTerminalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_terminal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenTerminalRequest.ProtoReflect.Descriptor instead.
func (*OpenTerminalRequest) Descriptor() ([]byte, []int) {
	return file_terminal_proto_rawDescGZIP(), []int{0}
}

func (x *OpenTerminalRequest) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *OpenTerminalRequest) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type OpenTerminalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// starter_token can be used to change the terminal size if there are
	// multiple listerns, without having to force your way in.
	StarterToken string `protobuf:"bytes,2,opt,name=starter_token,json=starterToken,proto3" json:"starter_token,omitempty"`
}

func (x *OpenTerminalResponse) Reset() {
	*x = OpenTerminalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenTerminalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenTerminalResponse) ProtoMessage() {}

func (x *OpenTerminalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_terminal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenTerminalResponse.ProtoReflect.Descriptor instead.
func (*OpenTerminalResponse) Descriptor() ([]byte, []int) {
	return file_terminal_proto_rawDescGZIP(), []int{1}
}

func (x *OpenTerminalResponse) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *OpenTerminalResponse) GetStarterToken() string {
	if x != nil {
		return x.StarterToken
	}
	return ""
}

type CloseTerminalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *CloseTerminalRequest) Reset() {
	*x = CloseTerminalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseTerminalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTerminalRequest) ProtoMessage() {}

func (x *CloseTerminalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_terminal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTerminalRequest.ProtoReflect.Descriptor instead.
func (*CloseTerminalRequest) Descriptor() ([]byte, []int) {
	return file_terminal_proto_rawDescGZIP(), []int{2}
}

func (x *CloseTerminalRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type CloseTerminalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseTerminalResponse) Reset() {
	*x = CloseTerminalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseTerminalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTerminalResponse) ProtoMessage() {}

func (x *CloseTerminalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_terminal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTerminalResponse.ProtoReflect.Descriptor instead.
func (*CloseTerminalResponse) Descriptor() ([]byte, []int) {
	return file_terminal_proto_rawDescGZIP(), []int{3}
}

type ListTerminalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTerminalsRequest) Reset() {
	*x = ListTerminalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTerminalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTerminalsRequest) ProtoMessage() {}

func (x *ListTerminalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_terminal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTerminalsRequest.ProtoReflect.Descriptor instead.
func (*ListTerminalsRequest) Descriptor() ([]byte, []int) {
	return file_terminal_proto_rawDescGZIP(), []int{4}
}

type ListTerminalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terminals []*ListTerminalsResponse_Terminal `protobuf:"bytes,1,rep,name=terminals,proto3" json:"terminals,omitempty"`
}

func (x *ListTerminalsResponse) Reset() {
	*x = ListTerminalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTerminalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTerminalsResponse) ProtoMessage() {}

func (x *ListTerminalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_terminal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTerminalsResponse.ProtoReflect.Descriptor instead.
func (*ListTerminalsResponse) Descriptor() ([]byte, []int) {
	return file_terminal_proto_rawDescGZIP(), []int{5}
}

func (x *ListTerminalsResponse) GetTerminals() []*ListTerminalsResponse_Terminal {
	if x != nil {
		return x.Terminals
	}
	return nil
}

type ListenTerminalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *ListenTerminalRequest) Reset() {
	*x = ListenTerminalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenTerminalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenTerminalRequest) ProtoMessage() {}

func (x *ListenTerminalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_terminal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenTerminalRequest.ProtoReflect.Descriptor instead.
func (*ListenTerminalRequest) Descriptor() ([]byte, []int) {
	return file_terminal_proto_rawDescGZIP(), []int{6}
}

func (x *ListenTerminalRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type ListenTerminalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Output:
	//	*ListenTerminalResponse_Stdout
	//	*ListenTerminalResponse_Stderr
	Output isListenTerminalResponse_Output `protobuf_oneof:"output"`
}

func (x *ListenTerminalResponse) Reset() {
	*x = ListenTerminalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenTerminalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenTerminalResponse) ProtoMessage() {}

func (x *ListenTerminalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_terminal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenTerminalResponse.ProtoReflect.Descriptor instead.
func (*ListenTerminalResponse) Descriptor() ([]byte, []int) {
	return file_terminal_proto_rawDescGZIP(), []int{7}
}

func (m *ListenTerminalResponse) GetOutput() isListenTerminalResponse_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (x *ListenTerminalResponse) GetStdout() []byte {
	if x, ok := x.GetOutput().(*ListenTerminalResponse_Stdout); ok {
		return x.Stdout
	}
	return nil
}

func (x *ListenTerminalResponse) GetStderr() []byte {
	if x, ok := x.GetOutput().(*ListenTerminalResponse_Stderr); ok {
		return x.Stderr
	}
	return nil
}

type isListenTerminalResponse_Output interface {
	isListenTerminalResponse_Output()
}

type ListenTerminalResponse_Stdout struct {
	Stdout []byte `protobuf:"bytes,1,opt,name=stdout,proto3,oneof"`
}

type ListenTerminalResponse_Stderr struct {
	Stderr []byte `protobuf:"bytes,2,opt,name=stderr,proto3,oneof"`
}

func (*ListenTerminalResponse_Stdout) isListenTerminalResponse_Output() {}

func (*ListenTerminalResponse_Stderr) isListenTerminalResponse_Output() {}

type WriteTerminalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	Stdin []byte `protobuf:"bytes,2,opt,name=stdin,proto3" json:"stdin,omitempty"`
}

func (x *WriteTerminalRequest) Reset() {
	*x = WriteTerminalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteTerminalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteTerminalRequest) ProtoMessage() {}

func (x *WriteTerminalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_terminal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteTerminalRequest.ProtoReflect.Descriptor instead.
func (*WriteTerminalRequest) Descriptor() ([]byte, []int) {
	return file_terminal_proto_rawDescGZIP(), []int{8}
}

func (x *WriteTerminalRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *WriteTerminalRequest) GetStdin() []byte {
	if x != nil {
		return x.Stdin
	}
	return nil
}

type WriteTerminalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesWritten uint32 `protobuf:"varint,1,opt,name=bytes_written,json=bytesWritten,proto3" json:"bytes_written,omitempty"`
}

func (x *WriteTerminalResponse) Reset() {
	*x = WriteTerminalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteTerminalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteTerminalResponse) ProtoMessage() {}

func (x *WriteTerminalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_terminal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteTerminalResponse.ProtoReflect.Descriptor instead.
func (*WriteTerminalResponse) Descriptor() ([]byte, []int) {
	return file_terminal_proto_rawDescGZIP(), []int{9}
}

func (x *WriteTerminalResponse) GetBytesWritten() uint32 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

type SetTerminalSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// token is the starter_token that Open() returned.
	// Without token it's possible that the request is ignored.
	// If you want to force your size, indendently of all other listener,
	// use force.
	//
	// Types that are assignable to Priority:
	//	*SetTerminalSizeRequest_Token
	//	*SetTerminalSizeRequest_Force
	Priority isSetTerminalSizeRequest_Priority `protobuf_oneof:"priority"`
	Rows     uint32                            `protobuf:"varint,4,opt,name=rows,proto3" json:"rows,omitempty"`
	Cols     uint32                            `protobuf:"varint,5,opt,name=cols,proto3" json:"cols,omitempty"`
	WidthPx  uint32                            `protobuf:"varint,6,opt,name=widthPx,proto3" json:"widthPx,omitempty"`
	HeightPx uint32                            `protobuf:"varint,7,opt,name=heightPx,proto3" json:"heightPx,omitempty"`
}

func (x *SetTerminalSizeRequest) Reset() {
	*x = SetTerminalSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTerminalSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTerminalSizeRequest) ProtoMessage() {}

func (x *SetTerminalSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_terminal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTerminalSizeRequest.ProtoReflect.Descriptor instead.
func (*SetTerminalSizeRequest) Descriptor() ([]byte, []int) {
	return file_terminal_proto_rawDescGZIP(), []int{10}
}

func (x *SetTerminalSizeRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (m *SetTerminalSizeRequest) GetPriority() isSetTerminalSizeRequest_Priority {
	if m != nil {
		return m.Priority
	}
	return nil
}

func (x *SetTerminalSizeRequest) GetToken() string {
	if x, ok := x.GetPriority().(*SetTerminalSizeRequest_Token); ok {
		return x.Token
	}
	return ""
}

func (x *SetTerminalSizeRequest) GetForce() bool {
	if x, ok := x.GetPriority().(*SetTerminalSizeRequest_Force); ok {
		return x.Force
	}
	return false
}

func (x *SetTerminalSizeRequest) GetRows() uint32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *SetTerminalSizeRequest) GetCols() uint32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

func (x *SetTerminalSizeRequest) GetWidthPx() uint32 {
	if x != nil {
		return x.WidthPx
	}
	return 0
}

func (x *SetTerminalSizeRequest) GetHeightPx() uint32 {
	if x != nil {
		return x.HeightPx
	}
	return 0
}

type isSetTerminalSizeRequest_Priority interface {
	isSetTerminalSizeRequest_Priority()
}

type SetTerminalSizeRequest_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}

type SetTerminalSizeRequest_Force struct {
	Force bool `protobuf:"varint,3,opt,name=force,proto3,oneof"`
}

func (*SetTerminalSizeRequest_Token) isSetTerminalSizeRequest_Priority() {}

func (*SetTerminalSizeRequest_Force) isSetTerminalSizeRequest_Priority() {}

type SetTerminalSizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTerminalSizeResponse) Reset() {
	*x = SetTerminalSizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTerminalSizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTerminalSizeResponse) ProtoMessage() {}

func (x *SetTerminalSizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_terminal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTerminalSizeResponse.ProtoReflect.Descriptor instead.
func (*SetTerminalSizeResponse) Descriptor() ([]byte, []int) {
	return file_terminal_proto_rawDescGZIP(), []int{11}
}

type ListTerminalsResponse_Terminal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias       string            `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	Command     []string          `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty"`
	Title       string            `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Pid         int64             `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	Annotations map[string]string `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListTerminalsResponse_Terminal) Reset() {
	*x = ListTerminalsResponse_Terminal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminal_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTerminalsResponse_Terminal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTerminalsResponse_Terminal) ProtoMessage() {}

func (x *ListTerminalsResponse_Terminal) ProtoReflect() protoreflect.Message {
	mi := &file_terminal_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTerminalsResponse_Terminal.ProtoReflect.Descriptor instead.
func (*ListTerminalsResponse_Terminal) Descriptor() ([]byte, []int) {
	return file_terminal_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ListTerminalsResponse_Terminal) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *ListTerminalsResponse_Terminal) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *ListTerminalsResponse_Terminal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ListTerminalsResponse_Terminal) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ListTerminalsResponse_Terminal) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

var File_terminal_proto protoreflect.FileDescriptor

var file_terminal_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x02, 0x0a, 0x13, 0x4f,
	0x70, 0x65, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x52,
	0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x22, 0x51, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x2c, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xe5, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x09,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x09, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x1a, 0x81, 0x02, 0x0a, 0x08, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x56, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a,
	0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x42, 0x0a, 0x14, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x73, 0x74, 0x64, 0x69, 0x6e, 0x22, 0x3c, 0x0a, 0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74,
	0x74, 0x65, 0x6e, 0x22, 0xc8, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x50, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x78, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x19,
	0x0a, 0x17, 0x53, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xf8, 0x04, 0x0a, 0x0f, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a,
	0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1f, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x05, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x2f, 0x7b, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x7d, 0x12, 0x66, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x21,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x2f, 0x7b, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x7d, 0x30, 0x01, 0x12, 0x70, 0x0a, 0x05,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x2f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x2f, 0x7b, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x7d, 0x12, 0x54,
	0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_terminal_proto_rawDescOnce sync.Once
	file_terminal_proto_rawDescData = file_terminal_proto_rawDesc
)

func file_terminal_proto_rawDescGZIP() []byte {
	file_terminal_proto_rawDescOnce.Do(func() {
		file_terminal_proto_rawDescData = protoimpl.X.CompressGZIP(file_terminal_proto_rawDescData)
	})
	return file_terminal_proto_rawDescData
}

var file_terminal_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_terminal_proto_goTypes = []interface{}{
	(*OpenTerminalRequest)(nil),            // 0: supervisor.OpenTerminalRequest
	(*OpenTerminalResponse)(nil),           // 1: supervisor.OpenTerminalResponse
	(*CloseTerminalRequest)(nil),           // 2: supervisor.CloseTerminalRequest
	(*CloseTerminalResponse)(nil),          // 3: supervisor.CloseTerminalResponse
	(*ListTerminalsRequest)(nil),           // 4: supervisor.ListTerminalsRequest
	(*ListTerminalsResponse)(nil),          // 5: supervisor.ListTerminalsResponse
	(*ListenTerminalRequest)(nil),          // 6: supervisor.ListenTerminalRequest
	(*ListenTerminalResponse)(nil),         // 7: supervisor.ListenTerminalResponse
	(*WriteTerminalRequest)(nil),           // 8: supervisor.WriteTerminalRequest
	(*WriteTerminalResponse)(nil),          // 9: supervisor.WriteTerminalResponse
	(*SetTerminalSizeRequest)(nil),         // 10: supervisor.SetTerminalSizeRequest
	(*SetTerminalSizeResponse)(nil),        // 11: supervisor.SetTerminalSizeResponse
	nil,                                    // 12: supervisor.OpenTerminalRequest.EnvEntry
	nil,                                    // 13: supervisor.OpenTerminalRequest.AnnotationsEntry
	(*ListTerminalsResponse_Terminal)(nil), // 14: supervisor.ListTerminalsResponse.Terminal
	nil,                                    // 15: supervisor.ListTerminalsResponse.Terminal.AnnotationsEntry
}
var file_terminal_proto_depIdxs = []int32{
	12, // 0: supervisor.OpenTerminalRequest.env:type_name -> supervisor.OpenTerminalRequest.EnvEntry
	13, // 1: supervisor.OpenTerminalRequest.annotations:type_name -> supervisor.OpenTerminalRequest.AnnotationsEntry
	14, // 2: supervisor.ListTerminalsResponse.terminals:type_name -> supervisor.ListTerminalsResponse.Terminal
	15, // 3: supervisor.ListTerminalsResponse.Terminal.annotations:type_name -> supervisor.ListTerminalsResponse.Terminal.AnnotationsEntry
	0,  // 4: supervisor.TerminalService.Open:input_type -> supervisor.OpenTerminalRequest
	2,  // 5: supervisor.TerminalService.Close:input_type -> supervisor.CloseTerminalRequest
	4,  // 6: supervisor.TerminalService.List:input_type -> supervisor.ListTerminalsRequest
	6,  // 7: supervisor.TerminalService.Listen:input_type -> supervisor.ListenTerminalRequest
	8,  // 8: supervisor.TerminalService.Write:input_type -> supervisor.WriteTerminalRequest
	10, // 9: supervisor.TerminalService.SetSize:input_type -> supervisor.SetTerminalSizeRequest
	1,  // 10: supervisor.TerminalService.Open:output_type -> supervisor.OpenTerminalResponse
	3,  // 11: supervisor.TerminalService.Close:output_type -> supervisor.CloseTerminalResponse
	5,  // 12: supervisor.TerminalService.List:output_type -> supervisor.ListTerminalsResponse
	7,  // 13: supervisor.TerminalService.Listen:output_type -> supervisor.ListenTerminalResponse
	9,  // 14: supervisor.TerminalService.Write:output_type -> supervisor.WriteTerminalResponse
	11, // 15: supervisor.TerminalService.SetSize:output_type -> supervisor.SetTerminalSizeResponse
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_terminal_proto_init() }
func file_terminal_proto_init() {
	if File_terminal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_terminal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenTerminalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenTerminalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseTerminalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseTerminalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTerminalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTerminalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenTerminalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenTerminalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteTerminalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteTerminalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTerminalSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTerminalSizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminal_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTerminalsResponse_Terminal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_terminal_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ListenTerminalResponse_Stdout)(nil),
		(*ListenTerminalResponse_Stderr)(nil),
	}
	file_terminal_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SetTerminalSizeRequest_Token)(nil),
		(*SetTerminalSizeRequest_Force)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_terminal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_terminal_proto_goTypes,
		DependencyIndexes: file_terminal_proto_depIdxs,
		MessageInfos:      file_terminal_proto_msgTypes,
	}.Build()
	File_terminal_proto = out.File
	file_terminal_proto_rawDesc = nil
	file_terminal_proto_goTypes = nil
	file_terminal_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TerminalServiceClient is the client API for TerminalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TerminalServiceClient interface {
	// Open opens a new terminal running the login shell
	Open(ctx context.Context, in *OpenTerminalRequest, opts ...grpc.CallOption) (*OpenTerminalResponse, error)
	// Close closes a terminal for the given alias, SIGKILL'ing all child processes
	// before closing the pseudo-terminal.
	Close(ctx context.Context, in *CloseTerminalRequest, opts ...grpc.CallOption) (*CloseTerminalResponse, error)
	// List lists all open terminals
	List(ctx context.Context, in *ListTerminalsRequest, opts ...grpc.CallOption) (*ListTerminalsResponse, error)
	// Listen listens to a terminal
	Listen(ctx context.Context, in *ListenTerminalRequest, opts ...grpc.CallOption) (TerminalService_ListenClient, error)
	// Write writes to a terminal
	Write(ctx context.Context, in *WriteTerminalRequest, opts ...grpc.CallOption) (*WriteTerminalResponse, error)
	// SetSize sets the terminal's size
	SetSize(ctx context.Context, in *SetTerminalSizeRequest, opts ...grpc.CallOption) (*SetTerminalSizeResponse, error)
}

type terminalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTerminalServiceClient(cc grpc.ClientConnInterface) TerminalServiceClient {
	return &terminalServiceClient{cc}
}

func (c *terminalServiceClient) Open(ctx context.Context, in *OpenTerminalRequest, opts ...grpc.CallOption) (*OpenTerminalResponse, error) {
	out := new(OpenTerminalResponse)
	err := c.cc.Invoke(ctx, "/supervisor.TerminalService/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) Close(ctx context.Context, in *CloseTerminalRequest, opts ...grpc.CallOption) (*CloseTerminalResponse, error) {
	out := new(CloseTerminalResponse)
	err := c.cc.Invoke(ctx, "/supervisor.TerminalService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) List(ctx context.Context, in *ListTerminalsRequest, opts ...grpc.CallOption) (*ListTerminalsResponse, error) {
	out := new(ListTerminalsResponse)
	err := c.cc.Invoke(ctx, "/supervisor.TerminalService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) Listen(ctx context.Context, in *ListenTerminalRequest, opts ...grpc.CallOption) (TerminalService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TerminalService_serviceDesc.Streams[0], "/supervisor.TerminalService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &terminalServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TerminalService_ListenClient interface {
	Recv() (*ListenTerminalResponse, error)
	grpc.ClientStream
}

type terminalServiceListenClient struct {
	grpc.ClientStream
}

func (x *terminalServiceListenClient) Recv() (*ListenTerminalResponse, error) {
	m := new(ListenTerminalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *terminalServiceClient) Write(ctx context.Context, in *WriteTerminalRequest, opts ...grpc.CallOption) (*WriteTerminalResponse, error) {
	out := new(WriteTerminalResponse)
	err := c.cc.Invoke(ctx, "/supervisor.TerminalService/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) SetSize(ctx context.Context, in *SetTerminalSizeRequest, opts ...grpc.CallOption) (*SetTerminalSizeResponse, error) {
	out := new(SetTerminalSizeResponse)
	err := c.cc.Invoke(ctx, "/supervisor.TerminalService/SetSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerminalServiceServer is the server API for TerminalService service.
type TerminalServiceServer interface {
	// Open opens a new terminal running the login shell
	Open(context.Context, *OpenTerminalRequest) (*OpenTerminalResponse, error)
	// Close closes a terminal for the given alias, SIGKILL'ing all child processes
	// before closing the pseudo-terminal.
	Close(context.Context, *CloseTerminalRequest) (*CloseTerminalResponse, error)
	// List lists all open terminals
	List(context.Context, *ListTerminalsRequest) (*ListTerminalsResponse, error)
	// Listen listens to a terminal
	Listen(*ListenTerminalRequest, TerminalService_ListenServer) error
	// Write writes to a terminal
	Write(context.Context, *WriteTerminalRequest) (*WriteTerminalResponse, error)
	// SetSize sets the terminal's size
	SetSize(context.Context, *SetTerminalSizeRequest) (*SetTerminalSizeResponse, error)
}

// UnimplementedTerminalServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTerminalServiceServer struct {
}

func (*UnimplementedTerminalServiceServer) Open(context.Context, *OpenTerminalRequest) (*OpenTerminalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedTerminalServiceServer) Close(context.Context, *CloseTerminalRequest) (*CloseTerminalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedTerminalServiceServer) List(context.Context, *ListTerminalsRequest) (*ListTerminalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedTerminalServiceServer) Listen(*ListenTerminalRequest, TerminalService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (*UnimplementedTerminalServiceServer) Write(context.Context, *WriteTerminalRequest) (*WriteTerminalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (*UnimplementedTerminalServiceServer) SetSize(context.Context, *SetTerminalSizeRequest) (*SetTerminalSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSize not implemented")
}

func RegisterTerminalServiceServer(s *grpc.Server, srv TerminalServiceServer) {
	s.RegisterService(&_TerminalService_serviceDesc, srv)
}

func _TerminalService_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenTerminalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.TerminalService/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).Open(ctx, req.(*OpenTerminalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTerminalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.TerminalService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).Close(ctx, req.(*CloseTerminalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTerminalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.TerminalService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).List(ctx, req.(*ListTerminalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenTerminalRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TerminalServiceServer).Listen(m, &terminalServiceListenServer{stream})
}

type TerminalService_ListenServer interface {
	Send(*ListenTerminalResponse) error
	grpc.ServerStream
}

type terminalServiceListenServer struct {
	grpc.ServerStream
}

func (x *terminalServiceListenServer) Send(m *ListenTerminalResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TerminalService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteTerminalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.TerminalService/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).Write(ctx, req.(*WriteTerminalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_SetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTerminalSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).SetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.TerminalService/SetSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).SetSize(ctx, req.(*SetTerminalSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TerminalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "supervisor.TerminalService",
	HandlerType: (*TerminalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _TerminalService_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _TerminalService_Close_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TerminalService_List_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _TerminalService_Write_Handler,
		},
		{
			MethodName: "SetSize",
			Handler:    _TerminalService_SetSize_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _TerminalService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "terminal.proto",
}
