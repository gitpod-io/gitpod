// Copyright (c) 2023 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by MockGen. DO NOT EDIT.
// Source: workspace_operations.go

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	reflect "reflect"

	api "github.com/gitpod-io/gitpod/content-service/api"
	gomock "github.com/golang/mock/gomock"
)

// MockWorkspaceOperations is a mock of WorkspaceOperations interface.
type MockWorkspaceOperations struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceOperationsMockRecorder
}

// MockWorkspaceOperationsMockRecorder is the mock recorder for MockWorkspaceOperations.
type MockWorkspaceOperationsMockRecorder struct {
	mock *MockWorkspaceOperations
}

// NewMockWorkspaceOperations creates a new mock instance.
func NewMockWorkspaceOperations(ctrl *gomock.Controller) *MockWorkspaceOperations {
	mock := &MockWorkspaceOperations{ctrl: ctrl}
	mock.recorder = &MockWorkspaceOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceOperations) EXPECT() *MockWorkspaceOperationsMockRecorder {
	return m.recorder
}

// BackupWorkspace mocks base method.
func (m *MockWorkspaceOperations) BackupWorkspace(ctx context.Context, opts BackupOptions) (*api.GitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupWorkspace", ctx, opts)
	ret0, _ := ret[0].(*api.GitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupWorkspace indicates an expected call of BackupWorkspace.
func (mr *MockWorkspaceOperationsMockRecorder) BackupWorkspace(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupWorkspace", reflect.TypeOf((*MockWorkspaceOperations)(nil).BackupWorkspace), ctx, opts)
}

// DeleteWorkspace mocks base method.
func (m *MockWorkspaceOperations) DeleteWorkspace(ctx context.Context, instanceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspace", ctx, instanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkspace indicates an expected call of DeleteWorkspace.
func (mr *MockWorkspaceOperationsMockRecorder) DeleteWorkspace(ctx, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspace", reflect.TypeOf((*MockWorkspaceOperations)(nil).DeleteWorkspace), ctx, instanceID)
}

// InitWorkspace mocks base method.
func (m *MockWorkspaceOperations) InitWorkspace(ctx context.Context, options InitOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitWorkspace", ctx, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitWorkspace indicates an expected call of InitWorkspace.
func (mr *MockWorkspaceOperationsMockRecorder) InitWorkspace(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitWorkspace", reflect.TypeOf((*MockWorkspaceOperations)(nil).InitWorkspace), ctx, options)
}

// Snapshot mocks base method.
func (m *MockWorkspaceOperations) Snapshot(ctx context.Context, instanceID, snapshotName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", ctx, instanceID, snapshotName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockWorkspaceOperationsMockRecorder) Snapshot(ctx, instanceID, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockWorkspaceOperations)(nil).Snapshot), ctx, instanceID, snapshotName)
}

// SnapshotIDs mocks base method.
func (m *MockWorkspaceOperations) SnapshotIDs(ctx context.Context, instanceID string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotIDs", ctx, instanceID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SnapshotIDs indicates an expected call of SnapshotIDs.
func (mr *MockWorkspaceOperationsMockRecorder) SnapshotIDs(ctx, instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotIDs", reflect.TypeOf((*MockWorkspaceOperations)(nil).SnapshotIDs), ctx, instanceID)
}
