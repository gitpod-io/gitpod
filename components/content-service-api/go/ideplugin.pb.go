// Copyright (c) 2021 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License-AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ideplugin.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PluginUploadURLRequest struct {
	Bucket               string   `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PluginUploadURLRequest) Reset()         { *m = PluginUploadURLRequest{} }
func (m *PluginUploadURLRequest) String() string { return proto.CompactTextString(m) }
func (*PluginUploadURLRequest) ProtoMessage()    {}
func (*PluginUploadURLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c57958860b26e64e, []int{0}
}

func (m *PluginUploadURLRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginUploadURLRequest.Unmarshal(m, b)
}
func (m *PluginUploadURLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginUploadURLRequest.Marshal(b, m, deterministic)
}
func (m *PluginUploadURLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginUploadURLRequest.Merge(m, src)
}
func (m *PluginUploadURLRequest) XXX_Size() int {
	return xxx_messageInfo_PluginUploadURLRequest.Size(m)
}
func (m *PluginUploadURLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginUploadURLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PluginUploadURLRequest proto.InternalMessageInfo

func (m *PluginUploadURLRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *PluginUploadURLRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PluginUploadURLResponse struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PluginUploadURLResponse) Reset()         { *m = PluginUploadURLResponse{} }
func (m *PluginUploadURLResponse) String() string { return proto.CompactTextString(m) }
func (*PluginUploadURLResponse) ProtoMessage()    {}
func (*PluginUploadURLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c57958860b26e64e, []int{1}
}

func (m *PluginUploadURLResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginUploadURLResponse.Unmarshal(m, b)
}
func (m *PluginUploadURLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginUploadURLResponse.Marshal(b, m, deterministic)
}
func (m *PluginUploadURLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginUploadURLResponse.Merge(m, src)
}
func (m *PluginUploadURLResponse) XXX_Size() int {
	return xxx_messageInfo_PluginUploadURLResponse.Size(m)
}
func (m *PluginUploadURLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginUploadURLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PluginUploadURLResponse proto.InternalMessageInfo

func (m *PluginUploadURLResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type PluginDownloadURLRequest struct {
	Bucket               string   `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PluginDownloadURLRequest) Reset()         { *m = PluginDownloadURLRequest{} }
func (m *PluginDownloadURLRequest) String() string { return proto.CompactTextString(m) }
func (*PluginDownloadURLRequest) ProtoMessage()    {}
func (*PluginDownloadURLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c57958860b26e64e, []int{2}
}

func (m *PluginDownloadURLRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginDownloadURLRequest.Unmarshal(m, b)
}
func (m *PluginDownloadURLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginDownloadURLRequest.Marshal(b, m, deterministic)
}
func (m *PluginDownloadURLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginDownloadURLRequest.Merge(m, src)
}
func (m *PluginDownloadURLRequest) XXX_Size() int {
	return xxx_messageInfo_PluginDownloadURLRequest.Size(m)
}
func (m *PluginDownloadURLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginDownloadURLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PluginDownloadURLRequest proto.InternalMessageInfo

func (m *PluginDownloadURLRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *PluginDownloadURLRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PluginDownloadURLResponse struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PluginDownloadURLResponse) Reset()         { *m = PluginDownloadURLResponse{} }
func (m *PluginDownloadURLResponse) String() string { return proto.CompactTextString(m) }
func (*PluginDownloadURLResponse) ProtoMessage()    {}
func (*PluginDownloadURLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c57958860b26e64e, []int{3}
}

func (m *PluginDownloadURLResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginDownloadURLResponse.Unmarshal(m, b)
}
func (m *PluginDownloadURLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginDownloadURLResponse.Marshal(b, m, deterministic)
}
func (m *PluginDownloadURLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginDownloadURLResponse.Merge(m, src)
}
func (m *PluginDownloadURLResponse) XXX_Size() int {
	return xxx_messageInfo_PluginDownloadURLResponse.Size(m)
}
func (m *PluginDownloadURLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginDownloadURLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PluginDownloadURLResponse proto.InternalMessageInfo

func (m *PluginDownloadURLResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type PluginHashRequest struct {
	Bucket               string   `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PluginHashRequest) Reset()         { *m = PluginHashRequest{} }
func (m *PluginHashRequest) String() string { return proto.CompactTextString(m) }
func (*PluginHashRequest) ProtoMessage()    {}
func (*PluginHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c57958860b26e64e, []int{4}
}

func (m *PluginHashRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginHashRequest.Unmarshal(m, b)
}
func (m *PluginHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginHashRequest.Marshal(b, m, deterministic)
}
func (m *PluginHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginHashRequest.Merge(m, src)
}
func (m *PluginHashRequest) XXX_Size() int {
	return xxx_messageInfo_PluginHashRequest.Size(m)
}
func (m *PluginHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PluginHashRequest proto.InternalMessageInfo

func (m *PluginHashRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *PluginHashRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PluginHashResponse struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PluginHashResponse) Reset()         { *m = PluginHashResponse{} }
func (m *PluginHashResponse) String() string { return proto.CompactTextString(m) }
func (*PluginHashResponse) ProtoMessage()    {}
func (*PluginHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c57958860b26e64e, []int{5}
}

func (m *PluginHashResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginHashResponse.Unmarshal(m, b)
}
func (m *PluginHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginHashResponse.Marshal(b, m, deterministic)
}
func (m *PluginHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginHashResponse.Merge(m, src)
}
func (m *PluginHashResponse) XXX_Size() int {
	return xxx_messageInfo_PluginHashResponse.Size(m)
}
func (m *PluginHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PluginHashResponse proto.InternalMessageInfo

func (m *PluginHashResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*PluginUploadURLRequest)(nil), "ideplugin.PluginUploadURLRequest")
	proto.RegisterType((*PluginUploadURLResponse)(nil), "ideplugin.PluginUploadURLResponse")
	proto.RegisterType((*PluginDownloadURLRequest)(nil), "ideplugin.PluginDownloadURLRequest")
	proto.RegisterType((*PluginDownloadURLResponse)(nil), "ideplugin.PluginDownloadURLResponse")
	proto.RegisterType((*PluginHashRequest)(nil), "ideplugin.PluginHashRequest")
	proto.RegisterType((*PluginHashResponse)(nil), "ideplugin.PluginHashResponse")
}

func init() {
	proto.RegisterFile("ideplugin.proto", fileDescriptor_c57958860b26e64e)
}

var fileDescriptor_c57958860b26e64e = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0xfd, 0xda, 0xaf, 0x14, 0x72, 0x5d, 0x58, 0xef, 0xa2, 0xc6, 0xa0, 0xa0, 0xd1, 0x45, 0x41,
	0x92, 0xa0, 0x3e, 0x80, 0x20, 0x51, 0x14, 0x5d, 0x48, 0xb4, 0x9b, 0xee, 0xf2, 0x33, 0x34, 0x83,
	0xe9, 0xcc, 0x98, 0x99, 0xe8, 0x73, 0xf8, 0xc6, 0xd2, 0xcc, 0x98, 0x06, 0xd2, 0x76, 0xa1, 0xbb,
	0x33, 0x77, 0xce, 0x0f, 0xf7, 0xcc, 0xc0, 0x2e, 0xcd, 0x88, 0x28, 0xaa, 0x39, 0x65, 0xbe, 0x28,
	0xb9, 0xe2, 0x68, 0x35, 0x03, 0x37, 0x84, 0xf1, 0x73, 0x8d, 0xa6, 0xa2, 0xe0, 0x71, 0x36, 0x8d,
	0x9e, 0x22, 0xf2, 0x5e, 0x11, 0xa9, 0x70, 0x0c, 0xc3, 0xa4, 0x4a, 0xdf, 0x88, 0xb2, 0x7b, 0xc7,
	0xbd, 0x89, 0x15, 0x99, 0x13, 0x22, 0x0c, 0x58, 0xbc, 0x20, 0x76, 0xbf, 0x9e, 0xd6, 0xd8, 0x3d,
	0x87, 0xfd, 0x8e, 0x8b, 0x14, 0x9c, 0x49, 0x82, 0x23, 0xf8, 0x5f, 0x95, 0x85, 0xf1, 0x58, 0x42,
	0xf7, 0x0e, 0x6c, 0x4d, 0x0e, 0xf9, 0x27, 0xfb, 0x43, 0xa8, 0x07, 0x07, 0x6b, 0x7c, 0x36, 0xc6,
	0x5e, 0xc3, 0x9e, 0xa6, 0xdf, 0xc7, 0x32, 0xff, 0x4d, 0xde, 0x04, 0xb0, 0x6d, 0x60, 0x82, 0x10,
	0x06, 0x79, 0x2c, 0x73, 0xa3, 0xaf, 0xf1, 0xe5, 0x57, 0x1f, 0x46, 0x0f, 0xe1, 0xad, 0x66, 0xbf,
	0x90, 0xf2, 0x83, 0xa6, 0x04, 0x5f, 0xc1, 0x6a, 0xda, 0xc1, 0x13, 0x7f, 0xf5, 0x26, 0xeb, 0xfb,
	0x77, 0xdc, 0x6d, 0x14, 0x1d, 0xee, 0xfe, 0xc3, 0x19, 0xec, 0xb4, 0xd6, 0xc7, 0xd3, 0x8e, 0xa8,
	0x5b, 0xb2, 0x73, 0xb6, 0x9d, 0xd4, 0x78, 0x3f, 0x02, 0xac, 0x16, 0xc6, 0xc3, 0x8e, 0xaa, 0x55,
	0xa4, 0x73, 0xb4, 0xe1, 0xf6, 0xc7, 0xec, 0xe6, 0x62, 0x16, 0xcc, 0xa9, 0xca, 0xab, 0xc4, 0x4f,
	0xf9, 0x62, 0x09, 0x05, 0xcf, 0x3c, 0xca, 0x0d, 0x0a, 0x52, 0xce, 0x14, 0x61, 0xca, 0x93, 0xba,
	0xad, 0x20, 0x16, 0x34, 0x19, 0xd6, 0xbf, 0xf5, 0xea, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xcc,
	0x9b, 0x2e, 0xc0, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IDEPluginServiceClient is the client API for IDEPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IDEPluginServiceClient interface {
	// UploadURL provides a URL to which clients can upload the content via HTTP PUT.
	UploadURL(ctx context.Context, in *PluginUploadURLRequest, opts ...grpc.CallOption) (*PluginUploadURLResponse, error)
	// DownloadURL provides a URL from which clients can download the content via HTTP GET.
	DownloadURL(ctx context.Context, in *PluginDownloadURLRequest, opts ...grpc.CallOption) (*PluginDownloadURLResponse, error)
	// PluginHash provides a hash of the plugin
	PluginHash(ctx context.Context, in *PluginHashRequest, opts ...grpc.CallOption) (*PluginHashResponse, error)
}

type iDEPluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIDEPluginServiceClient(cc grpc.ClientConnInterface) IDEPluginServiceClient {
	return &iDEPluginServiceClient{cc}
}

func (c *iDEPluginServiceClient) UploadURL(ctx context.Context, in *PluginUploadURLRequest, opts ...grpc.CallOption) (*PluginUploadURLResponse, error) {
	out := new(PluginUploadURLResponse)
	err := c.cc.Invoke(ctx, "/ideplugin.IDEPluginService/UploadURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDEPluginServiceClient) DownloadURL(ctx context.Context, in *PluginDownloadURLRequest, opts ...grpc.CallOption) (*PluginDownloadURLResponse, error) {
	out := new(PluginDownloadURLResponse)
	err := c.cc.Invoke(ctx, "/ideplugin.IDEPluginService/DownloadURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDEPluginServiceClient) PluginHash(ctx context.Context, in *PluginHashRequest, opts ...grpc.CallOption) (*PluginHashResponse, error) {
	out := new(PluginHashResponse)
	err := c.cc.Invoke(ctx, "/ideplugin.IDEPluginService/PluginHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDEPluginServiceServer is the server API for IDEPluginService service.
type IDEPluginServiceServer interface {
	// UploadURL provides a URL to which clients can upload the content via HTTP PUT.
	UploadURL(context.Context, *PluginUploadURLRequest) (*PluginUploadURLResponse, error)
	// DownloadURL provides a URL from which clients can download the content via HTTP GET.
	DownloadURL(context.Context, *PluginDownloadURLRequest) (*PluginDownloadURLResponse, error)
	// PluginHash provides a hash of the plugin
	PluginHash(context.Context, *PluginHashRequest) (*PluginHashResponse, error)
}

// UnimplementedIDEPluginServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIDEPluginServiceServer struct {
}

func (*UnimplementedIDEPluginServiceServer) UploadURL(ctx context.Context, req *PluginUploadURLRequest) (*PluginUploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadURL not implemented")
}
func (*UnimplementedIDEPluginServiceServer) DownloadURL(ctx context.Context, req *PluginDownloadURLRequest) (*PluginDownloadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadURL not implemented")
}
func (*UnimplementedIDEPluginServiceServer) PluginHash(ctx context.Context, req *PluginHashRequest) (*PluginHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginHash not implemented")
}

func RegisterIDEPluginServiceServer(s *grpc.Server, srv IDEPluginServiceServer) {
	s.RegisterService(&_IDEPluginService_serviceDesc, srv)
}

func _IDEPluginService_UploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginUploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDEPluginServiceServer).UploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ideplugin.IDEPluginService/UploadURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDEPluginServiceServer).UploadURL(ctx, req.(*PluginUploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDEPluginService_DownloadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginDownloadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDEPluginServiceServer).DownloadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ideplugin.IDEPluginService/DownloadURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDEPluginServiceServer).DownloadURL(ctx, req.(*PluginDownloadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDEPluginService_PluginHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDEPluginServiceServer).PluginHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ideplugin.IDEPluginService/PluginHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDEPluginServiceServer).PluginHash(ctx, req.(*PluginHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IDEPluginService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ideplugin.IDEPluginService",
	HandlerType: (*IDEPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadURL",
			Handler:    _IDEPluginService_UploadURL_Handler,
		},
		{
			MethodName: "DownloadURL",
			Handler:    _IDEPluginService_DownloadURL_Handler,
		},
		{
			MethodName: "PluginHash",
			Handler:    _IDEPluginService_PluginHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ideplugin.proto",
}
