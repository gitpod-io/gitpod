// Copyright (c) 2022 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License.AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: initializer.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CloneTargetMode is the target state in which we want to leave a GitWorkspace
type CloneTargetMode int32

const (
	// REMOTE_HEAD has the local WS point at the remote branch head
	CloneTargetMode_REMOTE_HEAD CloneTargetMode = 0
	// REMOTE_COMMIT has the local WS point at a specific commit
	CloneTargetMode_REMOTE_COMMIT CloneTargetMode = 1
	// REMOTE_BRANCH has the local WS point at a remote branch
	CloneTargetMode_REMOTE_BRANCH CloneTargetMode = 2
	// LOCAL_BRANCH creates a local branch in the workspace
	CloneTargetMode_LOCAL_BRANCH CloneTargetMode = 3
)

// Enum value maps for CloneTargetMode.
var (
	CloneTargetMode_name = map[int32]string{
		0: "REMOTE_HEAD",
		1: "REMOTE_COMMIT",
		2: "REMOTE_BRANCH",
		3: "LOCAL_BRANCH",
	}
	CloneTargetMode_value = map[string]int32{
		"REMOTE_HEAD":   0,
		"REMOTE_COMMIT": 1,
		"REMOTE_BRANCH": 2,
		"LOCAL_BRANCH":  3,
	}
)

func (x CloneTargetMode) Enum() *CloneTargetMode {
	p := new(CloneTargetMode)
	*p = x
	return p
}

func (x CloneTargetMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloneTargetMode) Descriptor() protoreflect.EnumDescriptor {
	return file_initializer_proto_enumTypes[0].Descriptor()
}

func (CloneTargetMode) Type() protoreflect.EnumType {
	return &file_initializer_proto_enumTypes[0]
}

func (x CloneTargetMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloneTargetMode.Descriptor instead.
func (CloneTargetMode) EnumDescriptor() ([]byte, []int) {
	return file_initializer_proto_rawDescGZIP(), []int{0}
}

// GitAuthMethod is the means of authentication used during clone
type GitAuthMethod int32

const (
	// NO_AUTH disables authentication during clone
	GitAuthMethod_NO_AUTH GitAuthMethod = 0
	// BASIC_AUTH uses HTTP basic auth during clone (fails if repo is not cloned through http)
	GitAuthMethod_BASIC_AUTH GitAuthMethod = 1
	// BASIC_AUTH_OTS uses HTTP basic auth during the clone with the secrets coming from the OTS URL.
	// Fails if either the OTS download or the clone fail.
	GitAuthMethod_BASIC_AUTH_OTS GitAuthMethod = 2
)

// Enum value maps for GitAuthMethod.
var (
	GitAuthMethod_name = map[int32]string{
		0: "NO_AUTH",
		1: "BASIC_AUTH",
		2: "BASIC_AUTH_OTS",
	}
	GitAuthMethod_value = map[string]int32{
		"NO_AUTH":        0,
		"BASIC_AUTH":     1,
		"BASIC_AUTH_OTS": 2,
	}
)

func (x GitAuthMethod) Enum() *GitAuthMethod {
	p := new(GitAuthMethod)
	*p = x
	return p
}

func (x GitAuthMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitAuthMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_initializer_proto_enumTypes[1].Descriptor()
}

func (GitAuthMethod) Type() protoreflect.EnumType {
	return &file_initializer_proto_enumTypes[1]
}

func (x GitAuthMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitAuthMethod.Descriptor instead.
func (GitAuthMethod) EnumDescriptor() ([]byte, []int) {
	return file_initializer_proto_rawDescGZIP(), []int{1}
}

// WorkspaceInitializer specifies how a workspace is to be initialized
type WorkspaceInitializer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Spec:
	//
	//	*WorkspaceInitializer_Empty
	//	*WorkspaceInitializer_Git
	//	*WorkspaceInitializer_Snapshot
	//	*WorkspaceInitializer_Prebuild
	//	*WorkspaceInitializer_Composite
	//	*WorkspaceInitializer_Download
	//	*WorkspaceInitializer_Backup
	Spec isWorkspaceInitializer_Spec `protobuf_oneof:"spec"`
}

func (x *WorkspaceInitializer) Reset() {
	*x = WorkspaceInitializer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_initializer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceInitializer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceInitializer) ProtoMessage() {}

func (x *WorkspaceInitializer) ProtoReflect() protoreflect.Message {
	mi := &file_initializer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceInitializer.ProtoReflect.Descriptor instead.
func (*WorkspaceInitializer) Descriptor() ([]byte, []int) {
	return file_initializer_proto_rawDescGZIP(), []int{0}
}

func (m *WorkspaceInitializer) GetSpec() isWorkspaceInitializer_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *WorkspaceInitializer) GetEmpty() *EmptyInitializer {
	if x, ok := x.GetSpec().(*WorkspaceInitializer_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *WorkspaceInitializer) GetGit() *GitInitializer {
	if x, ok := x.GetSpec().(*WorkspaceInitializer_Git); ok {
		return x.Git
	}
	return nil
}

func (x *WorkspaceInitializer) GetSnapshot() *SnapshotInitializer {
	if x, ok := x.GetSpec().(*WorkspaceInitializer_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (x *WorkspaceInitializer) GetPrebuild() *PrebuildInitializer {
	if x, ok := x.GetSpec().(*WorkspaceInitializer_Prebuild); ok {
		return x.Prebuild
	}
	return nil
}

func (x *WorkspaceInitializer) GetComposite() *CompositeInitializer {
	if x, ok := x.GetSpec().(*WorkspaceInitializer_Composite); ok {
		return x.Composite
	}
	return nil
}

func (x *WorkspaceInitializer) GetDownload() *FileDownloadInitializer {
	if x, ok := x.GetSpec().(*WorkspaceInitializer_Download); ok {
		return x.Download
	}
	return nil
}

func (x *WorkspaceInitializer) GetBackup() *FromBackupInitializer {
	if x, ok := x.GetSpec().(*WorkspaceInitializer_Backup); ok {
		return x.Backup
	}
	return nil
}

type isWorkspaceInitializer_Spec interface {
	isWorkspaceInitializer_Spec()
}

type WorkspaceInitializer_Empty struct {
	Empty *EmptyInitializer `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type WorkspaceInitializer_Git struct {
	Git *GitInitializer `protobuf:"bytes,2,opt,name=git,proto3,oneof"`
}

type WorkspaceInitializer_Snapshot struct {
	Snapshot *SnapshotInitializer `protobuf:"bytes,3,opt,name=snapshot,proto3,oneof"`
}

type WorkspaceInitializer_Prebuild struct {
	Prebuild *PrebuildInitializer `protobuf:"bytes,4,opt,name=prebuild,proto3,oneof"`
}

type WorkspaceInitializer_Composite struct {
	Composite *CompositeInitializer `protobuf:"bytes,5,opt,name=composite,proto3,oneof"`
}

type WorkspaceInitializer_Download struct {
	Download *FileDownloadInitializer `protobuf:"bytes,6,opt,name=download,proto3,oneof"`
}

type WorkspaceInitializer_Backup struct {
	Backup *FromBackupInitializer `protobuf:"bytes,7,opt,name=backup,proto3,oneof"`
}

func (*WorkspaceInitializer_Empty) isWorkspaceInitializer_Spec() {}

func (*WorkspaceInitializer_Git) isWorkspaceInitializer_Spec() {}

func (*WorkspaceInitializer_Snapshot) isWorkspaceInitializer_Spec() {}

func (*WorkspaceInitializer_Prebuild) isWorkspaceInitializer_Spec() {}

func (*WorkspaceInitializer_Composite) isWorkspaceInitializer_Spec() {}

func (*WorkspaceInitializer_Download) isWorkspaceInitializer_Spec() {}

func (*WorkspaceInitializer_Backup) isWorkspaceInitializer_Spec() {}

// CompositeInitializer uses a collection of initializer to produce workspace content.
// All initializer are executed in the order they're provided.
type CompositeInitializer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Initializer []*WorkspaceInitializer `protobuf:"bytes,1,rep,name=initializer,proto3" json:"initializer,omitempty"`
}

func (x *CompositeInitializer) Reset() {
	*x = CompositeInitializer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_initializer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositeInitializer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositeInitializer) ProtoMessage() {}

func (x *CompositeInitializer) ProtoReflect() protoreflect.Message {
	mi := &file_initializer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositeInitializer.ProtoReflect.Descriptor instead.
func (*CompositeInitializer) Descriptor() ([]byte, []int) {
	return file_initializer_proto_rawDescGZIP(), []int{1}
}

func (x *CompositeInitializer) GetInitializer() []*WorkspaceInitializer {
	if x != nil {
		return x.Initializer
	}
	return nil
}

// FileDownloadInitializer downloads files and uses them as workspace content.
type FileDownloadInitializer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files          []*FileDownloadInitializer_FileInfo `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	TargetLocation string                              `protobuf:"bytes,2,opt,name=target_location,json=targetLocation,proto3" json:"target_location,omitempty"`
}

func (x *FileDownloadInitializer) Reset() {
	*x = FileDownloadInitializer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_initializer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDownloadInitializer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDownloadInitializer) ProtoMessage() {}

func (x *FileDownloadInitializer) ProtoReflect() protoreflect.Message {
	mi := &file_initializer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDownloadInitializer.ProtoReflect.Descriptor instead.
func (*FileDownloadInitializer) Descriptor() ([]byte, []int) {
	return file_initializer_proto_rawDescGZIP(), []int{2}
}

func (x *FileDownloadInitializer) GetFiles() []*FileDownloadInitializer_FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *FileDownloadInitializer) GetTargetLocation() string {
	if x != nil {
		return x.TargetLocation
	}
	return ""
}

type EmptyInitializer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyInitializer) Reset() {
	*x = EmptyInitializer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_initializer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyInitializer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyInitializer) ProtoMessage() {}

func (x *EmptyInitializer) ProtoReflect() protoreflect.Message {
	mi := &file_initializer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyInitializer.ProtoReflect.Descriptor instead.
func (*EmptyInitializer) Descriptor() ([]byte, []int) {
	return file_initializer_proto_rawDescGZIP(), []int{3}
}

type GitInitializer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// remote_uri is the Git remote origin
	RemoteUri string `protobuf:"bytes,1,opt,name=remote_uri,json=remoteUri,proto3" json:"remote_uri,omitempty"`
	// upstream_Remote_uri is the fork upstream of a repository
	Upstream_RemoteUri string `protobuf:"bytes,2,opt,name=upstream_Remote_uri,json=upstreamRemoteUri,proto3" json:"upstream_Remote_uri,omitempty"`
	// the target mode determines what gets checked out
	TargetMode CloneTargetMode `protobuf:"varint,3,opt,name=target_mode,json=targetMode,proto3,enum=contentservice.CloneTargetMode" json:"target_mode,omitempty"`
	// the value for the clone target mode - use depends on the target mode
	CloneTaget string `protobuf:"bytes,4,opt,name=clone_taget,json=cloneTaget,proto3" json:"clone_taget,omitempty"`
	// a path relative to the workspace root in which the code will be checked out to
	CheckoutLocation string `protobuf:"bytes,5,opt,name=checkout_location,json=checkoutLocation,proto3" json:"checkout_location,omitempty"`
	// config specifies the Git configuration for this workspace
	Config *GitConfig `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GitInitializer) Reset() {
	*x = GitInitializer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_initializer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitInitializer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitInitializer) ProtoMessage() {}

func (x *GitInitializer) ProtoReflect() protoreflect.Message {
	mi := &file_initializer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitInitializer.ProtoReflect.Descriptor instead.
func (*GitInitializer) Descriptor() ([]byte, []int) {
	return file_initializer_proto_rawDescGZIP(), []int{4}
}

func (x *GitInitializer) GetRemoteUri() string {
	if x != nil {
		return x.RemoteUri
	}
	return ""
}

func (x *GitInitializer) GetUpstream_RemoteUri() string {
	if x != nil {
		return x.Upstream_RemoteUri
	}
	return ""
}

func (x *GitInitializer) GetTargetMode() CloneTargetMode {
	if x != nil {
		return x.TargetMode
	}
	return CloneTargetMode_REMOTE_HEAD
}

func (x *GitInitializer) GetCloneTaget() string {
	if x != nil {
		return x.CloneTaget
	}
	return ""
}

func (x *GitInitializer) GetCheckoutLocation() string {
	if x != nil {
		return x.CheckoutLocation
	}
	return ""
}

func (x *GitInitializer) GetConfig() *GitConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type GitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// custom config values to be set on clone provided through `.gitpod.yml`
	CustomConfig map[string]string `protobuf:"bytes,1,rep,name=custom_config,json=customConfig,proto3" json:"custom_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// authentication method
	Authentication GitAuthMethod `protobuf:"varint,2,opt,name=authentication,proto3,enum=contentservice.GitAuthMethod" json:"authentication,omitempty"`
	// auth_user is the username used to authenticate the clone
	AuthUser string `protobuf:"bytes,3,opt,name=auth_user,json=authUser,proto3" json:"auth_user,omitempty"`
	// auth_password is the password used to authenticate the clone (can also be an API token)
	AuthPassword string `protobuf:"bytes,4,opt,name=auth_password,json=authPassword,proto3" json:"auth_password,omitempty"`
	// auth_ots is a URL where one can download the authentication secret (<username>:<password>)
	// using a GET request.
	AuthOts string `protobuf:"bytes,5,opt,name=auth_ots,json=authOts,proto3" json:"auth_ots,omitempty"`
}

func (x *GitConfig) Reset() {
	*x = GitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_initializer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitConfig) ProtoMessage() {}

func (x *GitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_initializer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitConfig.ProtoReflect.Descriptor instead.
func (*GitConfig) Descriptor() ([]byte, []int) {
	return file_initializer_proto_rawDescGZIP(), []int{5}
}

func (x *GitConfig) GetCustomConfig() map[string]string {
	if x != nil {
		return x.CustomConfig
	}
	return nil
}

func (x *GitConfig) GetAuthentication() GitAuthMethod {
	if x != nil {
		return x.Authentication
	}
	return GitAuthMethod_NO_AUTH
}

func (x *GitConfig) GetAuthUser() string {
	if x != nil {
		return x.AuthUser
	}
	return ""
}

func (x *GitConfig) GetAuthPassword() string {
	if x != nil {
		return x.AuthPassword
	}
	return ""
}

func (x *GitConfig) GetAuthOts() string {
	if x != nil {
		return x.AuthOts
	}
	return ""
}

type SnapshotInitializer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the snapshot to restore
	Snapshot string `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	// if snapshot string is volume snapshot and not GCS url
	FromVolumeSnapshot bool `protobuf:"varint,2,opt,name=from_volume_snapshot,json=fromVolumeSnapshot,proto3" json:"from_volume_snapshot,omitempty"`
}

func (x *SnapshotInitializer) Reset() {
	*x = SnapshotInitializer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_initializer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotInitializer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotInitializer) ProtoMessage() {}

func (x *SnapshotInitializer) ProtoReflect() protoreflect.Message {
	mi := &file_initializer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotInitializer.ProtoReflect.Descriptor instead.
func (*SnapshotInitializer) Descriptor() ([]byte, []int) {
	return file_initializer_proto_rawDescGZIP(), []int{6}
}

func (x *SnapshotInitializer) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

func (x *SnapshotInitializer) GetFromVolumeSnapshot() bool {
	if x != nil {
		return x.FromVolumeSnapshot
	}
	return false
}

// A prebuild initializer combines snapshots with Git: first we try the snapshot, then apply the Git clone target.
// If restoring the snapshot fails, we fall back to a regular Git initializer, which might be composite git initializer for multi-repo projects.
type PrebuildInitializer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prebuild *SnapshotInitializer `protobuf:"bytes,1,opt,name=prebuild,proto3" json:"prebuild,omitempty"`
	Git      []*GitInitializer    `protobuf:"bytes,2,rep,name=git,proto3" json:"git,omitempty"`
}

func (x *PrebuildInitializer) Reset() {
	*x = PrebuildInitializer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_initializer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrebuildInitializer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrebuildInitializer) ProtoMessage() {}

func (x *PrebuildInitializer) ProtoReflect() protoreflect.Message {
	mi := &file_initializer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrebuildInitializer.ProtoReflect.Descriptor instead.
func (*PrebuildInitializer) Descriptor() ([]byte, []int) {
	return file_initializer_proto_rawDescGZIP(), []int{7}
}

func (x *PrebuildInitializer) GetPrebuild() *SnapshotInitializer {
	if x != nil {
		return x.Prebuild
	}
	return nil
}

func (x *PrebuildInitializer) GetGit() []*GitInitializer {
	if x != nil {
		return x.Git
	}
	return nil
}

// FromBackupInitializer initializes content from a previously made backup
type FromBackupInitializer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckoutLocation   string `protobuf:"bytes,1,opt,name=checkout_location,json=checkoutLocation,proto3" json:"checkout_location,omitempty"`
	FromVolumeSnapshot bool   `protobuf:"varint,2,opt,name=from_volume_snapshot,json=fromVolumeSnapshot,proto3" json:"from_volume_snapshot,omitempty"`
}

func (x *FromBackupInitializer) Reset() {
	*x = FromBackupInitializer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_initializer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromBackupInitializer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromBackupInitializer) ProtoMessage() {}

func (x *FromBackupInitializer) ProtoReflect() protoreflect.Message {
	mi := &file_initializer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromBackupInitializer.ProtoReflect.Descriptor instead.
func (*FromBackupInitializer) Descriptor() ([]byte, []int) {
	return file_initializer_proto_rawDescGZIP(), []int{8}
}

func (x *FromBackupInitializer) GetCheckoutLocation() string {
	if x != nil {
		return x.CheckoutLocation
	}
	return ""
}

func (x *FromBackupInitializer) GetFromVolumeSnapshot() bool {
	if x != nil {
		return x.FromVolumeSnapshot
	}
	return false
}

// GitStatus describes the current Git working copy status, akin to a combination of "git status" and "git branch"
type GitStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// branch is branch we're currently on
	Branch string `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	// latest_commit is the most recent commit on the current branch
	LatestCommit string `protobuf:"bytes,2,opt,name=latest_commit,json=latestCommit,proto3" json:"latest_commit,omitempty"`
	// uncommited_files is the number of uncommitted files, possibly truncated
	UncommitedFiles []string `protobuf:"bytes,3,rep,name=uncommited_files,json=uncommitedFiles,proto3" json:"uncommited_files,omitempty"`
	// the total number of uncommited files
	TotalUncommitedFiles int64 `protobuf:"varint,6,opt,name=total_uncommited_files,json=totalUncommitedFiles,proto3" json:"total_uncommited_files,omitempty"`
	// untracked_files is the number of untracked files in the workspace, possibly truncated
	UntrackedFiles []string `protobuf:"bytes,4,rep,name=untracked_files,json=untrackedFiles,proto3" json:"untracked_files,omitempty"`
	// the total number of untracked files
	TotalUntrackedFiles int64 `protobuf:"varint,7,opt,name=total_untracked_files,json=totalUntrackedFiles,proto3" json:"total_untracked_files,omitempty"`
	// unpushed_commits is the number of unpushed changes in the workspace, possibly truncated
	UnpushedCommits []string `protobuf:"bytes,5,rep,name=unpushed_commits,json=unpushedCommits,proto3" json:"unpushed_commits,omitempty"`
	// the total number of unpushed changes
	TotalUnpushedCommits int64 `protobuf:"varint,8,opt,name=total_unpushed_commits,json=totalUnpushedCommits,proto3" json:"total_unpushed_commits,omitempty"`
}

func (x *GitStatus) Reset() {
	*x = GitStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_initializer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitStatus) ProtoMessage() {}

func (x *GitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_initializer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitStatus.ProtoReflect.Descriptor instead.
func (*GitStatus) Descriptor() ([]byte, []int) {
	return file_initializer_proto_rawDescGZIP(), []int{9}
}

func (x *GitStatus) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GitStatus) GetLatestCommit() string {
	if x != nil {
		return x.LatestCommit
	}
	return ""
}

func (x *GitStatus) GetUncommitedFiles() []string {
	if x != nil {
		return x.UncommitedFiles
	}
	return nil
}

func (x *GitStatus) GetTotalUncommitedFiles() int64 {
	if x != nil {
		return x.TotalUncommitedFiles
	}
	return 0
}

func (x *GitStatus) GetUntrackedFiles() []string {
	if x != nil {
		return x.UntrackedFiles
	}
	return nil
}

func (x *GitStatus) GetTotalUntrackedFiles() int64 {
	if x != nil {
		return x.TotalUntrackedFiles
	}
	return 0
}

func (x *GitStatus) GetUnpushedCommits() []string {
	if x != nil {
		return x.UnpushedCommits
	}
	return nil
}

func (x *GitStatus) GetTotalUnpushedCommits() int64 {
	if x != nil {
		return x.TotalUnpushedCommits
	}
	return 0
}

type FileDownloadInitializer_FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// file_path is relative to the target_location, e.g. if target_location is in `/workspace/myrepo`
	// a file_path of `foobar/file` would produce a file in `/workspace/myrepo/foobar/file`.
	// file_path must include the filename. The FileDownloadInitializer will create any parent directories
	// necessary to place the file.
	FilePath string `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// digest is a hash of the file content in the OCI digest format (see https://github.com/opencontainers/image-spec/blob/master/descriptor.md#digests).
	// This information is used to compute subsequent
	// content versions, and to validate the file content was downloaded correctly.
	Digest string `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *FileDownloadInitializer_FileInfo) Reset() {
	*x = FileDownloadInitializer_FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_initializer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDownloadInitializer_FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDownloadInitializer_FileInfo) ProtoMessage() {}

func (x *FileDownloadInitializer_FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_initializer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDownloadInitializer_FileInfo.ProtoReflect.Descriptor instead.
func (*FileDownloadInitializer_FileInfo) Descriptor() ([]byte, []int) {
	return file_initializer_proto_rawDescGZIP(), []int{2, 0}
}

func (x *FileDownloadInitializer_FileInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileDownloadInitializer_FileInfo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileDownloadInitializer_FileInfo) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

var File_initializer_proto protoreflect.FileDescriptor

var file_initializer_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x22, 0xe0, 0x03, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x67, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x41, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x44, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3f, 0x0a,
	0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46,
	0x72, 0x6f, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x06,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x5e, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x46,
	0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x22, 0xdd, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x12, 0x46, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x51, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x22, 0xa2, 0x02, 0x0a, 0x0e, 0x47,
	0x69, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x69, 0x12, 0x2e, 0x0a, 0x13,
	0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x69, 0x12, 0x40, 0x0a, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x67, 0x65, 0x74, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xc2, 0x02, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x45, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x4f, 0x74, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x63, 0x0a, 0x13, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x50, 0x72,
	0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x30, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x69, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52,
	0x03, 0x67, 0x69, 0x74, 0x22, 0x76, 0x0a, 0x15, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xe7, 0x02, 0x0a,
	0x09, 0x47, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x75, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x70, 0x75, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x75, 0x6e, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x70, 0x75, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2a, 0x5a, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45,
	0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48,
	0x10, 0x03, 0x2a, 0x40, 0x0a, 0x0d, 0x47, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4f,
	0x54, 0x53, 0x10, 0x02, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_initializer_proto_rawDescOnce sync.Once
	file_initializer_proto_rawDescData = file_initializer_proto_rawDesc
)

func file_initializer_proto_rawDescGZIP() []byte {
	file_initializer_proto_rawDescOnce.Do(func() {
		file_initializer_proto_rawDescData = protoimpl.X.CompressGZIP(file_initializer_proto_rawDescData)
	})
	return file_initializer_proto_rawDescData
}

var file_initializer_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_initializer_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_initializer_proto_goTypes = []interface{}{
	(CloneTargetMode)(0),                     // 0: contentservice.CloneTargetMode
	(GitAuthMethod)(0),                       // 1: contentservice.GitAuthMethod
	(*WorkspaceInitializer)(nil),             // 2: contentservice.WorkspaceInitializer
	(*CompositeInitializer)(nil),             // 3: contentservice.CompositeInitializer
	(*FileDownloadInitializer)(nil),          // 4: contentservice.FileDownloadInitializer
	(*EmptyInitializer)(nil),                 // 5: contentservice.EmptyInitializer
	(*GitInitializer)(nil),                   // 6: contentservice.GitInitializer
	(*GitConfig)(nil),                        // 7: contentservice.GitConfig
	(*SnapshotInitializer)(nil),              // 8: contentservice.SnapshotInitializer
	(*PrebuildInitializer)(nil),              // 9: contentservice.PrebuildInitializer
	(*FromBackupInitializer)(nil),            // 10: contentservice.FromBackupInitializer
	(*GitStatus)(nil),                        // 11: contentservice.GitStatus
	(*FileDownloadInitializer_FileInfo)(nil), // 12: contentservice.FileDownloadInitializer.FileInfo
	nil,                                      // 13: contentservice.GitConfig.CustomConfigEntry
}
var file_initializer_proto_depIdxs = []int32{
	5,  // 0: contentservice.WorkspaceInitializer.empty:type_name -> contentservice.EmptyInitializer
	6,  // 1: contentservice.WorkspaceInitializer.git:type_name -> contentservice.GitInitializer
	8,  // 2: contentservice.WorkspaceInitializer.snapshot:type_name -> contentservice.SnapshotInitializer
	9,  // 3: contentservice.WorkspaceInitializer.prebuild:type_name -> contentservice.PrebuildInitializer
	3,  // 4: contentservice.WorkspaceInitializer.composite:type_name -> contentservice.CompositeInitializer
	4,  // 5: contentservice.WorkspaceInitializer.download:type_name -> contentservice.FileDownloadInitializer
	10, // 6: contentservice.WorkspaceInitializer.backup:type_name -> contentservice.FromBackupInitializer
	2,  // 7: contentservice.CompositeInitializer.initializer:type_name -> contentservice.WorkspaceInitializer
	12, // 8: contentservice.FileDownloadInitializer.files:type_name -> contentservice.FileDownloadInitializer.FileInfo
	0,  // 9: contentservice.GitInitializer.target_mode:type_name -> contentservice.CloneTargetMode
	7,  // 10: contentservice.GitInitializer.config:type_name -> contentservice.GitConfig
	13, // 11: contentservice.GitConfig.custom_config:type_name -> contentservice.GitConfig.CustomConfigEntry
	1,  // 12: contentservice.GitConfig.authentication:type_name -> contentservice.GitAuthMethod
	8,  // 13: contentservice.PrebuildInitializer.prebuild:type_name -> contentservice.SnapshotInitializer
	6,  // 14: contentservice.PrebuildInitializer.git:type_name -> contentservice.GitInitializer
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_initializer_proto_init() }
func file_initializer_proto_init() {
	if File_initializer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_initializer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceInitializer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_initializer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositeInitializer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_initializer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDownloadInitializer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_initializer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyInitializer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_initializer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitInitializer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_initializer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_initializer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotInitializer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_initializer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrebuildInitializer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_initializer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromBackupInitializer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_initializer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_initializer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDownloadInitializer_FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_initializer_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*WorkspaceInitializer_Empty)(nil),
		(*WorkspaceInitializer_Git)(nil),
		(*WorkspaceInitializer_Snapshot)(nil),
		(*WorkspaceInitializer_Prebuild)(nil),
		(*WorkspaceInitializer_Composite)(nil),
		(*WorkspaceInitializer_Download)(nil),
		(*WorkspaceInitializer_Backup)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_initializer_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_initializer_proto_goTypes,
		DependencyIndexes: file_initializer_proto_depIdxs,
		EnumInfos:         file_initializer_proto_enumTypes,
		MessageInfos:      file_initializer_proto_msgTypes,
	}.Build()
	File_initializer_proto = out.File
	file_initializer_proto_rawDesc = nil
	file_initializer_proto_goTypes = nil
	file_initializer_proto_depIdxs = nil
}
