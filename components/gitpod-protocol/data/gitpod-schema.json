{
    "$id": "https://gitpod.io/schemas/gitpod-schema.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Gitpod Config",
    "type": "object",
    "properties": {
        "ports": {
            "type": "array",
            "description": "List of exposed ports.",
            "items": {
                "type": "object",
                "required": [
                    "port"
                ],
                "properties": {
                    "port": {
                        "type": ["number", "string"],
                        "pattern": "^\\d+[:-]\\d+$",
                        "description": "The port number (e.g. 1337) or range (e.g. 3000-3999) to expose."
                    },
                    "onOpen": {
                        "type": "string",
                        "enum": [
                            "open-browser",
                            "open-preview",
                            "notify",
                            "ignore"
                        ],
                        "description": "What to do when a service on this port was detected. 'notify' (default) will show a notification asking the user what to do. 'open-browser' will open a new browser tab. 'open-preview' will open in the preview on the right of the IDE. 'ignore' will do nothing."
                    },
                    "visibility": {
                        "type": "string",
                        "enum": [
                            "private",
                            "public"
                        ],
                        "default": "private",
                        "description": "Whether the port visibility should be private or public. 'private' (default) will only allow users with workspace access to access the port. 'public' will allow everyone with the port URL to access the port."
                    },
                    "name": {
                        "type": "string",
                        "description": "Port name."
                    },
                    "protocol": {
                        "type": "string",
                        "enum": [
                            "http",
                            "TCP",
                            "UDP"
                        ],
                        "deprecationMessage": "The 'protocol' property is deprecated.",
                        "description": "The protocol to be used. (deprecated)"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description to identify what is this port used for."
                    }
                },
                "additionalProperties": false
            }
        },
        "tasks": {
            "type": "array",
            "description": "List of tasks to run on start. Each task will open a terminal in the IDE.",
            "items": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the task. Shown on the tab of the opened terminal."
                    },
                    "before": {
                        "type": "string",
                        "description": "A shell command to run before `init` and the main `command`. This command is executed on every start and is expected to terminate. If it fails, the following commands will not be executed."
                    },
                    "init": {
                        "type": "string",
                        "description": "A shell command to run between `before` and the main `command`. This command is executed only on after initializing a workspace with a fresh clone, but not on restarts and snapshots. This command is expected to terminate. If it fails, the `command` property will not be executed."
                    },
                    "prebuild": {
                        "type": "string",
                        "description": "A shell command to run after `before`. This command is executed only on during workspace prebuilds. This command is expected to terminate. If it fails, the workspace build fails.",
                        "deprecationMessage": "Deprecated. Please use `init` task instead. See https://www.gitpod.io/docs/config-start-tasks."
                    },
                    "command": {
                        "type": "string",
                        "description": "The main shell command to run after `before` and `init`. This command is executed last on every start and doesn't have to terminate."
                    },
                    "env": {
                        "type": "object",
                        "description": "Environment variables to set."
                    },
                    "openIn": {
                        "type": "string",
                        "enum": [
                            "bottom",
                            "main",
                            "left",
                            "right"
                        ],
                        "description": "The panel/area where to open the terminal. Default is 'bottom' panel."
                    },
                    "openMode": {
                        "type": "string",
                        "enum": [
                            "split-left",
                            "split-right",
                            "tab-before",
                            "tab-after"
                        ],
                        "description": "The opening mode. Default is 'tab-after'."
                    }
                },
                "additionalProperties": false
            }
        },
        "image": {
            "type": [
                "object",
                "string"
            ],
            "description": "The Docker image to run your workspace in.",
            "default": "gitpod/workspace-full",
            "required": [
                "file"
            ],
            "properties": {
                "file": {
                    "type": "string",
                    "description": "Relative path to a docker file."
                },
                "context": {
                    "type": "string",
                    "description": "Relative path to the context path (optional). Should only be set if you need to copy files into the image."
                }
            },
            "additionalProperties": false
        },
        "additionalRepositories": {
            "type": "array",
            "description": "List of additional repositories that are part of this project.",
            "items": {
                "type": "object",
                "required": [
                    "url"
                ],
                "properties": {
                    "url": {
                        "type": ["string"],
                        "description": "The url of the git repository to clone. Supports any context URLs."
                    },
                    "checkoutLocation": {
                        "type": "string",
                        "description": "Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name."
                    }
                },
                "additionalProperties": false
            }
        },
        "mainConfiguration": {
            "type": "string",
            "description": "The main repository, containing the dev environment configuration."
        },
        "checkoutLocation": {
            "type": "string",
            "description": "Path to where the repository should be checked out relative to `/workspace`. Defaults to the simple repository name."
        },
        "workspaceLocation": {
            "type": "string",
            "description": "Path to where the IDE's workspace should be opened. Supports vscode's `*.code-workspace` files."
        },
        "gitConfig": {
            "type": [
                "object"
            ],
            "description": "Git config values should be provided in pairs. E.g. `core.autocrlf: input`. See https://git-scm.com/docs/git-config#_values.",
            "additionalProperties": {
                "type": "string"
            }
        },
        "github": {
            "type": "object",
            "description": "Configures Gitpod's GitHub app",
            "properties": {
                "prebuilds": {
                    "type": [
                        "boolean",
                        "object"
                    ],
                    "description": "Set to true to enable workspace prebuilds, false to disable them. Defaults to true.",
                    "properties": {
                        "master": {
                            "type": "boolean",
                            "description": "Enable prebuilds for the default branch (typically master). Defaults to true."
                        },
                        "branches": {
                            "type": "boolean",
                            "description": "Enable prebuilds for all branches. Defaults to false."
                        },
                        "pullRequests": {
                            "type": "boolean",
                            "description": "Enable prebuilds for pull-requests from the original repo. Defaults to true."
                        },
                        "pullRequestsFromForks": {
                            "type": "boolean",
                            "description": "Enable prebuilds for pull-requests from any repo (e.g. from forks). Defaults to false."
                        },
                        "addBadge": {
                            "type": "boolean",
                            "description": "Add a Review in Gitpod badge to pull requests. Defaults to true."
                        },
                        "addCheck": {
                            "type": [
                                "boolean",
                                "string"
                            ],
                            "enum": [
                                true,
                                false,
                                "prevent-merge-on-error"
                            ],
                            "description": "Add a commit check to pull requests. Set to 'fail-on-error' if you want broken prebuilds to block merging. Defaults to true."
                        },
                        "addLabel": {
                            "type": [
                                "boolean",
                                "string"
                            ],
                            "description": "Add a label to a PR when it's prebuilt. Set to true to use the default label (prebuilt-in-gitpod) or set to a string to use a different label name. This is a beta feature and may be unreliable. Defaults to false."
                        }
                    }
                }
            },
            "additionalProperties": false
        },
        "vscode": {
            "type": "object",
            "description": "Configure VS Code integration",
            "additionalProperties": false,
            "properties": {
                "extensions": {
                    "type": "array",
                    "description": "List of extensions which should be installed for users of this workspace. The identifier of an extension is always '${publisher}.${name}'. For example: 'vscode.csharp'.",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "jetbrains": {
            "type": "object",
            "description": "Configure JetBrains integration",
            "deprecationMessage": "The 'jetbrains' property is experimental.",
            "additionalProperties": false,
            "properties": {
                "plugins": {
                    "type": "array",
                    "description": "List of plugins which should be installed for all JetBrains product for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.",
                    "items": {
                        "type": "string"
                    }
                },
                "intellij": {
                    "$ref": "#/definitions/jetbrainsProduct",
                    "description": "Configure IntelliJ integration"
                },
                "goland": {
                    "$ref": "#/definitions/jetbrainsProduct",
                    "description": "Configure GoLand integration"
                },
                "pycharm": {
                    "$ref": "#/definitions/jetbrainsProduct",
                    "description": "Configure PyCharm integration"
                },
                "phpstorm": {
                    "$ref": "#/definitions/jetbrainsProduct",
                    "description": "Configure PhpStorm integration"
                },
                "rubymine": {
                    "$ref": "#/definitions/jetbrainsProduct",
                    "description": "Configure RubyMine integration"
                },
                "webstorm": {
                    "$ref": "#/definitions/jetbrainsProduct",
                    "description": "Configure WebStorm integration"
                },
                "rider": {
                    "$ref": "#/definitions/jetbrainsProduct",
                    "description": "Configure Rider integration"
                },
                "clion": {
                    "$ref": "#/definitions/jetbrainsProduct",
                    "description": "Configure CLion integration"
                }
            }
        },
        "experimentalNetwork": {
            "type": "boolean",
            "deprecationMessage": "The 'experimentalNetwork' property is deprecated.",
            "description": "Experimental network configuration in workspaces (deprecated). Enabled by default"
        },
        "coreDump": {
            "type": "object",
            "description": "Configure the default action of certain signals is to cause a process to terminate and produce a core dump file, a file containing an image of the process's memory at the time of termination. Disabled by default.",
            "deprecationMessage": "The 'coreDump' property is experimental.",
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "softLimit": {
                    "type": "number",
                    "description": "upper limit on the size of the core dump file that will be produced if it receives a core dump signal"
                },
                "hardLimit": {
                    "type": "number",
                    "description": "the hard limit acts as a ceiling for the soft limit. For more details please check https://man7.org/linux/man-pages/man2/getrlimit.2.html"
                }
            }
        }
    },
    "additionalProperties": false,
    "definitions": {
        "jetbrainsProduct": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "plugins": {
                    "type": "array",
                    "description": "List of plugins which should be installed for users of this workspace. From the JetBrains Marketplace page, find a page of the required plugin, select 'Versions' tab, click any version to copy pluginId (short name such as org.rust.lang) of the plugin you want to install.",
                    "items": {
                        "type": "string"
                    }
                },
                "prebuilds": {
                    "type": "object",
                    "description": "Enable warming up of JetBrains backend in prebuilds.",
                    "additionalProperties": false,
                    "properties": {
                        "version": {
                            "type": "string",
                            "enum": [
                                "stable",
                                "latest",
                                "both"
                            ],
                            "description": "Whether only stable, latest or both versions should be warmed up. Default is stable only."
                        }
                    }
                },
                "vmoptions": {
                    "type": "string",
                    "description": "Configure JVM options, for instance '-Xmx=4096m'."
                }
            }
        }
    }
}
