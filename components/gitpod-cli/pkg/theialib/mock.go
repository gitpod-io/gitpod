// Copyright (c) 2020 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License-AGPL.txt in the project root for license information.

// Code generated by MockGen. DO NOT EDIT.
// Source: protocol.go

// Package theialib is a generated GoMock package.
package theialib

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTheiaCLIService is a mock of TheiaCLIService interface
type MockTheiaCLIService struct {
	ctrl     *gomock.Controller
	recorder *MockTheiaCLIServiceMockRecorder
}

// MockTheiaCLIServiceMockRecorder is the mock recorder for MockTheiaCLIService
type MockTheiaCLIServiceMockRecorder struct {
	mock *MockTheiaCLIService
}

// NewMockTheiaCLIService creates a new mock instance
func NewMockTheiaCLIService(ctrl *gomock.Controller) *MockTheiaCLIService {
	mock := &MockTheiaCLIService{ctrl: ctrl}
	mock.recorder = &MockTheiaCLIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTheiaCLIService) EXPECT() *MockTheiaCLIServiceMockRecorder {
	return m.recorder
}

// GetGitToken mocks base method
func (m *MockTheiaCLIService) GetGitToken(arg0 GetGitTokenRequest) (*GetGitTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitToken", arg0)
	ret0, _ := ret[0].(*GetGitTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitToken indicates an expected call of GetGitToken
func (mr *MockTheiaCLIServiceMockRecorder) GetGitToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitToken", reflect.TypeOf((*MockTheiaCLIService)(nil).GetGitToken), arg0)
}

// OpenPreview mocks base method
func (m *MockTheiaCLIService) OpenPreview(arg0 OpenPreviewRequest) (*OpenPreviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenPreview", arg0)
	ret0, _ := ret[0].(*OpenPreviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenPreview indicates an expected call of OpenPreview
func (mr *MockTheiaCLIServiceMockRecorder) OpenPreview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenPreview", reflect.TypeOf((*MockTheiaCLIService)(nil).OpenPreview), arg0)
}

// OpenFile mocks base method
func (m *MockTheiaCLIService) OpenFile(arg0 OpenFileRequest) (*OpenFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", arg0)
	ret0, _ := ret[0].(*OpenFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile
func (mr *MockTheiaCLIServiceMockRecorder) OpenFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockTheiaCLIService)(nil).OpenFile), arg0)
}

// IsFileOpen mocks base method
func (m *MockTheiaCLIService) IsFileOpen(arg0 IsFileOpenRequest) (*IsFileOpenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFileOpen", arg0)
	ret0, _ := ret[0].(*IsFileOpenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFileOpen indicates an expected call of IsFileOpen
func (mr *MockTheiaCLIServiceMockRecorder) IsFileOpen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFileOpen", reflect.TypeOf((*MockTheiaCLIService)(nil).IsFileOpen), arg0)
}

// GetEnvVars mocks base method
func (m *MockTheiaCLIService) GetEnvVars(arg0 GetEnvvarsRequest) (*GetEnvvarsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvVars", arg0)
	ret0, _ := ret[0].(*GetEnvvarsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvVars indicates an expected call of GetEnvVars
func (mr *MockTheiaCLIServiceMockRecorder) GetEnvVars(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvVars", reflect.TypeOf((*MockTheiaCLIService)(nil).GetEnvVars), arg0)
}

// SetEnvVar mocks base method
func (m *MockTheiaCLIService) SetEnvVar(arg0 SetEnvvarRequest) (*SetEnvvarResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEnvVar", arg0)
	ret0, _ := ret[0].(*SetEnvvarResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEnvVar indicates an expected call of SetEnvVar
func (mr *MockTheiaCLIServiceMockRecorder) SetEnvVar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnvVar", reflect.TypeOf((*MockTheiaCLIService)(nil).SetEnvVar), arg0)
}

// DeleteEnvVar mocks base method
func (m *MockTheiaCLIService) DeleteEnvVar(arg0 DeleteEnvvarRequest) (*DeleteEnvvarResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvVar", arg0)
	ret0, _ := ret[0].(*DeleteEnvvarResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvVar indicates an expected call of DeleteEnvVar
func (mr *MockTheiaCLIServiceMockRecorder) DeleteEnvVar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvVar", reflect.TypeOf((*MockTheiaCLIService)(nil).DeleteEnvVar), arg0)
}

// GetPortURL mocks base method
func (m *MockTheiaCLIService) GetPortURL(arg0 GetPortURLRequest) (*GetPortURLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortURL", arg0)
	ret0, _ := ret[0].(*GetPortURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortURL indicates an expected call of GetPortURL
func (mr *MockTheiaCLIServiceMockRecorder) GetPortURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortURL", reflect.TypeOf((*MockTheiaCLIService)(nil).GetPortURL), arg0)
}
