# Gitpod Project Intelligence

This file captures important patterns, preferences, and project intelligence that help me work more effectively with the Gitpod codebase. It serves as a learning journal that will be updated as I discover new insights.

## Project Structure Patterns

- **Component Organization**: The project is organized into components, each with its own directory in the `components/` folder
- **API Definitions**: API definitions are typically in separate packages with `-api` suffix (e.g., `content-service-api`)
- **Protocol Buffers**: gRPC service definitions use Protocol Buffers (`.proto` files)
- **Build Configuration**: Each component has a `BUILD.yaml` file defining its build configuration
- **Docker Configuration**: Components that run as containers have a `leeway.Dockerfile`

## Code Style Preferences

- **Go Code**:
  - Follow standard Go conventions (gofmt)
  - Error handling with explicit checks
  - Context propagation for cancellation
  - Structured logging

- **TypeScript Code**:
  - Use TypeScript for type safety
  - React for UI components
  - Functional components with hooks
  - ESLint and Prettier for formatting

## Development Workflow

- **Build System**: Use Leeway for building components
  - `leeway build` to build specific components
  - `leeway exec` to run commands across components

- **Testing**:
  - Unit tests alongside code
  - Integration tests in separate directories
  - End-to-end tests in the `test/` directory

- **Local Development**:
  - Use Gitpod workspaces for development (dogfooding)
  - Components can be run individually for testing
  - Preview environments for testing changes

## Critical Implementation Paths

- **Workspace Lifecycle**: The critical path for workspace operations involves:
  - Workspace Manager
  - Image Builder
  - Kubernetes
  - Workspace Daemon
  - Supervisor

- **User Authentication**: The critical path for user authentication involves:
  - Auth Service
  - Dashboard
  - Proxy

## Known Challenges

- **Build System Complexity**: The Leeway build system has a learning curve
- **Component Dependencies**: Understanding dependencies between components can be challenging
- **Testing Environment**: Setting up proper testing environments for all components

## Tool Usage Patterns

- **VS Code**: Primary IDE for TypeScript development
- **GoLand/IntelliJ**: Often used for Go development
- **Docker**: Used for containerized development and testing
- **kubectl**: Used for interacting with Kubernetes clusters
- **Werft**: CI/CD system for automated builds and tests

## Documentation Patterns

- **README.md**: Each component should have a README explaining its purpose
- **API Documentation**: Generated from Protocol Buffer definitions
- **Architecture Documentation**: System-level documentation in various formats

## Evolution of Project Decisions

This section will be updated as I learn about how and why certain architectural and design decisions were made.

## User Preferences

This section will be updated as I learn about specific user preferences for working with the codebase.

---

Note: This file will be continuously updated as I work with the Gitpod codebase and discover new patterns, preferences, and insights.
