on:
  workflow_call:
    inputs:
      productName:
        type: string
        required: true
      productId:
        type: string
        required: true
      productCode:
        type: string
        required: true
      productType:
        type: string
        required: true
      exampleRepo:
        type: string
        required: true
    secrets:
      slackWebhook:
        required: true

jobs:
  update-jetbrains:
    runs-on: ubuntu-latest
    steps:
      - name: Latest Release
        id: latest-release
        run: |
          data=$(curl -sSL "https://data.services.jetbrains.com/products?code=${{ inputs.productCode }}&release.type=${{ inputs.productType }}&fields=distributions%2Clink%2Cname%2Creleases&_=$(date +%s)000")
          link=$(echo "$data" | jq -r '.[0].releases[0].downloads.linux.link')
          build=$(echo "$data" | jq -r '.[0].releases[0].build')
          build2=$(echo "$build" | sed 's/\./-/g')
          echo "::set-output name=result::$link"
          echo "::set-output name=version::$build"
          echo "::set-output name=version2::$build2"
      - uses: actions/checkout@v2
      - name: Used Release
        id: used-release
        run: echo "::set-output name=result::$(yq e '.defaultArgs.${{ inputs.productId }}DownloadUrl' WORKSPACE.yaml)"
      - name: No Update Available
        if: steps.latest-release.outputs.result == steps.used-release.outputs.result
        run: |
          echo "Nothing to do."
          echo "Latest release: ${{ steps.latest-release.outputs.result }}"
          echo "Used release:   ${{ steps.used-release.outputs.result }}"
      - name: Update Available
        if: steps.latest-release.outputs.result != steps.used-release.outputs.result
        run: |
          echo "There is an update available!"
          echo "Latest release: ${{ steps.latest-release.outputs.result }}"
          echo "Used release:   ${{ steps.used-release.outputs.result }}"
          yq -i e '.defaultArgs.${{ inputs.productId }}DownloadUrl = "${{ steps.latest-release.outputs.result }}"' WORKSPACE.yaml
          git diff
      - name: Create Pull Request
        if: steps.latest-release.outputs.result != steps.used-release.outputs.result
        uses: peter-evans/create-pull-request@v4
        with:
          title: "[${{ inputs.productId }}] Update IDE image to build version ${{ steps.latest-release.outputs.version }}"
          body: |
            ## Description
            This PR updates the ${{ inputs.productName }} IDE image to the latest release version.

            ## How to test
            1. Open the preview environment generated for this branch
            2. Choose the stable version of ${{ inputs.productName }} as your preferred editor
            3. Start a workspace using this repository: `${{ inputs.exampleRepo }}`
            4. Verify that the workspace starts successfully
            5. Verify that the IDE opens successfully
            6. Verify that the version of the IDE corresponds to the one being updated in this PR

            The following resources should help, in case something goes wrong (e.g. workspaces don't start):

            - https://www.gitpod.io/docs/troubleshooting#gitpod-logs-in-jetbrains-gateway
            - https://docs.google.com/document/d/1K9PSB0G6NwX2Ns_SX_HEgMYTKYsgMJMY2wbh0p6t3lQ

            ## Release Notes
            ```release-note
            Update ${{ inputs.productName }} IDE image to version ${{ steps.latest-release.outputs.version }}.
            ```

            ## Werft options:
            <!--
            Optional annotations to add to the werft job.
            * with-preview - whether to create a preview environment for this PR
            -->
            - [x] /werft with-preview

            _This PR was created automatically with GitHub Actions using [this](https://github.com/gitpod-io/gitpod/blob/main/.github/workflows/jetbrains-updates-template.yml) template_
          commit-message: "[${{ inputs.productId }}] Update IDE image to build version ${{ steps.latest-release.outputs.version }}"
          branch: "jetbrains/${{ inputs.productId }}-${{ steps.latest-release.outputs.version2 }}"
          labels: "team: IDE,editor: jetbrains"
          team-reviewers: "engineering-ide"
      - name: Get previous job's status
        id: lastrun
        uses: filiptronicek/get-last-job-status@main
      - name: Slack Notification
        if: ${{ (success() && steps.lastrun.outputs.status == 'failed') || failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.slackWebhook }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: ${{ inputs.productName }}
