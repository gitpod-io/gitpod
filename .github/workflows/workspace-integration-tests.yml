name: "Workspace integration tests"
on:
  workflow_dispatch:
    inputs:
      name:
        required: false
        description: "The name of the preview environment, or leave empty to use a default name"
      version:
        required: false
        description: "The version of Gitpod to install (leave empty to target the latest successful build on main)"
      skip_deploy:
        required: false
        type: boolean
        description: "Skip deploy preview environment (debug only)"
      skip_delete:
        required: false
        type: boolean
        description: "Skip delete preview environment (debug only)"
  schedule:
    - cron: "0 3,12 * * *"

jobs:
  create-runner:
    uses: ./.github/workflows/create_runner.yml
    secrets: inherit

  configuration:
    name: Configuration
    runs-on: ${{ needs.create-runner.outputs.label }}
    needs: [create-runner]
    container:
      image: eu.gcr.io/gitpod-core-dev/dev/dev-environment:aledbf-new-dev-image-gha.13182
    outputs:
      name: ${{ steps.configuration.outputs.name }}
      version: ${{ steps.configuration.outputs.version }}
    steps:
      - id: auth
        uses: google-github-actions/auth@v1
        continue-on-error: true
        with:
          token_format: access_token
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
      # do this step as early as possible, so that Slack Notify failure has the secret
      - name: Get Secrets from GCP
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v1"
        with:
          secrets: |-
            WORKSPACE_SLACK_WEBHOOK:gitpod-core-dev/workspace-slack-webhook
      - name: "Set outputs"
        id: configuration
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ '${{ github.event.inputs.name }}' != '' ]]; then
              {
                  echo "name=${{ github.event.inputs.name }}"
              } >> $GITHUB_OUTPUT
          else
              {
                  echo "name=workspace-integration-test-${{ github.run_id }}-${{ github.run_attempt }}"
              } >> $GITHUB_OUTPUT
          fi

          if [[ '${{ github.event.inputs.version }}' != '' ]]; then
              {
                  echo "version=${{ github.event.inputs.version }}"
              } >> $GITHUB_OUTPUT
          else
              # Find the most recent successful build on main. Look back up to 10 builds.
              RUNID=$(gh run list --repo gitpod-io/gitpod --branch main --workflow Build --limit 10 --json createdAt,conclusion,databaseId --jq 'map(select(.conclusion == "success")) | sort_by(.createdAt) | .[-1] | .databaseId')
              if [ "$RUNID" == "" ]; then
                echo no successful build found on main branch in the last 10 commits, see https://github.com/gitpod-io/gitpod/actions/workflows/build.yml for details | tee -a $GITHUB_STEP_SUMMARY
                exit 1
              fi

              {
                  echo "version=$(gh run view "$RUNID" --log -R gitpod-io/gitpod | grep 'main-gha.[0-9]*' -o | head -n 1)"
              } >> $GITHUB_OUTPUT
          fi
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ steps.secrets.outputs.WORKSPACE_SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: "Workspace Integration Tests failed"
          SLACK_FOOTER: "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Workflow logs>"

  infrastructure:
    needs: [configuration, create-runner]
    runs-on: ${{ needs.create-runner.outputs.label }}
    concurrency:
      group: ${{ needs.configuration.outputs.name }}-infrastructure
    steps:
      - uses: actions/checkout@v3
      - name: Create preview environment infrastructure
        id: create
        uses: ./.github/actions/preview-create
        with:
          name: ${{ needs.configuration.outputs.name }}
          sa_key: ${{ secrets.GCP_CREDENTIALS }}
          infrastructure_provider: gce
          large_vm: true
      - name: Deploy Gitpod to the preview environment
        if: github.event.inputs.skip_deploy != 'true'
        id: deploy-gitpod
        uses: ./.github/actions/deploy-gitpod
        with:
          name: ${{ needs.configuration.outputs.name }}
          sa_key: ${{ secrets.GCP_CREDENTIALS }}
          version: ${{ needs.configuration.outputs.version}}

  check:
    name: Check for regressions
    needs: [configuration, infrastructure, create-runner]
    runs-on: ${{ needs.create-runner.outputs.label }}
    container:
      image: eu.gcr.io/gitpod-core-dev/dev/dev-environment:aledbf-new-dev-image-gha.13182
    steps:
      - uses: actions/checkout@v3
      - id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: access_token
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
      # do this step as early as possible, so that Slack Notify failure has the secret
      # any earlier, and it conflicts with create previ
      - name: Get Secrets from GCP
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v1"
        with:
          secrets: |-
            WORKSPACE_SLACK_WEBHOOK:gitpod-core-dev/workspace-slack-webhook
            WORKSPACE_INTEGRATION_TEST_USERNAME:gitpod-core-dev/workspace-integration-test-username
            WORKSPACE_INTEGRATION_TEST_USER_TOKEN:gitpod-core-dev/workspace-integration-test-user-token
      - name: Integration Test
        id: integration-test
        shell: bash
        env:
          ROBOQUAT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ steps.secrets.outputs.WORKSPACE_INTEGRATION_TEST_USERNAME }}
          USER_TOKEN: ${{ steps.secrets.outputs.WORKSPACE_INTEGRATION_TEST_USER_TOKEN }}
          PREVIEW_ENV_DEV_SA_KEY: ${{ secrets.GCP_CREDENTIALS }}
          PREVIEW_NAME: ${{ needs.configuration.outputs.name }}
        run: |
          set -euo pipefail

          printf -v start_time '%(%s)T'

          export LEEWAY_WORKSPACE_ROOT="$(pwd)"
          export HOME="/home/gitpod"
          export PREVIEW_ENV_DEV_SA_KEY_PATH="/home/gitpod/.config/gcloud/preview-environment-dev-sa.json"

          echo "${PREVIEW_ENV_DEV_SA_KEY}" > "${PREVIEW_ENV_DEV_SA_KEY_PATH}"
          gcloud auth activate-service-account --key-file "${PREVIEW_ENV_DEV_SA_KEY_PATH}"

          leeway run dev/preview/previewctl:install

          echo "Setting up access to core-dev and harvester"
          previewctl get-credentials --gcp-service-account "${PREVIEW_ENV_DEV_SA_KEY_PATH}"

          previewctl install-context --branch "${PREVIEW_NAME}" --log-level debug --timeout 1m --gcp-service-account "${PREVIEW_ENV_DEV_SA_KEY_PATH}"

          # start integration test
          args=()
          args+=( "-kubeconfig=/home/gitpod/.kube/config" )
          args+=( "-namespace=default" )
          [[ "$USERNAME" != "" ]] && args+=( "-username=$USERNAME" )
          args+=( "-timeout=180m" )

          BASE_TESTS_DIR="$GITHUB_WORKSPACE/test/tests"
          CONTENT_SERVICE_TESTS="$BASE_TESTS_DIR/components/content-service"
          IMAGE_BUILDER_TESTS="$BASE_TESTS_DIR/components/image-builder"
          WS_DAEMON_TESTS="$BASE_TESTS_DIR/components/ws-daemon"
          WS_MANAGER_TESTS="$BASE_TESTS_DIR/components/ws-manager"
          WORKSPACE_TESTS="$BASE_TESTS_DIR/workspace"

          go install github.com/jstemmer/go-junit-report/v2@latest

          FAILURE_COUNT=0

          WORKSPACE_TEST_LIST="$CONTENT_SERVICE_TESTS $IMAGE_BUILDER_TESTS $WS_DAEMON_TESTS $WS_MANAGER_TESTS $WORKSPACE_TESTS"
          TEST_NAME="workspace"
          echo "running integration for ${TEST_NAME}-parallel"

          cd "${GITHUB_WORKSPACE}/test"
          set +e
          go test -p 10 -v $WORKSPACE_TEST_LIST "${args[@]}" -parallel-features=true 2>&1 | go-junit-report -subtest-mode=exclude-parents -set-exit-code -out "TEST-${TEST_NAME}.xml" -iocopy
          RC=${PIPESTATUS[0]}
          set -e

          if [ "${RC}" -ne "0" ]; then
            FAILURE_COUNT=$((FAILURE_COUNT+1))
          fi

          printf -v end_time '%(%s)T'
          duration_sec=$((end_time - start_time))
          duration_min=$((duration_sec / 60))
          duration_sec=$((duration_sec % 60))
          duration="${duration_min}m${duration_sec}s"
          echo "duration=${duration}" >> $GITHUB_OUTPUT

          exit $FAILURE_COUNT
      - uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: "test/**/TEST-*.xml"
        if: always()
      - name: Test Summary
        id: test_summary
        uses: test-summary/action@v2
        with:
          paths: "test/**/TEST-*.xml"
          show: "all"
        if: always()
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: success() || failure()
        env:
          SLACK_WEBHOOK: ${{ steps.secrets.outputs.WORKSPACE_SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: "${{ steps.test_summary.outputs.passed }} tests passed, ${{ steps.test_summary.outputs.failed }} tests failed, ${{ steps.test_summary.outputs.skipped }} tests skipped (took ${{ steps.integration-test.outputs.duration }})"
          SLACK_FOOTER: "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Workflow logs>"

  delete:
    name: Delete preview environment
    needs: [configuration, infrastructure, check, create-runner]
    if: github.event.inputs.skip_delete != 'true' && always()
    runs-on: ${{ needs.create-runner.outputs.label }}
    container:
      image: eu.gcr.io/gitpod-core-dev/dev/dev-environment:aledbf-new-dev-image-gha.13182
    steps:
      - uses: actions/checkout@v3
      - name: Delete preview environment
        uses: ./.github/actions/delete-preview
        with:
          name: ${{ needs.configuration.outputs.name }}
          sa_key: ${{ secrets.GCP_CREDENTIALS }}

  delete-runner:
    if: always()
    needs:
      - create-runner
      - configuration
      - infrastructure
      - check
      - delete
    uses: ./.github/workflows/remove_runner.yml
    secrets: inherit
    with:
      runner-label: ${{ needs.create-runner.outputs.label }}
