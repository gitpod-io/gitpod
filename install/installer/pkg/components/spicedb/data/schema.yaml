# Copyright (c) 2023 Gitpod GmbH. All rights reserved.
# Licensed under the GNU Affero General Public License (AGPL).
# See License.AGPL.txt in the project root for license information.

schema: |-
  definition user {}

  definition organization {
    // Every user in an organization is automatically a member
    relation member: user
    // Some users in an organization may additionally have the `owner` role
    // granting them more privilidges with respect to the organization.
    relation owner: user

    // General operations on organization
    permission read_info = member + owner
    permission write_info = owner

    // Operations on Organization's Members
    permission read_members = member + owner
    permission write_members = member + owner

    // Any user in the organization can try to leave their organization
    permission leave = owner + member

    // Owners can delete the organization,
    // and through this process also disconnect all users from the organization
    permission delete = owner

    // Only owners can create new projects
    permission create_project = owner

    // Only owners can change settings
    permission read_settings = owner
    permission write_settings = owner
  }

  definition project {
    relation org: organization

    // A subject is an editor, if:
    //  * the user is directly assigned as an editor
    relation editor: user
    // A subject is a viewer, if:
    //  * the user is directly assigned as a viewer
    //  * the project has granted access to everyone in an organization
    relation viewer: user | organization#member

    // Project can be modified by:
    //  * Organization owners
    //  * The user has direct editor relation
    permission write_info = org->owner + editor
    // Project can be accessed by:
    //  * Anyone with write_info permission
    //  * Direct viewers
    permission read_info = write_info + viewer
  }

# relationships to be used for assertions & validation
relationships: |-
  // We have an organization org_1, which has some members & owners
  organization:org_1#member@user:user_0
  organization:org_1#owner@user:user_0
  organization:org_1#member@user:user_1
  organization:org_1#member@user:user_2

  // org_1 has a project
  project:project_1#org@organization:org_1
  // project_1 can be accessed by anyone in the organization - it's visibility is public
  project:project_1#viewer@organization:org_1#member


  // We have another organization org_2, which has some users, some of which are also members of org_1
  organization:org_2#member@user:user_0
  organization:org_2#owner@user:user_0
  organization:org_2#member@user:user_1
  organization:org_2#member@user:user_10

  // org_2 has a project project_2
  project:project_2#org@organization:org_2
  // user_1 is viewer of project_2
  project:project_2#viewer@user:user_1


# assertions should assert that a particular permission holds, or not
assertions:
  assertTrue:
    - organization:org_1#read_info@user:user_0
    # user 0 can edit project_0, because they are the Org Owner
    - project:project_1#write_info@user:user_0
    - organization:org_1#write_settings@user:user_0
    # Org Owner can delete the organization
    - organization:org_1#delete@user:user_0
  assertFalse:
    # user 10 cannot access project_1
    - project:project_1#read_info@user:user_10
    - project:project_2#write_info@user:user_10
    # non-member/owner cannot access organization
    - organization:org_1#read_info@user:user_3
    - organization:org_1#write_info@user:user_3
    - organization:org_1#read_members@user:user_3
    - organization:org_1#write_members@user:user_3
    - organization:org_1#write_settings@user:user_1
# validation should assert that a particular relation exists between an entity, and a subject
# validations are not used to assert that a permission exists
validation:
  organization:org_1#member:
    - "[user:user_0] is <organization:org_1#member>"
    - "[user:user_1] is <organization:org_1#member>"
    - "[user:user_2] is <organization:org_1#member>"
  organization:org_1#leave:
    - "[user:user_0] is <organization:org_1#member>/<organization:org_1#owner>"
    - "[user:user_1] is <organization:org_1#member>"
    - "[user:user_2] is <organization:org_1#member>"
  organization:org_1#owner:
    - "[user:user_0] is <organization:org_1#owner>"
  organization:org_1#read_settings:
    - "[user:user_0] is <organization:org_1#owner>"
  organization:org_1#write_settings:
    - "[user:user_0] is <organization:org_1#owner>"
  project:project_1#read_info:
    - "[organization:org_1#member] is <project:project_1#viewer>"
    - "[user:user_0] is <organization:org_1#member>/<organization:org_1#owner>"
    - "[user:user_1] is <organization:org_1#member>"
    - "[user:user_2] is <organization:org_1#member>"
  project:project_2#read_info:
    - "[user:user_0] is <organization:org_2#owner>"
    - "[user:user_1] is <project:project_2#viewer>"
  project:project_2#write_info:
    - "[user:user_0] is <organization:org_2#owner>"
  organization:org_1#delete:
  - "[user:user_0] is <organization:org_1#owner>"
