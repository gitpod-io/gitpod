# Copyright (c) 2022 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

# The installer job is where the magic happens. It generates
# the config, installs Gitpod and then deletes itself when
# it's finished
apiVersion: batch/v1
kind: Job
metadata:
  # Appending cursor allows us to replace with new versions
  name: installer-{{repl Cursor }}
  labels:
    app: gitpod
    component: gitpod-installer
    cursor: "{{repl Cursor }}"
spec:
  backoffLimit: 1
  ttlSecondsAfterFinished: 0
  template:
    metadata:
      labels:
        app: gitpod
        component: gitpod-installer
        cursor: "{{repl Cursor }}"
    spec:
      serviceAccountName: installer
      restartPolicy: OnFailure
      containers:
        - name: installer
          # This will normally be the release tag
          image: "eu.gcr.io/gitpod-core-dev/build/installer:sje-installer-clusterip.8"
          volumeMounts:
            - mountPath: /gitpod-config
              name: gitpod-kots-config
              readOnly: true
            - mountPath: /mnt/node0
              name: node-fs0
              readOnly: true
          env:
            - name: CONFIG_FILE
              value: /tmp/gitpod-config.yaml
            - name: CONFIG_PATCH_FILE
              value: /gitpod-config/gitpod-config-patch.yaml
            - name: CONTAINERD_DIR_K3S
              value: /run/k3s/containerd/io.containerd.runtime.v2.task/k8s.io
            - name: CONTAINERD_SOCKET_K3S
              value: /run/k3s/containerd/containerd.sock
            - name: CONTAINERD_DIR_AL
              value: /run/containerd/io.containerd.runtime.v2.task/k8s.io
            - name: CONTAINERD_SOCKET_AL
              value: /run/containerd/containerd.sock
            - name: GITPOD_OBJECTS
              value: /tmp/gitpod
          command:
            - /bin/sh
            - -c
          args:
            - |
              set -e

              echo "Gitpod: Killing any in-progress installations"

              kubectl delete jobs.batch -n {{repl Namespace }} -l component=gitpod-installer,cursor!={{repl Cursor }} --force --grace-period 0 || true
              kubectl delete pod -n {{repl Namespace }} -l component=gitpod-installer,cursor!={{repl Cursor }} --force --grace-period 0 || true

              if [ "$(helm status -n {{repl Namespace }} gitpod -o json | jq '.info.status == "deployed"')" = "false" ];
              then
                echo "Gitpod: Deployment in-progress - clearing"

                VERSION="$(helm status -n {{repl Namespace }} gitpod -o json | jq '.version')"
                if [ "${VERSION}" -le 1 ];
                then
                  echo "Gitpod: Uninstall application"
                  helm uninstall -n {{repl Namespace }} gitpod --wait || true
                else
                  echo "Gitpod: Rolling back application"
                  helm rollback -n {{repl Namespace }} gitpod --wait || true
                fi
              fi

              echo "Gitpod: Get config file"
              cp /gitpod-config/config.yaml "${CONFIG_FILE}"

              echo "Gitpod: auto-detecting ShiftFS support on host machine"
              kubectl wait job -n {{repl Namespace }} --for=condition=complete -l component=shiftfs-module-loader --timeout=30s || true
              ENABLE_SHIFTFS=$(kubectl get jobs.batch -n {{repl Namespace }} -l component=shiftfs-module-loader -o jsonpath='{.items[0].status.succeeded}')

              if [ "${ENABLE_SHIFTFS}" = "1" ]; then
                echo "Gitpod: enabling ShiftFS support"

                yq e -i '.workspace.runtime.fsShiftMethod = "shiftfs"' "${CONFIG_FILE}"
              fi

              echo "Gitpod: auto-detecting containerd location on host machine"
              if [ -d "/mnt/node0${CONTAINERD_DIR_K3S}" ]; then
                echo "Gitpod: containerd dir detected as k3s"

                yq e -i ".workspace.runtime.containerdRuntimeDir = \"${CONTAINERD_DIR_K3S}\"" "${CONFIG_FILE}"
              elif [ -d "/mnt/node0${CONTAINERD_DIR_AL}" ]; then
                echo "Gitpod: containerd dir detected as ${CONTAINERD_DIR_AL}"

                yq e -i ".workspace.runtime.containerdRuntimeDir = \"${CONTAINERD_DIR_AL}\"" "${CONFIG_FILE}"
              fi

              if [ -S "/mnt/node0${CONTAINERD_SOCKET_K3S}" ]; then
                echo "Gitpod: containerd socket detected as k3s"

                yq e -i ".workspace.runtime.containerdSocket = \"${CONTAINERD_SOCKET_K3S}\"" "${CONFIG_FILE}"
              elif [ -S "/mnt/node0${CONTAINERD_SOCKET_AL}" ]; then
                echo "Gitpod: containerd socket detected as ${CONTAINERD_SOCKET_AL}"

                yq e -i ".workspace.runtime.containerdSocket = \"${CONTAINERD_SOCKET_AL}\"" "${CONFIG_FILE}"
              fi

              # Output the local registry secret - this is proxy.replicated.com if user hasn't set their own
              echo "{{repl LocalRegistryImagePullSecret }}" | base64 -d > /tmp/kotsregistry.json

              # Add the registries to the server allowlist
              yq e -i ".experimental.webApp.server.defaultBaseImageRegistryWhitelist += $(cat /tmp/kotsregistry.json | jq '.auths' | jq -rc 'keys')" "${CONFIG_FILE}"

              if [ '{{repl ConfigOptionEquals "reg_incluster" "0" }}' = "true" ];
              then
                echo "Gitpod: configuring external container registry"

                # Create a container-registry secret merging the external registry and KOTS registry keys
                echo '{{repl printf "{\"auths\": {\"%s\": {\"username\": \"%s\", \"password\": %s, \"auth\": \"%s\"}}}" (ConfigOption "reg_server" | default (ConfigOption "reg_url")) (ConfigOption "reg_username") (ConfigOption "reg_password" | toJson) (printf "%s:%s" (ConfigOption "reg_username") (ConfigOption "reg_password") | Base64Encode) }}' \
                  | yq -o=json '.' - \
                  > /tmp/gitpodregistry.json

                cat /tmp/kotsregistry.json /tmp/gitpodregistry.json | jq -s '.[0] * .[1]' - - > /tmp/container-registry-secret

                echo "Gitpod: create the container-registry secret"
                kubectl create secret docker-registry container-registry \
                  --namespace "{{repl Namespace }}" \
                  --from-file=.dockerconfigjson=/tmp/container-registry-secret \
                  -o yaml --dry-run=client | \
                  kubectl replace --namespace "{{repl Namespace }}" --force -f -
              fi

              if [ '{{repl ConfigOptionEquals "advanced_mode_enabled" "1" }}' = "true" ];
              then
                echo "Gitpod: Applying advanced configuration"

                if [ '{{repl ConfigOptionNotEquals "customization_patch" "" }}' = "true" ];
                then
                  CUSTOMIZATION='{{repl ConfigOptionData "customization_patch" | Base64Encode }}'
                  echo "Gitpod: Applying customization patch ${CUSTOMIZATION}"

                  # Apply the customization property - if something else is set, this will be ignored
                  yq e -i ".customization = $(echo "${CUSTOMIZATION}" | base64 -d | yq e -o json '.customization' - | jq -rc) // []" "${CONFIG_FILE}"
                fi
              else
                echo "Gitpod: No advanced configuration applied"
              fi

              echo "Gitpod: Patch Gitpod config"
              base64 -d "${CONFIG_PATCH_FILE}" > /tmp/patch.yaml
              config_patch=$(cat /tmp/patch.yaml)
              echo "Gitpod: ${CONFIG_PATCH_FILE}=${config_patch}"
              yq eval-all --inplace 'select(fileIndex == 0) * select(fileIndex == 1)' "${CONFIG_FILE}" /tmp/patch.yaml

              echo "Gitpod: Generate the Kubernetes objects"
              config=$(cat "${CONFIG_FILE}")
              echo "Gitpod: ${CONFIG_FILE}=${config}"

              echo "Gitpod: Create a Helm template directory"
              rm -Rf "${GITPOD_OBJECTS}"
              mkdir -p "${GITPOD_OBJECTS}/templates"
              cat <<EOF >> "${GITPOD_OBJECTS}/Chart.yaml"
              apiVersion: v2
              name: gitpod-kots
              description: Always ready-to-code
              version: "1.0.0"
              appVersion: "$(/app/installer version | yq e '.version' -)"
              EOF

              echo "Gitpod: render Kubernetes manifests"
              /app/installer render -c "${CONFIG_FILE}" --namespace {{repl Namespace }} --use-experimental-config > "${GITPOD_OBJECTS}/templates/gitpod.yaml"

              # Workaround for #8532 and #8529
              echo "Gitpod: Remove the StatefulSet status object for OpenVSX Proxy"
              yq eval-all --inplace \
                'del(select(.kind == "StatefulSet" and .metadata.name == "openvsx-proxy").status)' \
                "${GITPOD_OBJECTS}/templates/gitpod.yaml"

              if [ '{{repl ConfigOptionEquals "reg_incluster" "1" }}' = "true" ];
              then
                echo "Gitpod: Add the local registry secret to the in-cluster registry secret"

                # Get the in-cluster registry secret
                yq eval-all '(select(.kind == "Secret" and .metadata.name == "builtin-registry-auth") | .data.".dockerconfigjson")' \
                  "${GITPOD_OBJECTS}/templates/gitpod.yaml" \
                  | base64 -d \
                  > /tmp/gitpodregistry.json

                export REGISTRY_SECRET=$(cat /tmp/kotsregistry.json /tmp/gitpodregistry.json | jq -s '.[0] * .[1]' - - | base64 -w 0)

                echo "Gitpod: update the in-cluster registry secret"
                yq eval-all --inplace '(select(.kind == "Secret" and .metadata.name == "builtin-registry-auth") | .data.".dockerconfigjson") |= env(REGISTRY_SECRET)' \
                  "${GITPOD_OBJECTS}/templates/gitpod.yaml"
              fi

              echo "Gitpod: Escape any Golang template values"
              sed -i -r 's/(.*\{\{.*)/{{`\1`}}/' "${GITPOD_OBJECTS}/templates/gitpod.yaml"

              # If certificate secret already exists, set the timeout to 5m
              CERT_SECRET=$(kubectl get secrets -n {{repl Namespace }} https-certificates -o jsonpath='{.metadata.name}' || echo '')
              HELM_TIMEOUT="5m"
              if [ "${CERT_SECRET}" = "" ]; then
                HELM_TIMEOUT="1h"
              fi

              # The long timeout is to ensure the TLS cert is created (if required)
              echo "Gitpod: Apply the Kubernetes objects with timeout of ${HELM_TIMEOUT}"
              helm upgrade \
                --atomic \
                --cleanup-on-fail \
                --create-namespace \
                --install \
                --namespace="{{repl Namespace }}" \
                --reset-values \
                --timeout "${HELM_TIMEOUT}" \
                --wait \
                gitpod \
                "${GITPOD_OBJECTS}"

              echo "Gitpod: Restarting installation status job"
              kubectl delete pod -n {{repl Namespace }} -l component=gitpod-installer-status || true

              echo "Gitpod: Installer job finished - goodbye"
      volumes:
        - name: gitpod-kots-config
          configMap:
            name: gitpod-kots-config
        - name: node-fs0
          hostPath:
            path: /
            type: Directory
