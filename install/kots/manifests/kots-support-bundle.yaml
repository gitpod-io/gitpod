# Copyright (c) 2022 Gitpod GmbH. All rights reserved.
# Licensed under the GNU Affero General Public License (AGPL).
# See License.AGPL.txt in the project root for license information.

apiVersion: troubleshoot.sh/v1beta2
kind: SupportBundle
metadata:
  name: gitpod
spec:
  collectors:
    - runPod:
        name: certificate
        namespace: '{{repl Namespace }}'
        podSpec:
          serviceAccountName: kotsadm
          containers:
            - name: certificate
              image: eu.gcr.io/gitpod-core-dev/build/kots-config-check/certificate:mrsimonemms-add-kots-support-bundle-11865.7
              args:
                - '{{repl ConfigOption "domain" }}' # DOMAIN
                - '{{repl Namespace }}' # NAMESPACE
                - https-certificates # SECRET_NAME
                - tls.crt # TLS_CRT_KEY
                - tls.key # TLS_KEY_KEY
    - run:
        collectorName: database
        image: eu.gcr.io/gitpod-core-dev/build/kots-config-check/database:sje-kots-config-check.9
        name: database
        namespace: '{{repl Namespace }}'
        args:
          - '{{repl ConfigOption "db_incluster" }}' # DB_IN_CLUSTER_ENABLED
          - '{{repl ConfigOption "db_cloudsql_enabled" }}' # DB_CLOUDSQL_ENABLED
          - '{{repl ConfigOption "db_username" }}' # DB_USERNAME
          - '{{repl ConfigOption "db_password" }}' # DB_PASSWORD
          - '{{repl ConfigOption "db_host" }}' # DB_HOST
          - '{{repl ConfigOption "db_port" }}' # DB_PORT
          - '{{repl ConfigOption "db_cloudsql_instance" }}' # CloudSQL instances
          - '{{repl ConfigOption "db_gcp_credentials" }}' # CloudSQL credentials file
    - run:
        collectorName: registry
        image: eu.gcr.io/gitpod-core-dev/build/kots-config-check/registry:sje-kots-registry-check.16
        name: registry
        namespace: '{{repl Namespace }}'
        args:
          - '{{repl ConfigOption "reg_incluster" }}' # REG_IN_CLUSTER_ENABLED
          - '{{repl ConfigOption "reg_username" }}' # REG_USERNAME
          - '{{repl ConfigOption "reg_password" }}' # REG_PASSWORD
          - '{{repl ConfigOption "reg_url" }}' # REG_URL
          - '{{repl ConfigOption "reg_server" }}' # REG_SERVER
          - '{{repl ConfigOptionEquals "reg_incluster_storage" "s3" }}' # REG_IN_CLUSTER_S3_ENABLED
          - '{{repl ConfigOption "reg_incluster_storage_s3_region" }}' # REG_STORE_LOCATION
          - '{{repl ConfigOption "reg_incluster_storage_s3_endpoint" }}' # REG_S3_ENDPOINT
          - '{{repl ConfigOption "reg_incluster_storage_s3_accesskey" }}' # REG_S3_ACCESS_KEY_ID
          - '{{repl ConfigOption "reg_incluster_storage_s3_secretkey" }}' # REG_S3_SECRET_ACCESS_KEY
          - '{{repl ConfigOption "reg_incluster_storage_s3_bucketname" }}' # REG_S3_BUCKET_NAME
    - run:
        collectorName: storage
        image: eu.gcr.io/gitpod-core-dev/build/kots-config-check/storage:sje-kots-storage-check.9
        name: storage
        namespace: '{{repl Namespace }}'
        args:
          - '{{repl ConfigOption "store_provider" }}' # STORE_PROVIDER
          - '{{repl ConfigOption "store_region" }}' # STORE_LOCATION
          - '{{repl ConfigOption "store_azure_account_name" }}' # AZURE_ACCOUNT_NAME
          - '{{repl ConfigOption "store_azure_access_key" }}' # AZURE_ACCESS_KEY
          - '{{repl ConfigOption "store_gcp_project" }}' # GCP_PROJECT_ID
          - '{{repl ConfigOption "store_gcp_credentials" }}' # GCP_SERVICE_ACCOUNT_KEY
          - '{{repl ConfigOption "store_s3_endpoint" }}' # S3_ENDPOINT
          - '{{repl ConfigOption "store_s3_access_key_id" }}' # S3_ACCESS_KEY_ID
          - '{{repl ConfigOption "store_s3_secret_access_key" }}' # S3_SECRET_ACCESS_KEY
          - '{{repl ConfigOption "store_s3_bucket" }}' # S3_BUCKET_NAME
    - run:
        collectorName: ping-registry
        image: alpine/curl
        name: ping-registry
        namespace: '{{repl Namespace }}'
        command:
          - /bin/sh
          - -c
        args:
          - |
            CONNECTION="error"

            if [ '{{repl HasLocalRegistry }}' = "true" ];
            then
              # Don't test for airgapped
              CONNECTION="ok"
            else
              URL="https://eu.gcr.io/v2/"
              echo "ping ${URL}"
              if curl --silent --max-time 5 "${URL}" > /dev/null;
              then
                CONNECTION="ok"
              fi
            fi

            echo "connection: ${CONNECTION}"
    - clusterInfo: {}
    - clusterResources: {}
    - logs:
        name: logs
        selector:
          - app=gitpod
        namespace: '{{repl Namespace }}'
        limits:
          maxAge: 720h
          maxLines: 10000
    - copy:
        name: log-collector
        selector:
          - component=gitpod-log-collector
        namespace: '{{repl Namespace }}'
        containerPath: /gitpod/log-collector
        containerName: kots
    - configMap:
        selector:
          - app=gitpod
        namespace: '{{repl Namespace }}'
        includeAllData: true
    - configMap:
        selector:
          - kots.io/kotsadm=true
        namespace: '{{repl Namespace }}'
        includeAllData: true
    - secret:
        selector:
          - app=gitpod
        namespace: '{{repl Namespace }}'
    - exec:
        name: kots-config
        selector:
          - app=kotsadm
        namespace: '{{repl Namespace }}'
        command:
          - /kots
        args:
          - get
          - config
          - --appslug
          - '{{repl LicenseFieldValue "appSlug" }}'
          - --namespace
          - '{{repl Namespace }}'
  analyzers:
    - textAnalyze:
        checkName: TLS certificate exists
        fileName: certificate/certificate.log
        regexGroups: 'cert_exists: (?P<Valid>\w+)'
        outcomes:
          - pass:
              when: "Valid == ok"
              message: TLS certificate exists
          - fail:
              message: TLS certificate does not exist. If using cert-manager, please check your settings and that your domain name is pointing to the correct name server. If you are supplying your own certificate, this will need to be re-uploaded.
    - textAnalyze:
        checkName: TLS certificate domain name
        fileName: certificate/certificate.log
        regexGroups: 'domain_name: (?P<Valid>\w+)'
        outcomes:
          - pass:
              when: "Valid == ok"
              message: TLS certificate has the correct domain names
          - fail:
              message: TLS certificate does not have the correct domain names. It requires the DNS names `{{repl ConfigOption "domain" }}`, `*.{{repl ConfigOption "domain" }}` and `*.ws.{{repl ConfigOption "domain" }}` on the certificate.
    - textAnalyze:
        checkName: TLS certificate in date
        fileName: certificate/certificate.log
        regexGroups: 'in_date: (?P<Valid>\w+)'
        outcomes:
          - pass:
              when: "Valid == ok"
              message: TLS certificate is in date
          - fail:
              message: TLS certificate is not date and will need to be reissued. If using cert-manager, please check your settings and that your domain name is pointing to the correct name server. If you are supplying your own certificate, this will need to be re-uploaded.
