apiVersion: batch/v1
kind: CronJob
metadata:
  name: gcr-refresh-token
spec:
  schedule: "30 * * * *"
  successfulJobsHistoryLimit: 1
  suspend: false
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 60
      template:
        spec:
          serviceAccountName: gcr-refresh-token
          containers:
          - name: gcr-refresh-token
            image: chainguard/kubectl:latest-dev
            command:
              - /bin/sh
              - -c
              - |-
                ACCOUNTS=$(wget -q -O - --header "Metadata-Flavor: Google" "http://169.254.169.254/computeMetadata/v1/instance/service-accounts/" | tr -d '\r')
                NON_DEFAULT_ACCOUNTS=$(echo "$ACCOUNTS" | grep -v "^default$")
                FIRST_NON_DEFAULT_ACCOUNT=$(echo "$NON_DEFAULT_ACCOUNTS" | head -1)
                TOKEN=$(wget -q -O - --header "Metadata-Flavor: Google" "http://169.254.169.254/computeMetadata/v1/instance/service-accounts/$FIRST_NON_DEFAULT_ACCOUNT/token")
                ACCESS_TOKEN=$(echo "$TOKEN" | grep -o '"access_token": *"[^"]*"' | sed 's/"access_token": *"\([^"]*\)"/\1/')

                AUTH_TOKEN=$(echo -n _dcgcloud_token:${ACCESS_TOKEN} | base64 -w0)


                # Create Docker config.json
                cat << EOF > /tmp/config.json
                {
                  "auths": {
                    "eu.gcr.io": {
                      "auth": "${AUTH_TOKEN}"
                    }
                  }
                }
                EOF

                # To avoid the deletion/creation we can run dry-run and then apply
                kubectl create secret generic image-pull-secret \
                  --from-file=.dockerconfigjson=/tmp/config.json \
                  --type=kubernetes.io/dockerconfigjson \
                  -o yaml --dry-run=client | kubectl apply --server-side --force-conflicts -f -

                echo "Secret gcr-credential was successfully updated at $(date)"
          restartPolicy: Never
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gcr-refresh-token-access-to-secrets-role
rules:
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["image-pull-secret"]
  verbs:
    - "get"
    - "create"
    - "patch"
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gcr-refresh-token-role-binding
subjects:
- kind: ServiceAccount
  name: gcr-refresh-token
  apiGroup: ""
roleRef:
  kind: Role
  name: gcr-refresh-token-access-to-secrets-role
  apiGroup: ""
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gcr-refresh-token
