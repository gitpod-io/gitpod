pod:
  serviceAccount: werft
  nodeSelector:
    dev/workload: builds
  imagePullSecrets:
  - name: eu-gcr-io-pull-secret
  volumes:
  - name: gcp-sa
    secret:
      secretName: gcp-sa-gitpod-dev-deployer
  - name: config
    emptyDir: {}
  containers:
  - name: gcloud
    image: eu.gcr.io/gitpod-core-dev/dev/dev-environment:af-rebuild-dev-image.0
    workingDir: /workspace
    imagePullPolicy: IfNotPresent
    env:
    - name: NODENAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: ROBOQUAT_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-roboquat-automatic-changelog
          key: token
    volumeMounts:
    - name: gcp-sa
      mountPath: /mnt/secrets/gcp-sa
      readOnly: true
    - name: config
      mountPath: /config
      readOnly: false
    command:
    - bash
    - -c
    - |
      set -euo pipefail

      BRANCH="inte-test/"$(date +%Y%m%d%H%M%S)

      function cleanup ()
      {
        git push origin :$BRANCH
      }

      source ./dev/preview/util/preview-name-from-branch.sh

      echo "preparing config." | werft log slice prepare
      sudo chown -R gitpod:gitpod /workspace
      gcloud auth activate-service-account --key-file /mnt/secrets/gcp-sa/service-account.json
      export GOOGLE_APPLICATION_CREDENTIALS="/home/gitpod/.config/gcloud/legacy_credentials/cd-gitpod-deployer@gitpod-core-dev.iam.gserviceaccount.com/adc.json"

      git config --global user.name roboquat
      git config --global user.email roboquat@gitpod.io
      git remote set-url origin https://oauth2:$ROBOQUAT_TOKEN@github.com/gitpod-io/gitpod.git

      echo "copied config..." | werft log slice prepare
      go install github.com/csweichel/oci-tool@latest 2>&1 | werft log slice prepare
      werft log slice prepare --done

      werft log phase "build preview environment" "build preview environment"
      echo integration test >> README.md
      git checkout -B $BRANCH
      git add README.md
      git commit -m "integration test"
      git push --set-upstream origin $BRANCH
      trap cleanup SIGINT SIGTERM EXIT

      BUILD_ID=$(werft job list repo.ref==refs/heads/${BRANCH} -o yaml | yq r - "result[0].name")
      until [ "$BUILD_ID" != "" ]
      do
          sleep 1
          BUILD_ID=$(werft job list repo.ref==refs/heads/${BRANCH} -o yaml | yq r - "result[0].name")
      done
      echo "start build preview environment, job name: ${BUILD_ID}, this will take long time" | werft log slice "build test environment"
      werft log result -d "build job" url "https://werft.gitpod-dev.com/job/${BUILD_ID}"

      if ! werft job logs ${BUILD_ID} | werft log slice "build test environment";
      then
          echo "build failed" | werft log slice "build test environment"
          exit 1
      fi
      echo "build success" | werft log slice "build test environment"
      werft log slice "build test environment" --done

      werft log phase "integration test" "integration test"
      # we need get integration-test version like: jp-run-integration-test.61

      oci-tool fetch file eu.gcr.io/gitpod-core-dev/build/versions:${BUILD_ID:13} versions.yaml
      INTEGRATION_VERSION=$(cat versions.yaml | yq r - 'components.integrationTest.version')

      echo "using integration-test image: ${INTEGRATION_VERSION}" | werft log slice "test"

      NAMESPACE="$(preview-name-from-branch)"
      TEST_BUILD_ID=$(werft run github -a version=${INTEGRATION_VERSION} -a namespace=staging-${NAMESPACE} --remote-job-path .werft/ide-run-integration-tests.yaml -a testPattern=vscode.test)

      echo "running integration, job name: ${TEST_BUILD_ID}" | werft log slice "test"
      werft log result -d "integration test job" url "https://werft.gitpod-dev.com/job/${TEST_BUILD_ID}"

      if ! werft job logs ${TEST_BUILD_ID} | werft log slice "test";
      then
          echo "integration test failed" | werft log slice "test"
          exit 1
      fi
      echo "integration test success" | werft log slice "test"
plugins:
  cron: "0 3 * * *"
