# debug using `werft run github -f -s .werft/installer-tests.ts -j .werft/self-hosted-installer-tests.yaml -a debug=true`
args:
- name: cluster
  desc: "Name of the supported managed cluster solution to test with, options: [`k3s`, `gke`, `aks`, `eks`], if not specified, it will run for all cloud providers"
  required: false
  default: ""
- name: subdomain
  desc: "Subdomain to use, starting with `gitpod-*` will omit from cleanup, make sure it is not in use already. A terraform workspace of same name will be used"
  required: false
  default: ""
- name: channel
  desc: "Replicated channel to use"
  required: false
  default: ""
- name: version
  desc: "Version of gitpod to install(in the case of upgrade tests, this is the initial install version and will later get upgraded to latest"
  required: false
  default: ""
- name: skipTests
  desc: "Set this to true to skip integration tests"
  required: false
  default: false
- name: upgrade
  desc: "Set this to true to run KOTS upgrade from the specified version to the latest version"
  required: false
  default: false
- name: preview
  desc: "Setting preview to true creates a self-hosted preview for you to consume"
  required: false
  default: true
- name: deps
  desc: "Specify if the dependencies(storage, db, registry) should be external or incluster. If unset, a random combination will be chosen. options:[external, incluster]"
  required: false
pod:
  serviceAccount: werft
  affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: dev/workload
          operator: In
          values:
          - "builds"
  securityContext:
    runAsUser: 0
  volumes:
  - name: sh-playground-sa-perm
    secret:
      secretName: sh-playground-sa-perm
  - name: sh-playground-dns-perm
    secret:
      secretName: sh-playground-dns-perm
  - name: sh-aks-perm
    secret:
      secretName: aks-credentials
  - name: self-hosted-github-oauth
    secret:
      secretName: self-hosted-github-oauth
  containers:
  - name: nightly-test
    image: eu.gcr.io/gitpod-core-dev/dev/dev-environment:sje-kots-latest-img.2
    workingDir: /workspace
    imagePullPolicy: Always
    volumeMounts:
    - name: self-hosted-github-oauth
      mountPath: /mnt/secrets/self-hosted-github-oauth
    - name: sh-playground-sa-perm
      mountPath: /mnt/secrets/sh-playground-sa-perm
    - name: sh-playground-dns-perm # this sa is used for the DNS management
      mountPath: /mnt/secrets/sh-playground-dns-perm
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/mnt/secrets/sh-playground-sa-perm/sh-sa.json"
    - name: TF_VAR_sa_creds
      value: "/mnt/secrets/sh-playground-sa-perm/sh-sa.json"
    - name: TF_VAR_dns_sa_creds
      value: "/mnt/secrets/sh-playground-dns-perm/sh-dns-sa.json"
    - name: ARM_SUBSCRIPTION_ID
      valueFrom:
        secretKeyRef:
          name: aks-credentials
          key: subscriptionid
    - name: ARM_TENANT_ID
      valueFrom:
        secretKeyRef:
          name: aks-credentials
          key: tenantid
    - name: ARM_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: aks-credentials
          key: clientid
    - name: ARM_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: aks-credentials
          key: clientsecret
    - name: NODENAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: USER_TOKEN # this is for the integration tests
      valueFrom:
        secretKeyRef:
          name: integration-test-user
          key: token
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: aws-credentials
          key: aws-access-key
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: aws-credentials
          key: aws-secret-key
    - name: AWS_REGION
      valueFrom:
        secretKeyRef:
          name: aws-credentials
          key: aws-region
    - name: IDE_SLACK_NOTIFICATION_PATH
      valueFrom:
        secretKeyRef:
          name: slack-webhook-urls
          key: ide_jobs
    - name: WS_SLACK_NOTIFICATION_PATH
      valueFrom:
        secretKeyRef:
          name: slack-webhook-urls
          key: workspace_jobs
    - name: SH_SLACK_NOTIFICATION_PATH
      valueFrom:
        secretKeyRef:
          name: slack-webhook-urls
          key: self_hosted_jobs
    command:
      - bash
      - -c
      - |
        sleep 1
        set -Eeuo pipefail

        sudo chown -R gitpod:gitpod /workspace
        sudo apt update && apt install gettext-base

        curl -sLS https://get.k3sup.dev | sh
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install

        (cd .werft && yarn install && mv node_modules ..) | werft log slice prep
        printf '{{ toJson . }}' > context.json

        export CLUSTER="{{ .Annotations.cluster }}"

        if [[ "$CLUSTER" == "<no value>" ]]; then
          CLUSTER="k3s"
        fi

        export domain="{{ .Annotations.subdomain }}"

        export eks=aws
        export gke=gcp
        export k3s=k3s
        export aks=azure

        export provider=${!CLUSTER}

        if [[ "$domain" == "<no value>" ]]; then
          export TF_VAR_TEST_ID="$(echo $RANDOM | md5sum | head -c 5; echo)-$provider"
        else
          export TF_VAR_TEST_ID="$domain"
        fi

        TESTCONFIG="STANDARD_${CLUSTER^^}_TEST"

        npx ts-node .werft/installer-tests.ts ${TESTCONFIG}
