# debug using `werft run github -f -s .werft/build.js -j .werft/build.yaml -a debug=true`
pod:
  serviceAccount: werft
  restartPolicy: Never
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: dev/workload
            operator: In
            values:
            - "builds"
  volumes:
  - name: monitoring-satellite-preview-token
    secret:
      secretName: monitoring-satellite-preview-token
  - name: monitoring-satellite-stackdriver-credentials
    secret:
      secretName: monitoring-satellite-stackdriver-credentials
  - name: gcp-sa
    secret:
      secretName: gcp-sa-gitpod-dev-deployer
  - name: gcp-sa-release
    secret:
      secretName: gcp-sa-gitpod-release-deployer
  - name: prometheus-remote-write-auth
    secret:
      secretName: prometheus-remote-write-auth
  - name: go-build-cache
    hostPath:
      path: /mnt/disks/ssd0/go-build-cache
      type: DirectoryOrCreate
  - name: harvester-kubeconfig
    secret:
      secretName: harvester-kubeconfig
  - name: harvester-vm-ssh-keys
    secret:
      secretName: harvester-vm-ssh-keys
  - name: harvester-k3s-dockerhub-pull-account
    secret:
      secretName: harvester-k3s-dockerhub-pull-account
  - name: github-token-gitpod-bot
    secret:
      defaultMode: 420
      secretName: github-token-gitpod-bot
  # - name: deploy-key
  #   secret:
  #     secretName: deploy-key
  # - name: github-ssh-key
  #   secret:
  #     secretName: github-ssh-key
  #     defaultMode: 0600
  # - name: gitpod-test-tokens
  #   secret:
  #     secretName: gitpod-test-tokens
  containers:
  - name: testdb
    image: mysql:5.7
    env:
    - name: MYSQL_ROOT_PASSWORD
      value: test
    # Using the same port as in our Gitpod workspaces here
    - name: MYSQL_TCP_PORT
      value: 23306
  - name: build
    image: eu.gcr.io/gitpod-core-dev/dev/dev-environment:aledbf-oci-tool-gha.14121
    workingDir: /workspace
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        memory: "10Gi"
        cpu: "3500m"
      limits:
        memory: "20Gi"
        cpu: "10000m"
    volumeMounts:
    - name: monitoring-satellite-stackdriver-credentials
      mountPath: /mnt/secrets/monitoring-satellite-stackdriver-credentials
    - name: monitoring-satellite-preview-token
      mountPath: /mnt/secrets/monitoring-satellite-preview-token
    - name: gcp-sa
      mountPath: /mnt/secrets/gcp-sa
      readOnly: true
    - name: gcp-sa-release
      mountPath: /mnt/secrets/gcp-sa-release
      readOnly: true
    - name: go-build-cache
      mountPath: /go-build-cache
      readOnly: false
    - name: harvester-kubeconfig
      mountPath: /mnt/secrets/harvester-kubeconfig
    - name: harvester-vm-ssh-keys
      mountPath: /mnt/secrets/harvester-vm-ssh-keys
    - name: harvester-k3s-dockerhub-pull-account
      mountPath: /mnt/secrets/harvester-k3s-dockerhub-pull-account
    - mountPath: /mnt/secrets/github-token-gitpod-bot
      name: github-token-gitpod-bot
    # - name: deploy-key
    #   mountPath: /mnt/secrets/deploy-key
    #   readOnly: true
    # - name: github-ssh-key
    #   mountPath: /mnt/secrets/github-ssh-key
    #   readOnly: true
    env:
    - name: DB_HOST
      value: 127.0.0.1
    - name: LEEWAY_WORKSPACE_ROOT
      value: /workspace
    - name: LEEWAY_REMOTE_CACHE_BUCKET
      {{- if eq .Repository.Ref "refs/heads/main" }}
      value: gitpod-core-leeway-cache-main
      {{- else }}
      value: gitpod-core-leeway-cache-branch
      {{- end }}
    - name: GOPROXY
      value: http://athens-athens-proxy.athens.svc.cluster.local:9999
    - name: GOCACHE
      value: /go-build-cache
    - name: NODENAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: NPM_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: npm-auth-token
          key: npm-auth-token.json
    - name: JB_MARKETPLACE_PUBLISH_TOKEN
      valueFrom:
        secretKeyRef:
          name: jb-marketplace-publish-token
          key: token
    - name: SLACK_NOTIFICATION_PATH
      valueFrom:
        secretKeyRef:
          name: slack-path
          key: slackPath
    - name: DEVX_SLACK_NOTIFICATION_PATH
      valueFrom:
        secretKeyRef:
          name: devx-slack-path
          key: token
    # used for GitHub releases (NOTE: for some reasons the token contains a trailing \n, is trimmed below)
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-sh-release-token
          key: token
    # - name: GITPOD_TEST_TOKEN_GITHUB
    #   valueFrom:
    #     secretKeyRef:
    #       name: gitpod-test-tokens
    #       key: github-test-token.json
    # - name: GITPOD_TEST_TOKEN_GITLAB
    #   valueFrom:
    #     secretKeyRef:
    #       name: gitpod-test-tokens
    #       key: gitlab-test-token.json
    # - name: GITPOD_TEST_TOKEN_BITBUCKET
    #   valueFrom:
    #     secretKeyRef:
    #       name: gitpod-test-tokens
    #       key: bitbucket-test-token.json
    - name: CODECOV_TOKEN
      valueFrom:
        secretKeyRef:
          name: codecov
          key: token
    - name: HONEYCOMB_DATASET
      value: "werft"
    - name: HONEYCOMB_API_KEY
      valueFrom:
        secretKeyRef:
          name: honeycomb-api-key
          key: apikey
    - name: SEGMENT_IO_TOKEN
      valueFrom:
        secretKeyRef:
          name: self-hosted
          key: segmentIOToken
    - name: JAVA_HOME
      value: /home/gitpod/.sdkman/candidates/java/current
    # Used by the Werft CLI through werft-credential-helper.sh
    - name: WERFT_GITHUB_TOKEN_PATH
      value: "/mnt/secrets/github-token-gitpod-bot/token"
    - name: WERFT_CREDENTIAL_HELPER
      value: "/workspace/dev/preview/werft-credential-helper.sh"
    # When running the build with 'with-integration-tests' these are used
    # to specify what Gitpod user to use in those tests.
    - name: INTEGRATION_TEST_USERNAME
      valueFrom:
        secretKeyRef:
          name: integration-test-user
          key: username
    - name: INTEGRATION_TEST_USER_TOKEN
      valueFrom:
        secretKeyRef:
          name: integration-test-user
          key: token
    - name: ROBOQUAT_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-roboquat-automatic-changelog
          key: token
    command:
      - bash
      - -c
      - |
        sleep 1
        set -Eeuo pipefail

        export GITHUB_TOKEN=$(echo $GITHUB_TOKEN | xargs)
        export DOCKER_HOST=tcp://$NODENAME:2375

        echo "Job is running on node $NODENAME" | werft log slice "Node information"

        ( \
          sudo chown gitpod:gitpod $GOCACHE && \
          sudo chown -R gitpod:gitpod /workspace && \
          echo "done" \
        ) | werft log slice "chowning /workspace and $GOCACHE"

        {{ if .Annotations.leewayfromgit }}
        ( \
          LEEWAY_SRC="github.com/gitpod-io/leeway@{{ .Annotations.leewayfromgit }}" && \
          echo "Installing Leeway from $LEEWAY_SRC" && \
          GOBIN=$(pwd) go install "$LEEWAY_SRC" && \
          sudo mv leeway $(dirname $(which leeway))
        ) | werft log slice "Building fresh Leeway binary from source"
        {{ end }}

        ( \
          mkdir -p /workspace/.ssh && \
          cp /mnt/secrets/harvester-vm-ssh-keys/id_rsa /workspace/.ssh/id_rsa_harvester_vm && \
          cp /mnt/secrets/harvester-vm-ssh-keys/id_rsa.pub /workspace/.ssh/id_rsa_harvester_vm.pub && \
          sudo chmod 600 /workspace/.ssh/id_rsa_harvester_vm && \
          sudo chmod 644 /workspace/.ssh/id_rsa_harvester_vm.pub && \
          echo "done" \
        ) | werft log slice "Prepare SSH keys"

        ( \
          cd .werft && \
          yarn install && \
          mv node_modules .. \
        ) | werft log slice "Installing dependencies"

        printf '{{ toJson . }}' > context.json

        npx ts-node .werft/build.ts
sidecars:
- testdb
